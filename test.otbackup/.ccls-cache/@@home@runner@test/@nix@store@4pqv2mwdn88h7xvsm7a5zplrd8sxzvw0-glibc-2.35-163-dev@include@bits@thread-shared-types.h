[{"ops":[{"insert":"/* Common threading primitives definitions for both POSIX and C11.\n   Copyright (C) 2017-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n#ifndef _THREAD_SHARED_TYPES_H\n#define _THREAD_SHARED_TYPES_H 1\n\n/* Arch-specific definitions.  Each architecture must define the following\n   macros to define the expected sizes of pthread data types:\n\n   __SIZEOF_PTHREAD_ATTR_T        - size of pthread_attr_t.\n   __SIZEOF_PTHREAD_MUTEX_T       - size of pthread_mutex_t.\n   __SIZEOF_PTHREAD_MUTEXATTR_T   - size of pthread_mutexattr_t.\n   __SIZEOF_PTHREAD_COND_T        - size of pthread_cond_t.\n   __SIZEOF_PTHREAD_CONDATTR_T    - size of pthread_condattr_t.\n   __SIZEOF_PTHREAD_RWLOCK_T      - size of pthread_rwlock_t.\n   __SIZEOF_PTHREAD_RWLOCKATTR_T  - size of pthread_rwlockattr_t.\n   __SIZEOF_PTHREAD_BARRIER_T     - size of pthread_barrier_t.\n   __SIZEOF_PTHREAD_BARRIERATTR_T - size of pthread_barrierattr_t.\n\n   The additional macro defines any constraint for the lock alignment\n   inside the thread structures:\n\n   __LOCK_ALIGNMENT - for internal lock/futex usage.\n\n   Same idea but for the once locking primitive:\n\n   __ONCE_ALIGNMENT - for pthread_once_t/once_flag definition.  */\n\n#include <bits/pthreadtypes-arch.h>\n\n#include <bits/atomic_wide_counter.h>\n\n\n/* Common definition of pthread_mutex_t. */\n\ntypedef struct __pthread_internal_list\n{\n  struct __pthread_internal_list *__prev;\n  struct __pthread_internal_list *__next;\n} __pthread_list_t;\n\ntypedef struct __pthread_internal_slist\n{\n  struct __pthread_internal_slist *__next;\n} __pthread_slist_t;\n\n/* Arch-specific mutex definitions.  A generic implementation is provided\n   by sysdeps/nptl/bits/struct_mutex.h.  If required, an architecture\n   can override it by defining:\n\n   1. struct __pthread_mutex_s (used on both pthread_mutex_t and mtx_t\n      definition).  It should contains at least the internal members\n      defined in the generic version.\n\n   2. __LOCK_ALIGNMENT for any extra attribute for internal lock used with\n      atomic operations.\n\n   3. The macro __PTHREAD_MUTEX_INITIALIZER used for static initialization.\n      It should initialize the mutex internal flag.  */\n\n#include <bits/struct_mutex.h>\n\n/* Arch-sepecific read-write lock definitions.  A generic implementation is\n   provided by struct_rwlock.h.  If required, an architecture can override it\n   by defining:\n\n   1. struct __pthread_rwlock_arch_t (used on pthread_rwlock_t definition).\n      It should contain at least the internal members defined in the\n      generic version.\n\n   2. The macro __PTHREAD_RWLOCK_INITIALIZER used for static initialization.\n      It should initialize the rwlock internal type.  */\n\n#include <bits/struct_rwlock.h>\n\n\n/* Common definition of pthread_cond_t. */\n\nstruct __pthread_cond_s\n{\n  __atomic_wide_counter __wseq;\n  __atomic_wide_counter __g1_start;\n  unsigned int __g_refs[2] __LOCK_ALIGNMENT;\n  unsigned int __g_size[2];\n  unsigned int __g1_orig_size;\n  unsigned int __wrefs;\n  unsigned int __g_signals[2];\n};\n\ntypedef unsigned int __tss_t;\ntypedef unsigned long int __thrd_t;\n\ntypedef struct\n{\n  int __data __ONCE_ALIGNMENT;\n} __once_flag;\n\n#define __ONCE_FLAG_INIT { 0 }\n\n#endif /* _THREAD_SHARED_TYPES_H  */\n"}],"crc32":3067045564,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]