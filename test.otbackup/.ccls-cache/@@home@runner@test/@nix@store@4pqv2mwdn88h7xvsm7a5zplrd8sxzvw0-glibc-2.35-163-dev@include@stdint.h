[{"ops":[{"insert":"/* Copyright (C) 1997-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n/*\n *\tISO C99: 7.18 Integer types <stdint.h>\n */\n\n#ifndef _STDINT_H\n#define _STDINT_H\t1\n\n#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION\n#include <bits/libc-header-start.h>\n#include <bits/types.h>\n#include <bits/wchar.h>\n#include <bits/wordsize.h>\n\n/* Exact integral types.  */\n\n/* Signed.  */\n#include <bits/stdint-intn.h>\n\n/* Unsigned.  */\n#include <bits/stdint-uintn.h>\n\n\n/* Small types.  */\n\n/* Signed.  */\ntypedef __int_least8_t int_least8_t;\ntypedef __int_least16_t int_least16_t;\ntypedef __int_least32_t int_least32_t;\ntypedef __int_least64_t int_least64_t;\n\n/* Unsigned.  */\ntypedef __uint_least8_t uint_least8_t;\ntypedef __uint_least16_t uint_least16_t;\ntypedef __uint_least32_t uint_least32_t;\ntypedef __uint_least64_t uint_least64_t;\n\n\n/* Fast types.  */\n\n/* Signed.  */\ntypedef signed char\t\tint_fast8_t;\n#if __WORDSIZE == 64\ntypedef long int\t\tint_fast16_t;\ntypedef long int\t\tint_fast32_t;\ntypedef long int\t\tint_fast64_t;\n#else\ntypedef int\t\t\tint_fast16_t;\ntypedef int\t\t\tint_fast32_t;\n__extension__\ntypedef long long int\t\tint_fast64_t;\n#endif\n\n/* Unsigned.  */\ntypedef unsigned char\t\tuint_fast8_t;\n#if __WORDSIZE == 64\ntypedef unsigned long int\tuint_fast16_t;\ntypedef unsigned long int\tuint_fast32_t;\ntypedef unsigned long int\tuint_fast64_t;\n#else\ntypedef unsigned int\t\tuint_fast16_t;\ntypedef unsigned int\t\tuint_fast32_t;\n__extension__\ntypedef unsigned long long int\tuint_fast64_t;\n#endif\n\n\n/* Types for `void *' pointers.  */\n#if __WORDSIZE == 64\n# ifndef __intptr_t_defined\ntypedef long int\t\tintptr_t;\n#  define __intptr_t_defined\n# endif\ntypedef unsigned long int\tuintptr_t;\n#else\n# ifndef __intptr_t_defined\ntypedef int\t\t\tintptr_t;\n#  define __intptr_t_defined\n# endif\ntypedef unsigned int\t\tuintptr_t;\n#endif\n\n\n/* Largest integral types.  */\ntypedef __intmax_t\t\tintmax_t;\ntypedef __uintmax_t\t\tuintmax_t;\n\n\n# if __WORDSIZE == 64\n#  define __INT64_C(c)\tc ## L\n#  define __UINT64_C(c)\tc ## UL\n# else\n#  define __INT64_C(c)\tc ## LL\n#  define __UINT64_C(c)\tc ## ULL\n# endif\n\n/* Limits of integral types.  */\n\n/* Minimum of signed integral types.  */\n# define INT8_MIN\t\t(-128)\n# define INT16_MIN\t\t(-32767-1)\n# define INT32_MIN\t\t(-2147483647-1)\n# define INT64_MIN\t\t(-__INT64_C(9223372036854775807)-1)\n/* Maximum of signed integral types.  */\n# define INT8_MAX\t\t(127)\n# define INT16_MAX\t\t(32767)\n# define INT32_MAX\t\t(2147483647)\n# define INT64_MAX\t\t(__INT64_C(9223372036854775807))\n\n/* Maximum of unsigned integral types.  */\n# define UINT8_MAX\t\t(255)\n# define UINT16_MAX\t\t(65535)\n# define UINT32_MAX\t\t(4294967295U)\n# define UINT64_MAX\t\t(__UINT64_C(18446744073709551615))\n\n\n/* Minimum of signed integral types having a minimum size.  */\n# define INT_LEAST8_MIN\t\t(-128)\n# define INT_LEAST16_MIN\t(-32767-1)\n# define INT_LEAST32_MIN\t(-2147483647-1)\n# define INT_LEAST64_MIN\t(-__INT64_C(9223372036854775807)-1)\n/* Maximum of signed integral types having a minimum size.  */\n# define INT_LEAST8_MAX\t\t(127)\n# define INT_LEAST16_MAX\t(32767)\n# define INT_LEAST32_MAX\t(2147483647)\n# define INT_LEAST64_MAX\t(__INT64_C(9223372036854775807))\n\n/* Maximum of unsigned integral types having a minimum size.  */\n# define UINT_LEAST8_MAX\t(255)\n# define UINT_LEAST16_MAX\t(65535)\n# define UINT_LEAST32_MAX\t(4294967295U)\n# define UINT_LEAST64_MAX\t(__UINT64_C(18446744073709551615))\n\n\n/* Minimum of fast signed integral types having a minimum size.  */\n# define INT_FAST8_MIN\t\t(-128)\n# if __WORDSIZE == 64\n#  define INT_FAST16_MIN\t(-9223372036854775807L-1)\n#  define INT_FAST32_MIN\t(-9223372036854775807L-1)\n# else\n#  define INT_FAST16_MIN\t(-2147483647-1)\n#  define INT_FAST32_MIN\t(-2147483647-1)\n# endif\n# define INT_FAST64_MIN\t\t(-__INT64_C(9223372036854775807)-1)\n/* Maximum of fast signed integral types having a minimum size.  */\n# define INT_FAST8_MAX\t\t(127)\n# if __WORDSIZE == 64\n#  define INT_FAST16_MAX\t(9223372036854775807L)\n#  define INT_FAST32_MAX\t(9223372036854775807L)\n# else\n#  define INT_FAST16_MAX\t(2147483647)\n#  define INT_FAST32_MAX\t(2147483647)\n# endif\n# define INT_FAST64_MAX\t\t(__INT64_C(9223372036854775807))\n\n/* Maximum of fast unsigned integral types having a minimum size.  */\n# define UINT_FAST8_MAX\t\t(255)\n# if __WORDSIZE == 64\n#  define UINT_FAST16_MAX\t(18446744073709551615UL)\n#  define UINT_FAST32_MAX\t(18446744073709551615UL)\n# else\n#  define UINT_FAST16_MAX\t(4294967295U)\n#  define UINT_FAST32_MAX\t(4294967295U)\n# endif\n# define UINT_FAST64_MAX\t(__UINT64_C(18446744073709551615))\n\n\n/* Values to test for integral types holding `void *' pointer.  */\n# if __WORDSIZE == 64\n#  define INTPTR_MIN\t\t(-9223372036854775807L-1)\n#  define INTPTR_MAX\t\t(9223372036854775807L)\n#  define UINTPTR_MAX\t\t(18446744073709551615UL)\n# else\n#  define INTPTR_MIN\t\t(-2147483647-1)\n#  define INTPTR_MAX\t\t(2147483647)\n#  define UINTPTR_MAX\t\t(4294967295U)\n# endif\n\n\n/* Minimum for largest signed integral type.  */\n# define INTMAX_MIN\t\t(-__INT64_C(9223372036854775807)-1)\n/* Maximum for largest signed integral type.  */\n# define INTMAX_MAX\t\t(__INT64_C(9223372036854775807))\n\n/* Maximum for largest unsigned integral type.  */\n# define UINTMAX_MAX\t\t(__UINT64_C(18446744073709551615))\n\n\n/* Limits of other integer types.  */\n\n/* Limits of `ptrdiff_t' type.  */\n# if __WORDSIZE == 64\n#  define PTRDIFF_MIN\t\t(-9223372036854775807L-1)\n#  define PTRDIFF_MAX\t\t(9223372036854775807L)\n# else\n#  if __WORDSIZE32_PTRDIFF_LONG\n#   define PTRDIFF_MIN\t\t(-2147483647L-1)\n#   define PTRDIFF_MAX\t\t(2147483647L)\n#  else\n#   define PTRDIFF_MIN\t\t(-2147483647-1)\n#   define PTRDIFF_MAX\t\t(2147483647)\n#  endif\n# endif\n\n/* Limits of `sig_atomic_t'.  */\n# define SIG_ATOMIC_MIN\t\t(-2147483647-1)\n# define SIG_ATOMIC_MAX\t\t(2147483647)\n\n/* Limit of `size_t' type.  */\n# if __WORDSIZE == 64\n#  define SIZE_MAX\t\t(18446744073709551615UL)\n# else\n#  if __WORDSIZE32_SIZE_ULONG\n#   define SIZE_MAX\t\t(4294967295UL)\n#  else\n#   define SIZE_MAX\t\t(4294967295U)\n#  endif\n# endif\n\n/* Limits of `wchar_t'.  */\n# ifndef WCHAR_MIN\n/* These constants might also be defined in <wchar.h>.  */\n#  define WCHAR_MIN\t\t__WCHAR_MIN\n#  define WCHAR_MAX\t\t__WCHAR_MAX\n# endif\n\n/* Limits of `wint_t'.  */\n# define WINT_MIN\t\t(0u)\n# define WINT_MAX\t\t(4294967295u)\n\n/* Signed.  */\n# define INT8_C(c)\tc\n# define INT16_C(c)\tc\n# define INT32_C(c)\tc\n# if __WORDSIZE == 64\n#  define INT64_C(c)\tc ## L\n# else\n#  define INT64_C(c)\tc ## LL\n# endif\n\n/* Unsigned.  */\n# define UINT8_C(c)\tc\n# define UINT16_C(c)\tc\n# define UINT32_C(c)\tc ## U\n# if __WORDSIZE == 64\n#  define UINT64_C(c)\tc ## UL\n# else\n#  define UINT64_C(c)\tc ## ULL\n# endif\n\n/* Maximal type.  */\n# if __WORDSIZE == 64\n#  define INTMAX_C(c)\tc ## L\n#  define UINTMAX_C(c)\tc ## UL\n# else\n#  define INTMAX_C(c)\tc ## LL\n#  define UINTMAX_C(c)\tc ## ULL\n# endif\n\n#if __GLIBC_USE (IEC_60559_BFP_EXT_C2X)\n\n# define INT8_WIDTH 8\n# define UINT8_WIDTH 8\n# define INT16_WIDTH 16\n# define UINT16_WIDTH 16\n# define INT32_WIDTH 32\n# define UINT32_WIDTH 32\n# define INT64_WIDTH 64\n# define UINT64_WIDTH 64\n\n# define INT_LEAST8_WIDTH 8\n# define UINT_LEAST8_WIDTH 8\n# define INT_LEAST16_WIDTH 16\n# define UINT_LEAST16_WIDTH 16\n# define INT_LEAST32_WIDTH 32\n# define UINT_LEAST32_WIDTH 32\n# define INT_LEAST64_WIDTH 64\n# define UINT_LEAST64_WIDTH 64\n\n# define INT_FAST8_WIDTH 8\n# define UINT_FAST8_WIDTH 8\n# define INT_FAST16_WIDTH __WORDSIZE\n# define UINT_FAST16_WIDTH __WORDSIZE\n# define INT_FAST32_WIDTH __WORDSIZE\n# define UINT_FAST32_WIDTH __WORDSIZE\n# define INT_FAST64_WIDTH 64\n# define UINT_FAST64_WIDTH 64\n\n# define INTPTR_WIDTH __WORDSIZE\n# define UINTPTR_WIDTH __WORDSIZE\n\n# define INTMAX_WIDTH 64\n# define UINTMAX_WIDTH 64\n\n# define PTRDIFF_WIDTH __WORDSIZE\n# define SIG_ATOMIC_WIDTH 32\n# define SIZE_WIDTH __WORDSIZE\n# define WCHAR_WIDTH 32\n# define WINT_WIDTH 32\n\n#endif\n\n#endif /* stdint.h */\n"}],"crc32":1196507131,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]