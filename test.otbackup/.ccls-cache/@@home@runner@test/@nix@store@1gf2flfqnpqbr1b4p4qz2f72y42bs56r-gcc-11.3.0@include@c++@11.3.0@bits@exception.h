[{"ops":[{"insert":"// Exception Handling support header for -*- C++ -*-\n\n// Copyright (C) 2016-2021 Free Software Foundation, Inc.\n//\n// This file is part of GCC.\n//\n// GCC is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 3, or (at your option)\n// any later version.\n//\n// GCC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/exception.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly.\n */\n\n#ifndef __EXCEPTION_H\n#define __EXCEPTION_H 1\n\n#pragma GCC system_header\n\n#pragma GCC visibility push(default)\n\n#include <bits/c++config.h>\n\nextern \"C++\" {\n\nnamespace std\n{\n  /**\n   * @defgroup exceptions Exceptions\n   * @ingroup diagnostics\n   * @since C++98\n   *\n   * Classes and functions for reporting errors via exceptions.\n   * @{\n   */\n\n  /**\n   *  @brief Base class for all library exceptions.\n   *\n   *  This is the base class for all exceptions thrown by the standard\n   *  library, and by certain language expressions.  You are free to derive\n   *  your own %exception classes, or use a different hierarchy, or to\n   *  throw non-class data (e.g., fundamental types).\n   */\n  class exception\n  {\n  public:\n    exception() _GLIBCXX_NOTHROW { }\n    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n#if __cplusplus >= 201103L\n    exception(const exception&) = default;\n    exception& operator=(const exception&) = default;\n    exception(exception&&) = default;\n    exception& operator=(exception&&) = default;\n#endif\n\n    /** Returns a C-style character string describing the general cause\n     *  of the current error.  */\n    virtual const char*\n    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n  };\n\n  /// @}\n\n} // namespace std\n\n}\n\n#pragma GCC visibility pop\n\n#endif\n"}],"crc32":2034954761,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]