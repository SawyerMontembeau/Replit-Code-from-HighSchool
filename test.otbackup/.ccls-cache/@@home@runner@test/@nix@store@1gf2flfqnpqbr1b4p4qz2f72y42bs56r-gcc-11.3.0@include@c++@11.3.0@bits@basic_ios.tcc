[{"ops":[{"insert":"// basic_ios member functions -*- C++ -*-\n\n// Copyright (C) 1999-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/basic_ios.tcc\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{ios}\n */\n\n#ifndef _BASIC_IOS_TCC\n#define _BASIC_IOS_TCC 1\n\n#pragma GCC system_header\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  template<typename _CharT, typename _Traits>\n    void\n    basic_ios<_CharT, _Traits>::clear(iostate __state)\n    {\n      if (this->rdbuf())\n\t_M_streambuf_state = __state;\n      else\n\t  _M_streambuf_state = __state | badbit;\n      if (this->exceptions() & this->rdstate())\n\t__throw_ios_failure(__N(\"basic_ios::clear\"));\n    }\n\n  template<typename _CharT, typename _Traits>\n    basic_streambuf<_CharT, _Traits>*\n    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)\n    {\n      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;\n      _M_streambuf = __sb;\n      this->clear();\n      return __old;\n    }\n\n  template<typename _CharT, typename _Traits>\n    basic_ios<_CharT, _Traits>&\n    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)\n    {\n      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n      // 292. effects of a.copyfmt (a)\n      if (this != &__rhs)\n\t{\n\t  // Per 27.1.1, do not call imbue, yet must trash all caches\n\t  // associated with imbue()\n\n\t  // Alloc any new word array first, so if it fails we have \"rollback\".\n\t  _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?\n\t                     _M_local_word : new _Words[__rhs._M_word_size];\n\n\t  // Bump refs before doing callbacks, for safety.\n\t  _Callback_list* __cb = __rhs._M_callbacks;\n\t  if (__cb)\n\t    __cb->_M_add_reference();\n\t  _M_call_callbacks(erase_event);\n\t  if (_M_word != _M_local_word)\n\t    {\n\t      delete [] _M_word;\n\t      _M_word = 0;\n\t    }\n\t  _M_dispose_callbacks();\n\n\t  // NB: Don't want any added during above.\n\t  _M_callbacks = __cb;\n\t  for (int __i = 0; __i < __rhs._M_word_size; ++__i)\n\t    __words[__i] = __rhs._M_word[__i];\n\t  _M_word = __words;\n\t  _M_word_size = __rhs._M_word_size;\n\n\t  this->flags(__rhs.flags());\n\t  this->width(__rhs.width());\n\t  this->precision(__rhs.precision());\n\t  this->tie(__rhs.tie());\n\t  this->fill(__rhs.fill());\n\t  _M_ios_locale = __rhs.getloc();\n\t  _M_cache_locale(_M_ios_locale);\n\n\t  _M_call_callbacks(copyfmt_event);\n\n\t  // The next is required to be the last assignment.\n\t  this->exceptions(__rhs.exceptions());\n\t}\n      return *this;\n    }\n\n  // Locales:\n  template<typename _CharT, typename _Traits>\n    locale\n    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)\n    {\n      locale __old(this->getloc());\n      ios_base::imbue(__loc);\n      _M_cache_locale(__loc);\n      if (this->rdbuf() != 0)\n\tthis->rdbuf()->pubimbue(__loc);\n      return __old;\n    }\n\n  template<typename _CharT, typename _Traits>\n    void\n    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)\n    {\n      // NB: This may be called more than once on the same object.\n      ios_base::_M_init();\n\n      // Cache locale data and specific facets used by iostreams.\n      _M_cache_locale(_M_ios_locale);\n\n      // NB: The 27.4.4.1 Postconditions Table specifies requirements\n      // after basic_ios::init() has been called. As part of this,\n      // fill() must return widen(' ') any time after init() has been\n      // called, which needs an imbued ctype facet of char_type to\n      // return without throwing an exception. Unfortunately,\n      // ctype<char_type> is not necessarily a required facet, so\n      // streams with char_type != [char, wchar_t] will not have it by\n      // default. Because of this, the correct value for _M_fill is\n      // constructed on the first call of fill(). That way,\n      // unformatted input and output with non-required basic_ios\n      // instantiations is possible even without imbuing the expected\n      // ctype<char_type> facet.\n      _M_fill = _CharT();\n      _M_fill_init = false;\n\n      _M_tie = 0;\n      _M_exception = goodbit;\n      _M_streambuf = __sb;\n      _M_streambuf_state = __sb ? goodbit : badbit;\n    }\n\n  template<typename _CharT, typename _Traits>\n    void\n    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)\n    {\n      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))\n\t_M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));\n      else\n\t_M_ctype = 0;\n\n      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))\n\t_M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));\n      else\n\t_M_num_put = 0;\n\n      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))\n\t_M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));\n      else\n\t_M_num_get = 0;\n    }\n\n  // Inhibit implicit instantiations for required instantiations,\n  // which are defined via explicit instantiations elsewhere.\n#if _GLIBCXX_EXTERN_TEMPLATE\n  extern template class basic_ios<char>;\n\n#ifdef _GLIBCXX_USE_WCHAR_T\n  extern template class basic_ios<wchar_t>;\n#endif\n#endif\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace std\n\n#endif\n"}],"crc32":667823553,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]