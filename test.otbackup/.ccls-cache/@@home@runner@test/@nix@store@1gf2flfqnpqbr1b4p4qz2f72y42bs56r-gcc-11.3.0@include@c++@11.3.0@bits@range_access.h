[{"ops":[{"insert":"// Range access functions for containers -*- C++ -*-\n\n// Copyright (C) 2010-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/range_access.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{iterator}\n */\n\n#ifndef _GLIBCXX_RANGE_ACCESS_H\n#define _GLIBCXX_RANGE_ACCESS_H 1\n\n#pragma GCC system_header\n\n#if __cplusplus >= 201103L\n#include <initializer_list>\n#include <type_traits>\t    // common_type_t, make_signed_t\n#include <bits/stl_iterator.h> // reverse_iterator\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  /**\n   *  @brief  Return an iterator pointing to the first element of\n   *          the container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    begin(_Container& __cont) -> decltype(__cont.begin())\n    { return __cont.begin(); }\n\n  /**\n   *  @brief  Return an iterator pointing to the first element of\n   *          the const container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    begin(const _Container& __cont) -> decltype(__cont.begin())\n    { return __cont.begin(); }\n\n  /**\n   *  @brief  Return an iterator pointing to one past the last element of\n   *          the container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    end(_Container& __cont) -> decltype(__cont.end())\n    { return __cont.end(); }\n\n  /**\n   *  @brief  Return an iterator pointing to one past the last element of\n   *          the const container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    end(const _Container& __cont) -> decltype(__cont.end())\n    { return __cont.end(); }\n\n  /**\n   *  @brief  Return an iterator pointing to the first element of the array.\n   *  @param  __arr  Array.\n   */\n  template<typename _Tp, size_t _Nm>\n    inline _GLIBCXX14_CONSTEXPR _Tp*\n    begin(_Tp (&__arr)[_Nm]) noexcept\n    { return __arr; }\n\n  /**\n   *  @brief  Return an iterator pointing to one past the last element\n   *          of the array.\n   *  @param  __arr  Array.\n   */\n  template<typename _Tp, size_t _Nm>\n    inline _GLIBCXX14_CONSTEXPR _Tp*\n    end(_Tp (&__arr)[_Nm]) noexcept\n    { return __arr + _Nm; }\n\n#if __cplusplus >= 201402L\n\n  template<typename _Tp> class valarray;\n  // These overloads must be declared for cbegin and cend to use them.\n  template<typename _Tp> _Tp* begin(valarray<_Tp>&) noexcept;\n  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&) noexcept;\n  template<typename _Tp> _Tp* end(valarray<_Tp>&) noexcept;\n  template<typename _Tp> const _Tp* end(const valarray<_Tp>&) noexcept;\n\n  /**\n   *  @brief  Return an iterator pointing to the first element of\n   *          the const container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline constexpr auto\n    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))\n      -> decltype(std::begin(__cont))\n    { return std::begin(__cont); }\n\n  /**\n   *  @brief  Return an iterator pointing to one past the last element of\n   *          the const container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline constexpr auto\n    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))\n      -> decltype(std::end(__cont))\n    { return std::end(__cont); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing to the last element of\n   *          the container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    rbegin(_Container& __cont) -> decltype(__cont.rbegin())\n    { return __cont.rbegin(); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing to the last element of\n   *          the const container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())\n    { return __cont.rbegin(); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing one past the first element of\n   *          the container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    rend(_Container& __cont) -> decltype(__cont.rend())\n    { return __cont.rend(); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing one past the first element of\n   *          the const container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    rend(const _Container& __cont) -> decltype(__cont.rend())\n    { return __cont.rend(); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing to the last element of\n   *          the array.\n   *  @param  __arr  Array.\n   */\n  template<typename _Tp, size_t _Nm>\n    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>\n    rbegin(_Tp (&__arr)[_Nm]) noexcept\n    { return reverse_iterator<_Tp*>(__arr + _Nm); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing one past the first element of\n   *          the array.\n   *  @param  __arr  Array.\n   */\n  template<typename _Tp, size_t _Nm>\n    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>\n    rend(_Tp (&__arr)[_Nm]) noexcept\n    { return reverse_iterator<_Tp*>(__arr); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing to the last element of\n   *          the initializer_list.\n   *  @param  __il  initializer_list.\n   */\n  template<typename _Tp>\n    inline _GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp*>\n    rbegin(initializer_list<_Tp> __il) noexcept\n    { return reverse_iterator<const _Tp*>(__il.end()); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing one past the first element of\n   *          the initializer_list.\n   *  @param  __il  initializer_list.\n   */\n  template<typename _Tp>\n    inline _GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp*>\n    rend(initializer_list<_Tp> __il) noexcept\n    { return reverse_iterator<const _Tp*>(__il.begin()); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing to the last element of\n   *          the const container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))\n    { return std::rbegin(__cont); }\n\n  /**\n   *  @brief  Return a reverse iterator pointing one past the first element of\n   *          the const container.\n   *  @param  __cont  Container.\n   */\n  template<typename _Container>\n    inline _GLIBCXX17_CONSTEXPR auto\n    crend(const _Container& __cont) -> decltype(std::rend(__cont))\n    { return std::rend(__cont); }\n\n#endif // C++14\n\n#if __cplusplus >= 201703L\n#define __cpp_lib_nonmember_container_access 201411\n\n  /**\n   *  @brief  Return the size of a container.\n   *  @param  __cont  Container.\n   */\n  template <typename _Container>\n    constexpr auto\n    size(const _Container& __cont) noexcept(noexcept(__cont.size()))\n    -> decltype(__cont.size())\n    { return __cont.size(); }\n\n  /**\n   *  @brief  Return the size of an array.\n   */\n  template <typename _Tp, size_t _Nm>\n    constexpr size_t\n    size(const _Tp (&)[_Nm]) noexcept\n    { return _Nm; }\n\n  /**\n   *  @brief  Return whether a container is empty.\n   *  @param  __cont  Container.\n   */\n  template <typename _Container>\n    [[nodiscard]] constexpr auto\n    empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))\n    -> decltype(__cont.empty())\n    { return __cont.empty(); }\n\n  /**\n   *  @brief  Return whether an array is empty (always false).\n   */\n  template <typename _Tp, size_t _Nm>\n    [[nodiscard]] constexpr bool\n    empty(const _Tp (&)[_Nm]) noexcept\n    { return false; }\n\n  /**\n   *  @brief  Return whether an initializer_list is empty.\n   *  @param  __il  Initializer list.\n   */\n  template <typename _Tp>\n    [[nodiscard]] constexpr bool\n    empty(initializer_list<_Tp> __il) noexcept\n    { return __il.size() == 0;}\n\n  /**\n   *  @brief  Return the data pointer of a container.\n   *  @param  __cont  Container.\n   */\n  template <typename _Container>\n    constexpr auto\n    data(_Container& __cont) noexcept(noexcept(__cont.data()))\n    -> decltype(__cont.data())\n    { return __cont.data(); }\n\n  /**\n   *  @brief  Return the data pointer of a const container.\n   *  @param  __cont  Container.\n   */\n  template <typename _Container>\n    constexpr auto\n    data(const _Container& __cont) noexcept(noexcept(__cont.data()))\n    -> decltype(__cont.data())\n    { return __cont.data(); }\n\n  /**\n   *  @brief  Return the data pointer of an array.\n   *  @param  __array  Array.\n   */\n  template <typename _Tp, size_t _Nm>\n    constexpr _Tp*\n    data(_Tp (&__array)[_Nm]) noexcept\n    { return __array; }\n\n  /**\n   *  @brief  Return the data pointer of an initializer list.\n   *  @param  __il  Initializer list.\n   */\n  template <typename _Tp>\n    constexpr const _Tp*\n    data(initializer_list<_Tp> __il) noexcept\n    { return __il.begin(); }\n\n#if __cplusplus > 201703L\n#define __cpp_lib_ssize 201902L\n  template<typename _Container>\n    constexpr auto\n    ssize(const _Container& __cont)\n    noexcept(noexcept(__cont.size()))\n    -> common_type_t<ptrdiff_t, make_signed_t<decltype(__cont.size())>>\n    {\n      using type = make_signed_t<decltype(__cont.size())>;\n      return static_cast<common_type_t<ptrdiff_t, type>>(__cont.size());\n    }\n\n  template<typename _Tp, ptrdiff_t _Num>\n    constexpr ptrdiff_t\n    ssize(const _Tp (&)[_Num]) noexcept\n    { return _Num; }\n#endif // C++20\n\n#endif // C++17\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n\n#endif // C++11\n#endif // _GLIBCXX_RANGE_ACCESS_H\n"}],"crc32":1733865387,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]