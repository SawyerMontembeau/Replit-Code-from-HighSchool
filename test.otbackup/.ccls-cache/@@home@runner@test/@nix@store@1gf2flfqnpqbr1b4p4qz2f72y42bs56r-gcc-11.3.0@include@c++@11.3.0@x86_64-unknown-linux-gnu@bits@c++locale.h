[{"ops":[{"insert":"// Wrapper for underlying C-language localization -*- C++ -*-\n\n// Copyright (C) 2001-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/c++locale.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{locale}\n */\n\n//\n// ISO C++ 14882: 22.8  Standard locale categories.\n//\n\n// Written by Benjamin Kosnik <bkoz@redhat.com>\n\n#ifndef _GLIBCXX_CXX_LOCALE_H\n#define _GLIBCXX_CXX_LOCALE_H 1\n\n#pragma GCC system_header\n\n#include <clocale>\n\n#define _GLIBCXX_C_LOCALE_GNU 1\n\n#define _GLIBCXX_NUM_CATEGORIES 6\n\n#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\nnamespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  extern \"C\" __typeof(uselocale) __uselocale;\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n#endif\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  typedef __locale_t\t\t__c_locale;\n\n  // Convert numeric value of type double and long double to string and\n  // return length of string.  If vsnprintf is available use it, otherwise\n  // fall back to the unsafe vsprintf which, in general, can be dangerous\n  // and should be avoided.\n  inline int\n  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),\n\t\t   char* __out,\n\t\t   const int __size __attribute__ ((__unused__)),\n\t\t   const char* __fmt, ...)\n  {\n#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n    __c_locale __old = __gnu_cxx::__uselocale(__cloc);\n#else\n    char* __old = std::setlocale(LC_NUMERIC, 0);\n    char* __sav = 0;\n    if (__builtin_strcmp(__old, \"C\"))\n      {\n\tconst size_t __len = __builtin_strlen(__old) + 1;\n\t__sav = new char[__len];\n\t__builtin_memcpy(__sav, __old, __len);\n\tstd::setlocale(LC_NUMERIC, \"C\");\n      }\n#endif\n\n    __builtin_va_list __args;\n    __builtin_va_start(__args, __fmt);\n\n#if _GLIBCXX_USE_C99_STDIO\n    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);\n#else\n    const int __ret = __builtin_vsprintf(__out, __fmt, __args);\n#endif\n\n    __builtin_va_end(__args);\n\n#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n    __gnu_cxx::__uselocale(__old);\n#else\n    if (__sav)\n      {\n\tstd::setlocale(LC_NUMERIC, __sav);\n\tdelete [] __sav;\n      }\n#endif\n    return __ret;\n  }\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n\n#endif\n"}],"crc32":1409205419,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]