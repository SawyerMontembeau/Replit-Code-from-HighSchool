[{"ops":[{"insert":"/* System-dependent timing definitions.  Linux version.\n   Copyright (C) 1996-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n/*\n * Never include this file directly; use <time.h> instead.\n */\n\n#ifndef _BITS_TIME_H\n#define _BITS_TIME_H\t1\n\n#include <bits/types.h>\n\n/* ISO/IEC 9899:1999 7.23.1: Components of time\n   The macro `CLOCKS_PER_SEC' is an expression with type `clock_t' that is\n   the number per second of the value returned by the `clock' function.  */\n/* CAE XSH, Issue 4, Version 2: <time.h>\n   The value of CLOCKS_PER_SEC is required to be 1 million on all\n   XSI-conformant systems. */\n#define CLOCKS_PER_SEC  ((__clock_t) 1000000)\n\n#if (!defined __STRICT_ANSI__ || defined __USE_POSIX) \\\n   && !defined __USE_XOPEN2K\n/* Even though CLOCKS_PER_SEC has such a strange value CLK_TCK\n   presents the real value for clock ticks per second for the system.  */\nextern long int __sysconf (int);\n# define CLK_TCK ((__clock_t) __sysconf (2))\t/* 2 is _SC_CLK_TCK */\n#endif\n\n#ifdef __USE_POSIX199309\n/* Identifier for system-wide realtime clock.  */\n# define CLOCK_REALTIME\t\t\t0\n/* Monotonic system-wide clock.  */\n# define CLOCK_MONOTONIC\t\t1\n/* High-resolution timer from the CPU.  */\n# define CLOCK_PROCESS_CPUTIME_ID\t2\n/* Thread-specific CPU-time clock.  */\n# define CLOCK_THREAD_CPUTIME_ID\t3\n/* Monotonic system-wide clock, not adjusted for frequency scaling.  */\n# define CLOCK_MONOTONIC_RAW\t\t4\n/* Identifier for system-wide realtime clock, updated only on ticks.  */\n# define CLOCK_REALTIME_COARSE\t\t5\n/* Monotonic system-wide clock, updated only on ticks.  */\n# define CLOCK_MONOTONIC_COARSE\t\t6\n/* Monotonic system-wide clock that includes time spent in suspension.  */\n# define CLOCK_BOOTTIME\t\t\t7\n/* Like CLOCK_REALTIME but also wakes suspended system.  */\n# define CLOCK_REALTIME_ALARM\t\t8\n/* Like CLOCK_BOOTTIME but also wakes suspended system.  */\n# define CLOCK_BOOTTIME_ALARM\t\t9\n/* Like CLOCK_REALTIME but in International Atomic Time.  */\n# define CLOCK_TAI\t\t\t11\n\n/* Flag to indicate time is absolute.  */\n# define TIMER_ABSTIME\t\t\t1\n#endif\n\n#ifdef __USE_GNU\n# include <bits/timex.h>\n\n__BEGIN_DECLS\n\n/* Tune a POSIX clock.  */\nextern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __THROW;\n\n#ifdef __USE_TIME_BITS64\n# if defined(__REDIRECT_NTH)\nextern int __REDIRECT_NTH (clock_adjtime, (__clockid_t __clock_id,\n                                           struct timex *__utx),\n                           __clock_adjtime64);\n# else\n# define clock_adjtime __clock_adjtime64\n# endif\n#endif\n\n__END_DECLS\n#endif /* use GNU */\n\n#endif\t/* bits/time.h */\n"}],"crc32":2539757929,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]