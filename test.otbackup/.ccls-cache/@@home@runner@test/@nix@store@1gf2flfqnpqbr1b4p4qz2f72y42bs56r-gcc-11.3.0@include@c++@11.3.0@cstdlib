[{"ops":[{"insert":"// -*- C++ -*- forwarding header.\n\n// Copyright (C) 1997-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file include/cstdlib\n *  This is a Standard C++ Library file.  You should @c \\#include this file\n *  in your programs, rather than any of the @a *.h implementation files.\n *\n *  This is the C++ version of the Standard C Library header @c stdlib.h,\n *  and its contents are (mostly) the same as that header, but are all\n *  contained in the namespace @c std (except for names which are defined\n *  as macros in C).\n */\n\n//\n// ISO C++ 14882: 20.4.6  C library\n//\n\n#pragma GCC system_header\n\n#include <bits/c++config.h>\n\n#ifndef _GLIBCXX_CSTDLIB\n#define _GLIBCXX_CSTDLIB 1\n\n#if !_GLIBCXX_HOSTED\n// The C standard does not require a freestanding implementation to\n// provide <stdlib.h>.  However, the C++ standard does still require\n// <cstdlib> -- but only the functionality mentioned in\n// [lib.support.start.term].\n\n#define EXIT_SUCCESS 0\n#define EXIT_FAILURE 1\n\nnamespace std\n{\n  extern \"C\" void abort(void) throw () _GLIBCXX_NORETURN;\n  extern \"C\" int atexit(void (*)(void)) throw ();\n  extern \"C\" void exit(int) throw () _GLIBCXX_NORETURN;\n#if __cplusplus >= 201103L\n# ifdef _GLIBCXX_HAVE_AT_QUICK_EXIT\n  extern \"C\" int at_quick_exit(void (*)(void)) throw ();\n# endif\n# ifdef _GLIBCXX_HAVE_QUICK_EXIT\n  extern \"C\" void quick_exit(int) throw() _GLIBCXX_NORETURN;\n# endif\n#endif\n} // namespace std\n\n#else\n\n// Need to ensure this finds the C library's <stdlib.h> not a libstdc++\n// wrapper that might already be installed later in the include search path.\n#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n#include_next <stdlib.h>\n#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n#include <bits/std_abs.h>\n\n// Get rid of those macros defined in <stdlib.h> in lieu of real functions.\n#undef abort\n#if __cplusplus >= 201703L && defined(_GLIBCXX_HAVE_ALIGNED_ALLOC)\n# undef aligned_alloc\n#endif\n#undef atexit\n#if __cplusplus >= 201103L\n# ifdef _GLIBCXX_HAVE_AT_QUICK_EXIT\n#  undef at_quick_exit\n# endif\n#endif\n#undef atof\n#undef atoi\n#undef atol\n#undef bsearch\n#undef calloc\n#undef div\n#undef exit\n#undef free\n#undef getenv\n#undef labs\n#undef ldiv\n#undef malloc\n#undef mblen\n#undef mbstowcs\n#undef mbtowc\n#undef qsort\n#if __cplusplus >= 201103L\n# ifdef _GLIBCXX_HAVE_QUICK_EXIT\n#  undef quick_exit\n# endif\n#endif\n#undef rand\n#undef realloc\n#undef srand\n#undef strtod\n#undef strtol\n#undef strtoul\n#undef system\n#undef wcstombs\n#undef wctomb\n\nextern \"C++\"\n{\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  using ::div_t;\n  using ::ldiv_t;\n\n  using ::abort;\n#if __cplusplus >= 201703L && defined(_GLIBCXX_HAVE_ALIGNED_ALLOC)\n  using ::aligned_alloc;\n#endif\n  using ::atexit;\n#if __cplusplus >= 201103L\n# ifdef _GLIBCXX_HAVE_AT_QUICK_EXIT\n  using ::at_quick_exit;\n# endif\n#endif\n  using ::atof;\n  using ::atoi;\n  using ::atol;\n  using ::bsearch;\n  using ::calloc;\n  using ::div;\n  using ::exit;\n  using ::free;\n  using ::getenv;\n  using ::labs;\n  using ::ldiv;\n  using ::malloc;\n#ifdef _GLIBCXX_HAVE_MBSTATE_T\n  using ::mblen;\n  using ::mbstowcs;\n  using ::mbtowc;\n#endif // _GLIBCXX_HAVE_MBSTATE_T\n  using ::qsort;\n#if __cplusplus >= 201103L\n# ifdef _GLIBCXX_HAVE_QUICK_EXIT\n  using ::quick_exit;\n# endif\n#endif\n  using ::rand;\n  using ::realloc;\n  using ::srand;\n  using ::strtod;\n  using ::strtol;\n  using ::strtoul;\n  using ::system;\n#ifdef _GLIBCXX_USE_WCHAR_T\n  using ::wcstombs;\n  using ::wctomb;\n#endif // _GLIBCXX_USE_WCHAR_T\n\n#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n  inline ldiv_t\n  div(long __i, long __j) { return ldiv(__i, __j); }\n#endif\n\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n\n#if _GLIBCXX_USE_C99_STDLIB\n\n#undef _Exit\n#undef llabs\n#undef lldiv\n#undef atoll\n#undef strtoll\n#undef strtoull\n#undef strtof\n#undef strtold\n\nnamespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n  using ::lldiv_t;\n#endif\n#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n  extern \"C\" void (_Exit)(int) throw () _GLIBCXX_NORETURN;\n#endif\n#if !_GLIBCXX_USE_C99_DYNAMIC\n  using ::_Exit;\n#endif\n\n#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n  using ::llabs;\n\n  inline lldiv_t\n  div(long long __n, long long __d)\n  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n\n  using ::lldiv;\n#endif\n\n#if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n  extern \"C\" long long int (atoll)(const char *) throw ();\n  extern \"C\" long long int\n    (strtoll)(const char * __restrict, char ** __restrict, int) throw ();\n  extern \"C\" unsigned long long int\n    (strtoull)(const char * __restrict, char ** __restrict, int) throw ();\n#endif\n#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n  using ::atoll;\n  using ::strtoll;\n  using ::strtoull;\n#endif\n  using ::strtof;\n  using ::strtold;\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace __gnu_cxx\n\nnamespace std\n{\n#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n  using ::__gnu_cxx::lldiv_t;\n#endif\n  using ::__gnu_cxx::_Exit;\n#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n  using ::__gnu_cxx::llabs;\n  using ::__gnu_cxx::div;\n  using ::__gnu_cxx::lldiv;\n#endif\n  using ::__gnu_cxx::atoll;\n  using ::__gnu_cxx::strtof;\n  using ::__gnu_cxx::strtoll;\n  using ::__gnu_cxx::strtoull;\n  using ::__gnu_cxx::strtold;\n} // namespace std\n\n#endif // _GLIBCXX_USE_C99_STDLIB\n\n} // extern \"C++\"\n\n#endif // !_GLIBCXX_HOSTED\n\n#endif\n"}],"crc32":2261666325,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]