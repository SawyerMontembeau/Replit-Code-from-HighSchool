[{"ops":[{"insert":"// Exception Handling support header for -*- C++ -*-\n\n// Copyright (C) 1995-2021 Free Software Foundation, Inc.\n//\n// This file is part of GCC.\n//\n// GCC is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 3, or (at your option)\n// any later version.\n//\n// GCC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file exception\n *  This is a Standard C++ Library header.\n */\n\n#ifndef __EXCEPTION__\n#define __EXCEPTION__\n\n#pragma GCC system_header\n\n#pragma GCC visibility push(default)\n\n#include <bits/c++config.h>\n#include <bits/exception.h>\n\nextern \"C++\" {\n\nnamespace std\n{\n  /** @addtogroup exceptions\n   *  @{\n   */\n\n  /** If an %exception is thrown which is not listed in a function's\n   *  %exception specification, one of these may be thrown.\n   *\n   *  @ingroup exceptions\n   */\n  class bad_exception : public exception\n  {\n  public:\n    bad_exception() _GLIBCXX_USE_NOEXCEPT { }\n\n    // This declaration is not useless:\n    // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n    virtual ~bad_exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n\n    // See comment in eh_exception.cc.\n    virtual const char*\n    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n  };\n\n  /// If you write a replacement %terminate handler, it must be of this type.\n  typedef void (*terminate_handler) ();\n\n  /// If you write a replacement %unexpected handler, it must be of this type.\n  typedef void (*unexpected_handler) ();\n\n  /// Takes a new handler function as an argument, returns the old function.\n  terminate_handler set_terminate(terminate_handler) _GLIBCXX_USE_NOEXCEPT;\n\n#if __cplusplus >= 201103L\n  /// Return the current terminate handler.\n  terminate_handler get_terminate() noexcept;\n#endif\n\n  /** The runtime will call this function if %exception handling must be\n   *  abandoned for any reason.  It can also be called by the user.  */\n  void terminate() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__noreturn__));\n\n  /// Takes a new handler function as an argument, returns the old function.\n  unexpected_handler set_unexpected(unexpected_handler) _GLIBCXX_USE_NOEXCEPT;\n\n#if __cplusplus >= 201103L\n  /// Return the current unexpected handler.\n  unexpected_handler get_unexpected() noexcept;\n#endif\n\n  /** The runtime will call this function if an %exception is thrown which\n   *  violates the function's %exception specification.  */\n  void unexpected() __attribute__ ((__noreturn__));\n\n  /** [18.6.4]/1:  'Returns true after completing evaluation of a\n   *  throw-expression until either completing initialization of the\n   *  exception-declaration in the matching handler or entering `unexpected()`\n   *  due to the throw; or after entering `terminate()` for any reason\n   *  other than an explicit call to `terminate()`.  [Note: This includes\n   *  stack unwinding [15.2].  end note]'\n   *\n   *  2: 'When `uncaught_exception()` is true, throwing an\n   *  %exception can result in a call of 1terminate()`\n   *  (15.5.1).'\n   */\n  _GLIBCXX17_DEPRECATED_SUGGEST(\"std::uncaught_exceptions()\")\n  bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n\n#if __cplusplus >= 201703L || !defined(__STRICT_ANSI__) // c++17 or gnu++98\n#define __cpp_lib_uncaught_exceptions 201411L\n  /** The number of uncaught exceptions.\n   *  @since C++17, or any non-strict mode, e.g. `-std=gnu++98`\n   *  @see uncaught_exception()\n   */\n  int uncaught_exceptions() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n#endif\n\n  /// @} group exceptions\n} // namespace std\n\nnamespace __gnu_cxx\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  /**\n   *  @brief A replacement for the standard terminate_handler which\n   *  prints more information about the terminating exception (if any)\n   *  on stderr.\n   *\n   *  @ingroup exceptions\n   *\n   *  Call\n   *   @code\n   *     std::set_terminate(__gnu_cxx::__verbose_terminate_handler)\n   *   @endcode\n   *  to use.  For more info, see\n   *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt02ch06s02.html\n   *\n   *  In 3.4 and later, this is on by default.\n   */\n  void __verbose_terminate_handler();\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n\n} // extern \"C++\"\n\n#pragma GCC visibility pop\n\n#if (__cplusplus >= 201103L)\n#include <bits/exception_ptr.h>\n#include <bits/nested_exception.h>\n#endif\n\n#endif\n"}],"crc32":1884903860,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]