[{"ops":[{"insert":"/* Copyright (C) 1991-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n#ifndef __struct_FILE_defined\n#define __struct_FILE_defined 1\n\n/* Caution: The contents of this file are not part of the official\n   stdio.h API.  However, much of it is part of the official *binary*\n   interface, and therefore cannot be changed.  */\n\n#if defined _IO_USE_OLD_IO_FILE && !defined _LIBC\n# error \"_IO_USE_OLD_IO_FILE should only be defined when building libc itself\"\n#endif\n\n#if defined _IO_lock_t_defined && !defined _LIBC\n# error \"_IO_lock_t_defined should only be defined when building libc itself\"\n#endif\n\n#include <bits/types.h>\n\nstruct _IO_FILE;\nstruct _IO_marker;\nstruct _IO_codecvt;\nstruct _IO_wide_data;\n\n/* During the build of glibc itself, _IO_lock_t will already have been\n   defined by internal headers.  */\n#ifndef _IO_lock_t_defined\ntypedef void _IO_lock_t;\n#endif\n\n/* The tag name of this struct is _IO_FILE to preserve historic\n   C++ mangled names for functions taking FILE* arguments.\n   That name should not be used in new code.  */\nstruct _IO_FILE\n{\n  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  char *_IO_read_ptr;\t/* Current read pointer */\n  char *_IO_read_end;\t/* End of get area. */\n  char *_IO_read_base;\t/* Start of putback+get area. */\n  char *_IO_write_base;\t/* Start of put area. */\n  char *_IO_write_ptr;\t/* Current put pointer. */\n  char *_IO_write_end;\t/* End of put area. */\n  char *_IO_buf_base;\t/* Start of reserve area. */\n  char *_IO_buf_end;\t/* End of reserve area. */\n\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n  int _flags2;\n  __off_t _old_offset; /* This used to be _offset but it's too small.  */\n\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n\nstruct _IO_FILE_complete\n{\n  struct _IO_FILE _file;\n#endif\n  __off64_t _offset;\n  /* Wide character stream stuff.  */\n  struct _IO_codecvt *_codecvt;\n  struct _IO_wide_data *_wide_data;\n  struct _IO_FILE *_freeres_list;\n  void *_freeres_buf;\n  size_t __pad5;\n  int _mode;\n  /* Make sure we don't get into trouble again.  */\n  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];\n};\n\n/* These macros are used by bits/stdio.h and internal headers.  */\n#define __getc_unlocked_body(_fp)\t\t\t\t\t\\\n  (__glibc_unlikely ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end)\t\\\n   ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)\n\n#define __putc_unlocked_body(_ch, _fp)\t\t\t\t\t\\\n  (__glibc_unlikely ((_fp)->_IO_write_ptr >= (_fp)->_IO_write_end)\t\\\n   ? __overflow (_fp, (unsigned char) (_ch))\t\t\t\t\\\n   : (unsigned char) (*(_fp)->_IO_write_ptr++ = (_ch)))\n\n#define _IO_EOF_SEEN 0x0010\n#define __feof_unlocked_body(_fp) (((_fp)->_flags & _IO_EOF_SEEN) != 0)\n\n#define _IO_ERR_SEEN 0x0020\n#define __ferror_unlocked_body(_fp) (((_fp)->_flags & _IO_ERR_SEEN) != 0)\n\n#define _IO_USER_LOCK 0x8000\n/* Many more flag bits are defined internally.  */\n\n#endif\n"}],"crc32":3186069479,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]