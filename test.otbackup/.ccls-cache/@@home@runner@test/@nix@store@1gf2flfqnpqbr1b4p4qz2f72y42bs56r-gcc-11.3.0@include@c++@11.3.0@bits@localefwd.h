[{"ops":[{"insert":"// <locale> Forward declarations -*- C++ -*-\n\n// Copyright (C) 1997-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/localefwd.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{locale}\n */\n\n//\n// ISO C++ 14882: 22.1  Locales\n//\n\n#ifndef _LOCALE_FWD_H\n#define _LOCALE_FWD_H 1\n\n#pragma GCC system_header\n\n#include <bits/c++config.h>\n#include <bits/c++locale.h>  // Defines __c_locale, config-specific include\n#include <iosfwd>            // For ostreambuf_iterator, istreambuf_iterator\n#include <cctype>\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  /** \n   *  @defgroup locales Locales\n   *\n   *  Classes and functions for internationalization and localization.\n   */\n\n  // 22.1.1 Locale\n  class locale;\n\n  template<typename _Facet>\n    bool\n    has_facet(const locale&) throw();\n\n  template<typename _Facet>\n    const _Facet&\n    use_facet(const locale&);\n\n  // 22.1.3 Convenience interfaces\n  template<typename _CharT>\n    bool\n    isspace(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    isprint(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    iscntrl(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    isupper(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    islower(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    isalpha(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    isdigit(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    ispunct(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    isxdigit(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    isalnum(_CharT, const locale&);\n\n  template<typename _CharT>\n    bool\n    isgraph(_CharT, const locale&);\n\n#if __cplusplus >= 201103L\n  template<typename _CharT>\n    bool\n    isblank(_CharT, const locale&);\n#endif\n\n  template<typename _CharT>\n    _CharT\n    toupper(_CharT, const locale&);\n\n  template<typename _CharT>\n    _CharT\n    tolower(_CharT, const locale&);\n\n  // 22.2.1 and 22.2.1.3 ctype\n  struct ctype_base;\n  template<typename _CharT>\n    class ctype;\n  template<> class ctype<char>;\n#ifdef _GLIBCXX_USE_WCHAR_T\n  template<> class ctype<wchar_t>;\n#endif\n  template<typename _CharT>\n    class ctype_byname;\n  // NB: Specialized for char and wchar_t in locale_facets.h.\n\n  class codecvt_base;\n  template<typename _InternT, typename _ExternT, typename _StateT>\n    class codecvt;\n  template<> class codecvt<char, char, mbstate_t>;\n#ifdef _GLIBCXX_USE_WCHAR_T\n  template<> class codecvt<wchar_t, char, mbstate_t>;\n#endif\n#if __cplusplus >= 201103L\n  template<> class codecvt<char16_t, char, mbstate_t>;\n  template<> class codecvt<char32_t, char, mbstate_t>;\n#ifdef _GLIBCXX_USE_CHAR8_T\n  template<> class codecvt<char16_t, char8_t, mbstate_t>;\n  template<> class codecvt<char32_t, char8_t, mbstate_t>;\n#endif\n#endif\n  template<typename _InternT, typename _ExternT, typename _StateT>\n    class codecvt_byname;\n\n  // 22.2.2 and 22.2.3 numeric\n_GLIBCXX_BEGIN_NAMESPACE_LDBL\n  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >\n    class num_get;\n  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n    class num_put;\n_GLIBCXX_END_NAMESPACE_LDBL\n_GLIBCXX_BEGIN_NAMESPACE_CXX11\n  template<typename _CharT> class numpunct;\n  template<typename _CharT> class numpunct_byname;\n_GLIBCXX_END_NAMESPACE_CXX11\n\n_GLIBCXX_BEGIN_NAMESPACE_CXX11\n  // 22.2.4 collation\n  template<typename _CharT>\n    class collate;\n  template<typename _CharT>\n    class collate_byname;\n_GLIBCXX_END_NAMESPACE_CXX11\n\n  // 22.2.5 date and time\n  class time_base;\n_GLIBCXX_BEGIN_NAMESPACE_CXX11\n  template<typename _CharT, typename _InIter =  istreambuf_iterator<_CharT> >\n    class time_get;\n  template<typename _CharT, typename _InIter =  istreambuf_iterator<_CharT> >\n    class time_get_byname;\n_GLIBCXX_END_NAMESPACE_CXX11\n  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n    class time_put;\n  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n    class time_put_byname;\n\n  // 22.2.6 money\n  class money_base;\n_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n  template<typename _CharT, typename _InIter =  istreambuf_iterator<_CharT> >\n    class money_get;\n  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n    class money_put;\n_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n_GLIBCXX_BEGIN_NAMESPACE_CXX11\n  template<typename _CharT, bool _Intl = false>\n    class moneypunct;\n  template<typename _CharT, bool _Intl = false>\n    class moneypunct_byname;\n_GLIBCXX_END_NAMESPACE_CXX11\n\n  // 22.2.7 message retrieval\n  struct messages_base;\n_GLIBCXX_BEGIN_NAMESPACE_CXX11\n  template<typename _CharT>\n    class messages;\n  template<typename _CharT>\n    class messages_byname;\n_GLIBCXX_END_NAMESPACE_CXX11\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace std\n\n#endif\n"}],"crc32":1217825700,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]