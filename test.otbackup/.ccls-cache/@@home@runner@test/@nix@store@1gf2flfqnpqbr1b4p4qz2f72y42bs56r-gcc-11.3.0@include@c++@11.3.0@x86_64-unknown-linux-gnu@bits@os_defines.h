[{"ops":[{"insert":"// Specific definitions for GNU/Linux  -*- C++ -*-\n\n// Copyright (C) 2000-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/os_defines.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{iosfwd}\n */\n\n#ifndef _GLIBCXX_OS_DEFINES\n#define _GLIBCXX_OS_DEFINES 1\n\n// System-specific #define, typedefs, corrections, etc, go here.  This\n// file will come before all others.\n\n// This keeps isanum, et al from being propagated as macros.\n#define __NO_CTYPE 1\n\n#include <features.h>\n\n// Provide a declaration for the possibly deprecated gets function, as\n// glibc 2.15 and later does not declare gets for ISO C11 when\n// __GNU_SOURCE is defined.\n#if __GLIBC_PREREQ(2,15) && defined(_GNU_SOURCE)\n# undef _GLIBCXX_HAVE_GETS\n#endif\n\n// Glibc 2.23 removed the obsolete isinf and isnan declarations. Check the\n// version dynamically in case it has changed since libstdc++ was configured.\n#define _GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC __GLIBC_PREREQ(2,23)\n\n#if __GLIBC_PREREQ(2, 27)\n// Since glibc 2.27 pthread_self() is usable without linking to libpthread.\n# define _GLIBCXX_NATIVE_THREAD_ID pthread_self()\n#else\n// Before then it was in libc.so.6 but not libc.a, and always returns 0,\n// which breaks the invariant this_thread::get_id() != thread::id{}.\n// So only use it if we know the libpthread version is available.\n// Otherwise use (__gthread_t)1 as the ID of the main (and only) thread.\n# define _GLIBCXX_NATIVE_THREAD_ID \\\n  (__gthread_active_p() ? __gthread_self() : (__gthread_t)1)\n#endif\n\n#if __GLIBC_PREREQ(2, 34)\n// Since glibc 2.34 all pthreads functions are usable without linking to\n// libpthread.\n# define _GLIBCXX_GTHREAD_USE_WEAK 0\n#endif\n\n#endif\n"}],"crc32":1404931286,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]