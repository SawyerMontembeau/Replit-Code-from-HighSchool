[{"ops":[{"insert":"// Locale support -*- C++ -*-\n\n// Copyright (C) 2000-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/ctype_inline.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{locale}\n */\n\n//\n// ISO C++ 14882: 22.1  Locales\n//\n\n// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n// functions go in ctype.cc\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  bool\n  ctype<char>::\n  is(mask __m, char __c) const\n  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n\n  const char*\n  ctype<char>::\n  is(const char* __low, const char* __high, mask* __vec) const\n  {\n    while (__low < __high)\n      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n    return __high;\n  }\n\n  const char*\n  ctype<char>::\n  scan_is(mask __m, const char* __low, const char* __high) const\n  {\n    while (__low < __high\n\t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n      ++__low;\n    return __low;\n  }\n\n  const char*\n  ctype<char>::\n  scan_not(mask __m, const char* __low, const char* __high) const\n  {\n    while (__low < __high\n\t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n      ++__low;\n    return __low;\n  }\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n"}],"crc32":1791036370,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]