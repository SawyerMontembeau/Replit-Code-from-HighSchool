[{"ops":[{"insert":"/* bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.\n   Copyright (C) 2012-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n#ifndef _BITS_TYPES_H\n# error \"Never include <bits/typesizes.h> directly; use <sys/types.h> instead.\"\n#endif\n\n#ifndef\t_BITS_TYPESIZES_H\n#define\t_BITS_TYPESIZES_H\t1\n\n/* See <bits/types.h> for the meaning of these macros.  This file exists so\n   that <bits/types.h> need not vary across different GNU platforms.  */\n\n/* X32 kernel interface is 64-bit.  */\n#if defined __x86_64__ && defined __ILP32__\n# define __SYSCALL_SLONG_TYPE\t__SQUAD_TYPE\n# define __SYSCALL_ULONG_TYPE\t__UQUAD_TYPE\n#else\n# define __SYSCALL_SLONG_TYPE\t__SLONGWORD_TYPE\n# define __SYSCALL_ULONG_TYPE\t__ULONGWORD_TYPE\n#endif\n\n#define __DEV_T_TYPE\t\t__UQUAD_TYPE\n#define __UID_T_TYPE\t\t__U32_TYPE\n#define __GID_T_TYPE\t\t__U32_TYPE\n#define __INO_T_TYPE\t\t__SYSCALL_ULONG_TYPE\n#define __INO64_T_TYPE\t\t__UQUAD_TYPE\n#define __MODE_T_TYPE\t\t__U32_TYPE\n#ifdef __x86_64__\n# define __NLINK_T_TYPE\t\t__SYSCALL_ULONG_TYPE\n# define __FSWORD_T_TYPE\t__SYSCALL_SLONG_TYPE\n#else\n# define __NLINK_T_TYPE\t\t__UWORD_TYPE\n# define __FSWORD_T_TYPE\t__SWORD_TYPE\n#endif\n#define __OFF_T_TYPE\t\t__SYSCALL_SLONG_TYPE\n#define __OFF64_T_TYPE\t\t__SQUAD_TYPE\n#define __PID_T_TYPE\t\t__S32_TYPE\n#define __RLIM_T_TYPE\t\t__SYSCALL_ULONG_TYPE\n#define __RLIM64_T_TYPE\t\t__UQUAD_TYPE\n#define __BLKCNT_T_TYPE\t\t__SYSCALL_SLONG_TYPE\n#define __BLKCNT64_T_TYPE\t__SQUAD_TYPE\n#define __FSBLKCNT_T_TYPE\t__SYSCALL_ULONG_TYPE\n#define __FSBLKCNT64_T_TYPE\t__UQUAD_TYPE\n#define __FSFILCNT_T_TYPE\t__SYSCALL_ULONG_TYPE\n#define __FSFILCNT64_T_TYPE\t__UQUAD_TYPE\n#define __ID_T_TYPE\t\t__U32_TYPE\n#define __CLOCK_T_TYPE\t\t__SYSCALL_SLONG_TYPE\n#define __TIME_T_TYPE\t\t__SYSCALL_SLONG_TYPE\n#define __USECONDS_T_TYPE\t__U32_TYPE\n#define __SUSECONDS_T_TYPE\t__SYSCALL_SLONG_TYPE\n#define __SUSECONDS64_T_TYPE\t__SQUAD_TYPE\n#define __DADDR_T_TYPE\t\t__S32_TYPE\n#define __KEY_T_TYPE\t\t__S32_TYPE\n#define __CLOCKID_T_TYPE\t__S32_TYPE\n#define __TIMER_T_TYPE\t\tvoid *\n#define __BLKSIZE_T_TYPE\t__SYSCALL_SLONG_TYPE\n#define __FSID_T_TYPE\t\tstruct { int __val[2]; }\n#define __SSIZE_T_TYPE\t\t__SWORD_TYPE\n#define __CPU_MASK_TYPE \t__SYSCALL_ULONG_TYPE\n\n#ifdef __x86_64__\n/* Tell the libc code that off_t and off64_t are actually the same type\n   for all ABI purposes, even if possibly expressed as different base types\n   for C type-checking purposes.  */\n# define __OFF_T_MATCHES_OFF64_T\t1\n\n/* Same for ino_t and ino64_t.  */\n# define __INO_T_MATCHES_INO64_T\t1\n\n/* And for __rlim_t and __rlim64_t.  */\n# define __RLIM_T_MATCHES_RLIM64_T\t1\n\n/* And for fsblkcnt_t, fsblkcnt64_t, fsfilcnt_t and fsfilcnt64_t.  */\n# define __STATFS_MATCHES_STATFS64  1\n\n/* And for getitimer, setitimer and rusage  */\n# define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1\n#else\n# define __RLIM_T_MATCHES_RLIM64_T\t0\n\n# define __STATFS_MATCHES_STATFS64  0\n\n# define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 0\n#endif\n\n/* Number of descriptors that can fit in an `fd_set'.  */\n#define __FD_SETSIZE\t\t1024\n\n\n#endif /* bits/typesizes.h */\n"}],"crc32":935521538,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]