[{"ops":[{"insert":"/* Macros and inline functions to swap the order of bytes in integer values.\n   Copyright (C) 1997-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n#if !defined _BYTESWAP_H && !defined _NETINET_IN_H && !defined _ENDIAN_H\n# error \"Never use <bits/byteswap.h> directly; include <byteswap.h> instead.\"\n#endif\n\n#ifndef _BITS_BYTESWAP_H\n#define _BITS_BYTESWAP_H 1\n\n#include <features.h>\n#include <bits/types.h>\n\n/* Swap bytes in 16-bit value.  */\n#define __bswap_constant_16(x)\t\t\t\t\t\\\n  ((__uint16_t) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8)))\n\nstatic __inline __uint16_t\n__bswap_16 (__uint16_t __bsx)\n{\n#if __GNUC_PREREQ (4, 8)\n  return __builtin_bswap16 (__bsx);\n#else\n  return __bswap_constant_16 (__bsx);\n#endif\n}\n\n/* Swap bytes in 32-bit value.  */\n#define __bswap_constant_32(x)\t\t\t\t\t\\\n  ((((x) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8)\t\\\n   | (((x) & 0x0000ff00u) << 8) | (((x) & 0x000000ffu) << 24))\n\nstatic __inline __uint32_t\n__bswap_32 (__uint32_t __bsx)\n{\n#if __GNUC_PREREQ (4, 3)\n  return __builtin_bswap32 (__bsx);\n#else\n  return __bswap_constant_32 (__bsx);\n#endif\n}\n\n/* Swap bytes in 64-bit value.  */\n#define __bswap_constant_64(x)\t\t\t\\\n  ((((x) & 0xff00000000000000ull) >> 56)\t\\\n   | (((x) & 0x00ff000000000000ull) >> 40)\t\\\n   | (((x) & 0x0000ff0000000000ull) >> 24)\t\\\n   | (((x) & 0x000000ff00000000ull) >> 8)\t\\\n   | (((x) & 0x00000000ff000000ull) << 8)\t\\\n   | (((x) & 0x0000000000ff0000ull) << 24)\t\\\n   | (((x) & 0x000000000000ff00ull) << 40)\t\\\n   | (((x) & 0x00000000000000ffull) << 56))\n\n__extension__ static __inline __uint64_t\n__bswap_64 (__uint64_t __bsx)\n{\n#if __GNUC_PREREQ (4, 3)\n  return __builtin_bswap64 (__bsx);\n#else\n  return __bswap_constant_64 (__bsx);\n#endif\n}\n\n#endif /* _BITS_BYTESWAP_H */\n"}],"crc32":2462938430,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]