[{"ops":[{"insert":"// -*- C++ -*- C library enhancements header.\n\n// Copyright (C) 2016-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file include/bits/std_abs.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{cmath, cstdlib}\n */\n\n#ifndef _GLIBCXX_BITS_STD_ABS_H\n#define _GLIBCXX_BITS_STD_ABS_H\n\n#pragma GCC system_header\n\n#include <bits/c++config.h>\n\n#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n#include_next <stdlib.h>\n#ifdef __CORRECT_ISO_CPP_MATH_H_PROTO\n# include_next <math.h>\n#endif\n#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n\n#undef abs\n\nextern \"C++\"\n{\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  using ::abs;\n\n#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n  inline long\n  abs(long __i) { return __builtin_labs(__i); }\n#endif\n\n#ifdef _GLIBCXX_USE_LONG_LONG\n  inline long long\n  abs(long long __x) { return __builtin_llabs (__x); }\n#endif\n\n// _GLIBCXX_RESOLVE_LIB_DEFECTS\n// 2192. Validity and return type of std::abs(0u) is unclear\n// 2294. <cstdlib> should declare abs(double)\n// 2735. std::abs(short), std::abs(signed char) and others should return int\n\n#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n  inline _GLIBCXX_CONSTEXPR double\n  abs(double __x)\n  { return __builtin_fabs(__x); }\n\n  inline _GLIBCXX_CONSTEXPR float\n  abs(float __x)\n  { return __builtin_fabsf(__x); }\n\n  inline _GLIBCXX_CONSTEXPR long double\n  abs(long double __x)\n  { return __builtin_fabsl(__x); }\n#endif\n\n#if defined(__GLIBCXX_TYPE_INT_N_0)\n  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n  abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }\n#endif\n#if defined(__GLIBCXX_TYPE_INT_N_1)\n  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1\n  abs(__GLIBCXX_TYPE_INT_N_1 __x) { return __x >= 0 ? __x : -__x; }\n#endif\n#if defined(__GLIBCXX_TYPE_INT_N_2)\n  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2\n  abs(__GLIBCXX_TYPE_INT_N_2 __x) { return __x >= 0 ? __x : -__x; }\n#endif\n#if defined(__GLIBCXX_TYPE_INT_N_3)\n  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3\n  abs(__GLIBCXX_TYPE_INT_N_3 __x) { return __x >= 0 ? __x : -__x; }\n#endif\n\n#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)\n  inline _GLIBCXX_CONSTEXPR\n  __float128\n  abs(__float128 __x)\n  { return __x < 0 ? -__x : __x; }\n#endif\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n} // extern \"C\"++\"\n\n#endif // _GLIBCXX_BITS_STD_ABS_H\n"}],"crc32":1807712852,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]