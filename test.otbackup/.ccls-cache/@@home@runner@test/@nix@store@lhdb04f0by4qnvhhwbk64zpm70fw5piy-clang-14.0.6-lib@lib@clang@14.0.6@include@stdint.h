[{"ops":[{"insert":"/*===---- stdint.h - Standard header for sized integer types --------------===*\\\n *\n * Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n * See https://llvm.org/LICENSE.txt for license information.\n * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n *\n\\*===----------------------------------------------------------------------===*/\n\n#ifndef __CLANG_STDINT_H\n// AIX system headers need stdint.h to be re-enterable while _STD_TYPES_T\n// is defined until an inclusion of it without _STD_TYPES_T occurs, in which\n// case the header guard macro is defined.\n#if !defined(_AIX) || !defined(_STD_TYPES_T) || !defined(__STDC_HOSTED__)\n#define __CLANG_STDINT_H\n#endif\n\n/* If we're hosted, fall back to the system's stdint.h, which might have\n * additional definitions.\n */\n#if __STDC_HOSTED__ && __has_include_next(<stdint.h>)\n\n// C99 7.18.3 Limits of other integer types\n//\n//  Footnote 219, 220: C++ implementations should define these macros only when\n//  __STDC_LIMIT_MACROS is defined before <stdint.h> is included.\n//\n//  Footnote 222: C++ implementations should define these macros only when\n//  __STDC_CONSTANT_MACROS is defined before <stdint.h> is included.\n//\n// C++11 [cstdint.syn]p2:\n//\n//  The macros defined by <cstdint> are provided unconditionally. In particular,\n//  the symbols __STDC_LIMIT_MACROS and __STDC_CONSTANT_MACROS (mentioned in\n//  footnotes 219, 220, and 222 in the C standard) play no role in C++.\n//\n// C11 removed the problematic footnotes.\n//\n// Work around this inconsistency by always defining those macros in C++ mode,\n// so that a C library implementation which follows the C99 standard can be\n// used in C++.\n# ifdef __cplusplus\n#  if !defined(__STDC_LIMIT_MACROS)\n#   define __STDC_LIMIT_MACROS\n#   define __STDC_LIMIT_MACROS_DEFINED_BY_CLANG\n#  endif\n#  if !defined(__STDC_CONSTANT_MACROS)\n#   define __STDC_CONSTANT_MACROS\n#   define __STDC_CONSTANT_MACROS_DEFINED_BY_CLANG\n#  endif\n# endif\n\n# include_next <stdint.h>\n\n# ifdef __STDC_LIMIT_MACROS_DEFINED_BY_CLANG\n#  undef __STDC_LIMIT_MACROS\n#  undef __STDC_LIMIT_MACROS_DEFINED_BY_CLANG\n# endif\n# ifdef __STDC_CONSTANT_MACROS_DEFINED_BY_CLANG\n#  undef __STDC_CONSTANT_MACROS\n#  undef __STDC_CONSTANT_MACROS_DEFINED_BY_CLANG\n# endif\n\n#else\n\n/* C99 7.18.1.1 Exact-width integer types.\n * C99 7.18.1.2 Minimum-width integer types.\n * C99 7.18.1.3 Fastest minimum-width integer types.\n *\n * The standard requires that exact-width type be defined for 8-, 16-, 32-, and\n * 64-bit types if they are implemented. Other exact width types are optional.\n * This implementation defines an exact-width types for every integer width\n * that is represented in the standard integer types.\n *\n * The standard also requires minimum-width types be defined for 8-, 16-, 32-,\n * and 64-bit widths regardless of whether there are corresponding exact-width\n * types.\n *\n * To accommodate targets that are missing types that are exactly 8, 16, 32, or\n * 64 bits wide, this implementation takes an approach of cascading\n * redefinitions, redefining __int_leastN_t to successively smaller exact-width\n * types. It is therefore important that the types are defined in order of\n * descending widths.\n *\n * We currently assume that the minimum-width types and the fastest\n * minimum-width types are the same. This is allowed by the standard, but is\n * suboptimal.\n *\n * In violation of the standard, some targets do not implement a type that is\n * wide enough to represent all of the required widths (8-, 16-, 32-, 64-bit).\n * To accommodate these targets, a required minimum-width type is only\n * defined if there exists an exact-width type of equal or greater width.\n */\n\n#ifdef __INT64_TYPE__\n# ifndef __int8_t_defined /* glibc sys/types.h also defines int64_t*/\ntypedef __INT64_TYPE__ int64_t;\n# endif /* __int8_t_defined */\ntypedef __UINT64_TYPE__ uint64_t;\n# define __int_least64_t int64_t\n# define __uint_least64_t uint64_t\n# define __int_least32_t int64_t\n# define __uint_least32_t uint64_t\n# define __int_least16_t int64_t\n# define __uint_least16_t uint64_t\n# define __int_least8_t int64_t\n# define __uint_least8_t uint64_t\n#endif /* __INT64_TYPE__ */\n\n#ifdef __int_least64_t\ntypedef __int_least64_t int_least64_t;\ntypedef __uint_least64_t uint_least64_t;\ntypedef __int_least64_t int_fast64_t;\ntypedef __uint_least64_t uint_fast64_t;\n#endif /* __int_least64_t */\n\n#ifdef __INT56_TYPE__\ntypedef __INT56_TYPE__ int56_t;\ntypedef __UINT56_TYPE__ uint56_t;\ntypedef int56_t int_least56_t;\ntypedef uint56_t uint_least56_t;\ntypedef int56_t int_fast56_t;\ntypedef uint56_t uint_fast56_t;\n# define __int_least32_t int56_t\n# define __uint_least32_t uint56_t\n# define __int_least16_t int56_t\n# define __uint_least16_t uint56_t\n# define __int_least8_t int56_t\n# define __uint_least8_t uint56_t\n#endif /* __INT56_TYPE__ */\n\n\n#ifdef __INT48_TYPE__\ntypedef __INT48_TYPE__ int48_t;\ntypedef __UINT48_TYPE__ uint48_t;\ntypedef int48_t int_least48_t;\ntypedef uint48_t uint_least48_t;\ntypedef int48_t int_fast48_t;\ntypedef uint48_t uint_fast48_t;\n# define __int_least32_t int48_t\n# define __uint_least32_t uint48_t\n# define __int_least16_t int48_t\n# define __uint_least16_t uint48_t\n# define __int_least8_t int48_t\n# define __uint_least8_t uint48_t\n#endif /* __INT48_TYPE__ */\n\n\n#ifdef __INT40_TYPE__\ntypedef __INT40_TYPE__ int40_t;\ntypedef __UINT40_TYPE__ uint40_t;\ntypedef int40_t int_least40_t;\ntypedef uint40_t uint_least40_t;\ntypedef int40_t int_fast40_t;\ntypedef uint40_t uint_fast40_t;\n# define __int_least32_t int40_t\n# define __uint_least32_t uint40_t\n# define __int_least16_t int40_t\n# define __uint_least16_t uint40_t\n# define __int_least8_t int40_t\n# define __uint_least8_t uint40_t\n#endif /* __INT40_TYPE__ */\n\n\n#ifdef __INT32_TYPE__\n\n# ifndef __int8_t_defined /* glibc sys/types.h also defines int32_t*/\ntypedef __INT32_TYPE__ int32_t;\n# endif /* __int8_t_defined */\n\n# ifndef __uint32_t_defined  /* more glibc compatibility */\n# define __uint32_t_defined\ntypedef __UINT32_TYPE__ uint32_t;\n# endif /* __uint32_t_defined */\n\n# define __int_least32_t int32_t\n# define __uint_least32_t uint32_t\n# define __int_least16_t int32_t\n# define __uint_least16_t uint32_t\n# define __int_least8_t int32_t\n# define __uint_least8_t uint32_t\n#endif /* __INT32_TYPE__ */\n\n#ifdef __int_least32_t\ntypedef __int_least32_t int_least32_t;\ntypedef __uint_least32_t uint_least32_t;\ntypedef __int_least32_t int_fast32_t;\ntypedef __uint_least32_t uint_fast32_t;\n#endif /* __int_least32_t */\n\n#ifdef __INT24_TYPE__\ntypedef __INT24_TYPE__ int24_t;\ntypedef __UINT24_TYPE__ uint24_t;\ntypedef int24_t int_least24_t;\ntypedef uint24_t uint_least24_t;\ntypedef int24_t int_fast24_t;\ntypedef uint24_t uint_fast24_t;\n# define __int_least16_t int24_t\n# define __uint_least16_t uint24_t\n# define __int_least8_t int24_t\n# define __uint_least8_t uint24_t\n#endif /* __INT24_TYPE__ */\n\n#ifdef __INT16_TYPE__\n#ifndef __int8_t_defined /* glibc sys/types.h also defines int16_t*/\ntypedef __INT16_TYPE__ int16_t;\n#endif /* __int8_t_defined */\ntypedef __UINT16_TYPE__ uint16_t;\n# define __int_least16_t int16_t\n# define __uint_least16_t uint16_t\n# define __int_least8_t int16_t\n# define __uint_least8_t uint16_t\n#endif /* __INT16_TYPE__ */\n\n#ifdef __int_least16_t\ntypedef __int_least16_t int_least16_t;\ntypedef __uint_least16_t uint_least16_t;\ntypedef __int_least16_t int_fast16_t;\ntypedef __uint_least16_t uint_fast16_t;\n#endif /* __int_least16_t */\n\n\n#ifdef __INT8_TYPE__\n#ifndef __int8_t_defined  /* glibc sys/types.h also defines int8_t*/\ntypedef __INT8_TYPE__ int8_t;\n#endif /* __int8_t_defined */\ntypedef __UINT8_TYPE__ uint8_t;\n# define __int_least8_t int8_t\n# define __uint_least8_t uint8_t\n#endif /* __INT8_TYPE__ */\n\n#ifdef __int_least8_t\ntypedef __int_least8_t int_least8_t;\ntypedef __uint_least8_t uint_least8_t;\ntypedef __int_least8_t int_fast8_t;\ntypedef __uint_least8_t uint_fast8_t;\n#endif /* __int_least8_t */\n\n/* prevent glibc sys/types.h from defining conflicting types */\n#ifndef __int8_t_defined\n# define __int8_t_defined\n#endif /* __int8_t_defined */\n\n/* C99 7.18.1.4 Integer types capable of holding object pointers.\n */\n#define __stdint_join3(a,b,c) a ## b ## c\n\n#ifndef _INTPTR_T\n#ifndef __intptr_t_defined\ntypedef __INTPTR_TYPE__ intptr_t;\n#define __intptr_t_defined\n#define _INTPTR_T\n#endif\n#endif\n\n#ifndef _UINTPTR_T\ntypedef __UINTPTR_TYPE__ uintptr_t;\n#define _UINTPTR_T\n#endif\n\n/* C99 7.18.1.5 Greatest-width integer types.\n */\ntypedef __INTMAX_TYPE__  intmax_t;\ntypedef __UINTMAX_TYPE__ uintmax_t;\n\n/* C99 7.18.4 Macros for minimum-width integer constants.\n *\n * The standard requires that integer constant macros be defined for all the\n * minimum-width types defined above. As 8-, 16-, 32-, and 64-bit minimum-width\n * types are required, the corresponding integer constant macros are defined\n * here. This implementation also defines minimum-width types for every other\n * integer width that the target implements, so corresponding macros are\n * defined below, too.\n *\n * These macros are defined using the same successive-shrinking approach as\n * the type definitions above. It is likewise important that macros are defined\n * in order of decending width.\n *\n * Note that C++ should not check __STDC_CONSTANT_MACROS here, contrary to the\n * claims of the C standard (see C++ 18.3.1p2, [cstdint.syn]).\n */\n\n#define __int_c_join(a, b) a ## b\n#define __int_c(v, suffix) __int_c_join(v, suffix)\n#define __uint_c(v, suffix) __int_c_join(v##U, suffix)\n\n\n#ifdef __INT64_TYPE__\n# ifdef __INT64_C_SUFFIX__\n#  define __int64_c_suffix __INT64_C_SUFFIX__\n#  define __int32_c_suffix __INT64_C_SUFFIX__\n#  define __int16_c_suffix __INT64_C_SUFFIX__\n#  define  __int8_c_suffix __INT64_C_SUFFIX__\n# else\n#  undef __int64_c_suffix\n#  undef __int32_c_suffix\n#  undef __int16_c_suffix\n#  undef  __int8_c_suffix\n# endif /* __INT64_C_SUFFIX__ */\n#endif /* __INT64_TYPE__ */\n\n#ifdef __int_least64_t\n# ifdef __int64_c_suffix\n#  define INT64_C(v) __int_c(v, __int64_c_suffix)\n#  define UINT64_C(v) __uint_c(v, __int64_c_suffix)\n# else\n#  define INT64_C(v) v\n#  define UINT64_C(v) v ## U\n# endif /* __int64_c_suffix */\n#endif /* __int_least64_t */\n\n\n#ifdef __INT56_TYPE__\n# ifdef __INT56_C_SUFFIX__\n#  define INT56_C(v) __int_c(v, __INT56_C_SUFFIX__)\n#  define UINT56_C(v) __uint_c(v, __INT56_C_SUFFIX__)\n#  define __int32_c_suffix __INT56_C_SUFFIX__\n#  define __int16_c_suffix __INT56_C_SUFFIX__\n#  define __int8_c_suffix  __INT56_C_SUFFIX__\n# else\n#  define INT56_C(v) v\n#  define UINT56_C(v) v ## U\n#  undef __int32_c_suffix\n#  undef __int16_c_suffix\n#  undef  __int8_c_suffix\n# endif /* __INT56_C_SUFFIX__ */\n#endif /* __INT56_TYPE__ */\n\n\n#ifdef __INT48_TYPE__\n# ifdef __INT48_C_SUFFIX__\n#  define INT48_C(v) __int_c(v, __INT48_C_SUFFIX__)\n#  define UINT48_C(v) __uint_c(v, __INT48_C_SUFFIX__)\n#  define __int32_c_suffix __INT48_C_SUFFIX__\n#  define __int16_c_suffix __INT48_C_SUFFIX__\n#  define __int8_c_suffix  __INT48_C_SUFFIX__\n# else\n#  define INT48_C(v) v\n#  define UINT48_C(v) v ## U\n#  undef __int32_c_suffix\n#  undef __int16_c_suffix\n#  undef  __int8_c_suffix\n# endif /* __INT48_C_SUFFIX__ */\n#endif /* __INT48_TYPE__ */\n\n\n#ifdef __INT40_TYPE__\n# ifdef __INT40_C_SUFFIX__\n#  define INT40_C(v) __int_c(v, __INT40_C_SUFFIX__)\n#  define UINT40_C(v) __uint_c(v, __INT40_C_SUFFIX__)\n#  define __int32_c_suffix __INT40_C_SUFFIX__\n#  define __int16_c_suffix __INT40_C_SUFFIX__\n#  define __int8_c_suffix  __INT40_C_SUFFIX__\n# else\n#  define INT40_C(v) v\n#  define UINT40_C(v) v ## U\n#  undef __int32_c_suffix\n#  undef __int16_c_suffix\n#  undef  __int8_c_suffix\n# endif /* __INT40_C_SUFFIX__ */\n#endif /* __INT40_TYPE__ */\n\n\n#ifdef __INT32_TYPE__\n# ifdef __INT32_C_SUFFIX__\n#  define __int32_c_suffix __INT32_C_SUFFIX__\n#  define __int16_c_suffix __INT32_C_SUFFIX__\n#  define __int8_c_suffix  __INT32_C_SUFFIX__\n#else\n#  undef __int32_c_suffix\n#  undef __int16_c_suffix\n#  undef  __int8_c_suffix\n# endif /* __INT32_C_SUFFIX__ */\n#endif /* __INT32_TYPE__ */\n\n#ifdef __int_least32_t\n# ifdef __int32_c_suffix\n#  define INT32_C(v) __int_c(v, __int32_c_suffix)\n#  define UINT32_C(v) __uint_c(v, __int32_c_suffix)\n# else\n#  define INT32_C(v) v\n#  define UINT32_C(v) v ## U\n# endif /* __int32_c_suffix */\n#endif /* __int_least32_t */\n\n\n#ifdef __INT24_TYPE__\n# ifdef __INT24_C_SUFFIX__\n#  define INT24_C(v) __int_c(v, __INT24_C_SUFFIX__)\n#  define UINT24_C(v) __uint_c(v, __INT24_C_SUFFIX__)\n#  define __int16_c_suffix __INT24_C_SUFFIX__\n#  define __int8_c_suffix  __INT24_C_SUFFIX__\n# else\n#  define INT24_C(v) v\n#  define UINT24_C(v) v ## U\n#  undef __int16_c_suffix\n#  undef  __int8_c_suffix\n# endif /* __INT24_C_SUFFIX__ */\n#endif /* __INT24_TYPE__ */\n\n\n#ifdef __INT16_TYPE__\n# ifdef __INT16_C_SUFFIX__\n#  define __int16_c_suffix __INT16_C_SUFFIX__\n#  define __int8_c_suffix  __INT16_C_SUFFIX__\n#else\n#  undef __int16_c_suffix\n#  undef  __int8_c_suffix\n# endif /* __INT16_C_SUFFIX__ */\n#endif /* __INT16_TYPE__ */\n\n#ifdef __int_least16_t\n# ifdef __int16_c_suffix\n#  define INT16_C(v) __int_c(v, __int16_c_suffix)\n#  define UINT16_C(v) __uint_c(v, __int16_c_suffix)\n# else\n#  define INT16_C(v) v\n#  define UINT16_C(v) v ## U\n# endif /* __int16_c_suffix */\n#endif /* __int_least16_t */\n\n\n#ifdef __INT8_TYPE__\n# ifdef __INT8_C_SUFFIX__\n#  define __int8_c_suffix __INT8_C_SUFFIX__\n#else\n#  undef  __int8_c_suffix\n# endif /* __INT8_C_SUFFIX__ */\n#endif /* __INT8_TYPE__ */\n\n#ifdef __int_least8_t\n# ifdef __int8_c_suffix\n#  define INT8_C(v) __int_c(v, __int8_c_suffix)\n#  define UINT8_C(v) __uint_c(v, __int8_c_suffix)\n# else\n#  define INT8_C(v) v\n#  define UINT8_C(v) v ## U\n# endif /* __int8_c_suffix */\n#endif /* __int_least8_t */\n\n\n/* C99 7.18.2.1 Limits of exact-width integer types.\n * C99 7.18.2.2 Limits of minimum-width integer types.\n * C99 7.18.2.3 Limits of fastest minimum-width integer types.\n *\n * The presence of limit macros are completely optional in C99.  This\n * implementation defines limits for all of the types (exact- and\n * minimum-width) that it defines above, using the limits of the minimum-width\n * type for any types that do not have exact-width representations.\n *\n * As in the type definitions, this section takes an approach of\n * successive-shrinking to determine which limits to use for the standard (8,\n * 16, 32, 64) bit widths when they don't have exact representations. It is\n * therefore important that the definitions be kept in order of decending\n * widths.\n *\n * Note that C++ should not check __STDC_LIMIT_MACROS here, contrary to the\n * claims of the C standard (see C++ 18.3.1p2, [cstdint.syn]).\n */\n\n#ifdef __INT64_TYPE__\n# define INT64_MAX           INT64_C( 9223372036854775807)\n# define INT64_MIN         (-INT64_C( 9223372036854775807)-1)\n# define UINT64_MAX         UINT64_C(18446744073709551615)\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT64_WIDTH         64\n# define INT64_WIDTH          UINT64_WIDTH\n\n# define __UINT_LEAST64_WIDTH UINT64_WIDTH\n# define __UINT_LEAST32_WIDTH UINT64_WIDTH\n# define __UINT_LEAST16_WIDTH UINT64_WIDTH\n# define __UINT_LEAST8_MAX UINT64_MAX\n#endif /* __STDC_VERSION__ */\n\n# define __INT_LEAST64_MIN   INT64_MIN\n# define __INT_LEAST64_MAX   INT64_MAX\n# define __UINT_LEAST64_MAX UINT64_MAX\n# define __INT_LEAST32_MIN   INT64_MIN\n# define __INT_LEAST32_MAX   INT64_MAX\n# define __UINT_LEAST32_MAX UINT64_MAX\n# define __INT_LEAST16_MIN   INT64_MIN\n# define __INT_LEAST16_MAX   INT64_MAX\n# define __UINT_LEAST16_MAX UINT64_MAX\n# define __INT_LEAST8_MIN    INT64_MIN\n# define __INT_LEAST8_MAX    INT64_MAX\n# define __UINT_LEAST8_MAX  UINT64_MAX\n#endif /* __INT64_TYPE__ */\n\n#ifdef __INT_LEAST64_MIN\n# define INT_LEAST64_MIN   __INT_LEAST64_MIN\n# define INT_LEAST64_MAX   __INT_LEAST64_MAX\n# define UINT_LEAST64_MAX __UINT_LEAST64_MAX\n# define INT_FAST64_MIN    __INT_LEAST64_MIN\n# define INT_FAST64_MAX    __INT_LEAST64_MAX\n# define UINT_FAST64_MAX  __UINT_LEAST64_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT_LEAST64_WIDTH __UINT_LEAST64_WIDTH\n# define INT_LEAST64_WIDTH  UINT_LEAST64_WIDTH\n# define UINT_FAST64_WIDTH  __UINT_LEAST64_WIDTH\n# define INT_FAST64_WIDTH   UINT_FAST64_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT_LEAST64_MIN */\n\n\n#ifdef __INT56_TYPE__\n# define INT56_MAX           INT56_C(36028797018963967)\n# define INT56_MIN         (-INT56_C(36028797018963967)-1)\n# define UINT56_MAX         UINT56_C(72057594037927935)\n# define INT_LEAST56_MIN     INT56_MIN\n# define INT_LEAST56_MAX     INT56_MAX\n# define UINT_LEAST56_MAX   UINT56_MAX\n# define INT_FAST56_MIN      INT56_MIN\n# define INT_FAST56_MAX      INT56_MAX\n# define UINT_FAST56_MAX    UINT56_MAX\n\n# define __INT_LEAST32_MIN   INT56_MIN\n# define __INT_LEAST32_MAX   INT56_MAX\n# define __UINT_LEAST32_MAX UINT56_MAX\n# define __INT_LEAST16_MIN   INT56_MIN\n# define __INT_LEAST16_MAX   INT56_MAX\n# define __UINT_LEAST16_MAX UINT56_MAX\n# define __INT_LEAST8_MIN    INT56_MIN\n# define __INT_LEAST8_MAX    INT56_MAX\n# define __UINT_LEAST8_MAX  UINT56_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT56_WIDTH         56\n# define INT56_WIDTH          UINT56_WIDTH\n# define UINT_LEAST56_WIDTH   UINT56_WIDTH\n# define INT_LEAST56_WIDTH    UINT_LEAST56_WIDTH\n# define UINT_FAST56_WIDTH    UINT56_WIDTH\n# define INT_FAST56_WIDTH     UINT_FAST56_WIDTH\n# define __UINT_LEAST32_WIDTH UINT56_WIDTH\n# define __UINT_LEAST16_WIDTH UINT56_WIDTH\n# define __UINT_LEAST8_WIDTH  UINT56_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT56_TYPE__ */\n\n\n#ifdef __INT48_TYPE__\n# define INT48_MAX           INT48_C(140737488355327)\n# define INT48_MIN         (-INT48_C(140737488355327)-1)\n# define UINT48_MAX         UINT48_C(281474976710655)\n# define INT_LEAST48_MIN     INT48_MIN\n# define INT_LEAST48_MAX     INT48_MAX\n# define UINT_LEAST48_MAX   UINT48_MAX\n# define INT_FAST48_MIN      INT48_MIN\n# define INT_FAST48_MAX      INT48_MAX\n# define UINT_FAST48_MAX    UINT48_MAX\n\n# define __INT_LEAST32_MIN   INT48_MIN\n# define __INT_LEAST32_MAX   INT48_MAX\n# define __UINT_LEAST32_MAX UINT48_MAX\n# define __INT_LEAST16_MIN   INT48_MIN\n# define __INT_LEAST16_MAX   INT48_MAX\n# define __UINT_LEAST16_MAX UINT48_MAX\n# define __INT_LEAST8_MIN    INT48_MIN\n# define __INT_LEAST8_MAX    INT48_MAX\n# define __UINT_LEAST8_MAX  UINT48_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n#define UINT48_WIDTH         48\n#define INT48_WIDTH          UINT48_WIDTH\n#define UINT_LEAST48_WIDTH   UINT48_WIDTH\n#define INT_LEAST48_WIDTH    UINT_LEAST48_WIDTH\n#define UINT_FAST48_WIDTH    UINT48_WIDTH\n#define INT_FAST48_WIDTH     UINT_FAST48_WIDTH\n#define __UINT_LEAST32_WIDTH UINT48_WIDTH\n#define __UINT_LEAST16_WIDTH UINT48_WIDTH\n#define __UINT_LEAST8_WIDTH  UINT48_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT48_TYPE__ */\n\n\n#ifdef __INT40_TYPE__\n# define INT40_MAX           INT40_C(549755813887)\n# define INT40_MIN         (-INT40_C(549755813887)-1)\n# define UINT40_MAX         UINT40_C(1099511627775)\n# define INT_LEAST40_MIN     INT40_MIN\n# define INT_LEAST40_MAX     INT40_MAX\n# define UINT_LEAST40_MAX   UINT40_MAX\n# define INT_FAST40_MIN      INT40_MIN\n# define INT_FAST40_MAX      INT40_MAX\n# define UINT_FAST40_MAX    UINT40_MAX\n\n# define __INT_LEAST32_MIN   INT40_MIN\n# define __INT_LEAST32_MAX   INT40_MAX\n# define __UINT_LEAST32_MAX UINT40_MAX\n# define __INT_LEAST16_MIN   INT40_MIN\n# define __INT_LEAST16_MAX   INT40_MAX\n# define __UINT_LEAST16_MAX UINT40_MAX\n# define __INT_LEAST8_MIN    INT40_MIN\n# define __INT_LEAST8_MAX    INT40_MAX\n# define __UINT_LEAST8_MAX  UINT40_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT40_WIDTH         40\n# define INT40_WIDTH          UINT40_WIDTH\n# define UINT_LEAST40_WIDTH   UINT40_WIDTH\n# define INT_LEAST40_WIDTH    UINT_LEAST40_WIDTH\n# define UINT_FAST40_WIDTH    UINT40_WIDTH\n# define INT_FAST40_WIDTH     UINT_FAST40_WIDTH\n# define __UINT_LEAST32_WIDTH UINT40_WIDTH\n# define __UINT_LEAST16_WIDTH UINT40_WIDTH\n# define __UINT_LEAST8_WIDTH  UINT40_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT40_TYPE__ */\n\n\n#ifdef __INT32_TYPE__\n# define INT32_MAX           INT32_C(2147483647)\n# define INT32_MIN         (-INT32_C(2147483647)-1)\n# define UINT32_MAX         UINT32_C(4294967295)\n\n# define __INT_LEAST32_MIN   INT32_MIN\n# define __INT_LEAST32_MAX   INT32_MAX\n# define __UINT_LEAST32_MAX UINT32_MAX\n# define __INT_LEAST16_MIN   INT32_MIN\n# define __INT_LEAST16_MAX   INT32_MAX\n# define __UINT_LEAST16_MAX UINT32_MAX\n# define __INT_LEAST8_MIN    INT32_MIN\n# define __INT_LEAST8_MAX    INT32_MAX\n# define __UINT_LEAST8_MAX  UINT32_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT32_WIDTH         32\n# define INT32_WIDTH          UINT32_WIDTH\n# define __UINT_LEAST32_WIDTH UINT32_WIDTH\n# define __UINT_LEAST16_WIDTH UINT32_WIDTH\n# define __UINT_LEAST8_WIDTH  UINT32_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT32_TYPE__ */\n\n#ifdef __INT_LEAST32_MIN\n# define INT_LEAST32_MIN   __INT_LEAST32_MIN\n# define INT_LEAST32_MAX   __INT_LEAST32_MAX\n# define UINT_LEAST32_MAX __UINT_LEAST32_MAX\n# define INT_FAST32_MIN    __INT_LEAST32_MIN\n# define INT_FAST32_MAX    __INT_LEAST32_MAX\n# define UINT_FAST32_MAX  __UINT_LEAST32_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT_LEAST32_WIDTH __UINT_LEAST32_WIDTH\n# define INT_LEAST32_WIDTH  UINT_LEAST32_WIDTH\n# define UINT_FAST32_WIDTH  __UINT_LEAST32_WIDTH\n# define INT_FAST32_WIDTH   UINT_FAST32_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT_LEAST32_MIN */\n\n\n#ifdef __INT24_TYPE__\n# define INT24_MAX           INT24_C(8388607)\n# define INT24_MIN         (-INT24_C(8388607)-1)\n# define UINT24_MAX         UINT24_C(16777215)\n# define INT_LEAST24_MIN     INT24_MIN\n# define INT_LEAST24_MAX     INT24_MAX\n# define UINT_LEAST24_MAX   UINT24_MAX\n# define INT_FAST24_MIN      INT24_MIN\n# define INT_FAST24_MAX      INT24_MAX\n# define UINT_FAST24_MAX    UINT24_MAX\n\n# define __INT_LEAST16_MIN   INT24_MIN\n# define __INT_LEAST16_MAX   INT24_MAX\n# define __UINT_LEAST16_MAX UINT24_MAX\n# define __INT_LEAST8_MIN    INT24_MIN\n# define __INT_LEAST8_MAX    INT24_MAX\n# define __UINT_LEAST8_MAX  UINT24_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT24_WIDTH         24\n# define INT24_WIDTH          UINT24_WIDTH\n# define UINT_LEAST24_WIDTH   UINT24_WIDTH\n# define INT_LEAST24_WIDTH    UINT_LEAST24_WIDTH\n# define UINT_FAST24_WIDTH    UINT24_WIDTH\n# define INT_FAST24_WIDTH     UINT_FAST24_WIDTH\n# define __UINT_LEAST16_WIDTH UINT24_WIDTH\n# define __UINT_LEAST8_WIDTH  UINT24_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT24_TYPE__ */\n\n\n#ifdef __INT16_TYPE__\n#define INT16_MAX            INT16_C(32767)\n#define INT16_MIN          (-INT16_C(32767)-1)\n#define UINT16_MAX          UINT16_C(65535)\n\n# define __INT_LEAST16_MIN   INT16_MIN\n# define __INT_LEAST16_MAX   INT16_MAX\n# define __UINT_LEAST16_MAX UINT16_MAX\n# define __INT_LEAST8_MIN    INT16_MIN\n# define __INT_LEAST8_MAX    INT16_MAX\n# define __UINT_LEAST8_MAX  UINT16_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT16_WIDTH         16\n# define INT16_WIDTH          UINT16_WIDTH\n# define __UINT_LEAST16_WIDTH UINT16_WIDTH\n# define __UINT_LEAST8_WIDTH  UINT16_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT16_TYPE__ */\n\n#ifdef __INT_LEAST16_MIN\n# define INT_LEAST16_MIN   __INT_LEAST16_MIN\n# define INT_LEAST16_MAX   __INT_LEAST16_MAX\n# define UINT_LEAST16_MAX __UINT_LEAST16_MAX\n# define INT_FAST16_MIN    __INT_LEAST16_MIN\n# define INT_FAST16_MAX    __INT_LEAST16_MAX\n# define UINT_FAST16_MAX  __UINT_LEAST16_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT_LEAST16_WIDTH __UINT_LEAST16_WIDTH\n# define INT_LEAST16_WIDTH  UINT_LEAST16_WIDTH\n# define UINT_FAST16_WIDTH  __UINT_LEAST16_WIDTH\n# define INT_FAST16_WIDTH   UINT_FAST16_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT_LEAST16_MIN */\n\n\n#ifdef __INT8_TYPE__\n# define INT8_MAX            INT8_C(127)\n# define INT8_MIN          (-INT8_C(127)-1)\n# define UINT8_MAX          UINT8_C(255)\n\n# define __INT_LEAST8_MIN    INT8_MIN\n# define __INT_LEAST8_MAX    INT8_MAX\n# define __UINT_LEAST8_MAX  UINT8_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT8_WIDTH         8\n# define INT8_WIDTH          UINT8_WIDTH\n# define __UINT_LEAST8_WIDTH UINT8_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT8_TYPE__ */\n\n#ifdef __INT_LEAST8_MIN\n# define INT_LEAST8_MIN   __INT_LEAST8_MIN\n# define INT_LEAST8_MAX   __INT_LEAST8_MAX\n# define UINT_LEAST8_MAX __UINT_LEAST8_MAX\n# define INT_FAST8_MIN    __INT_LEAST8_MIN\n# define INT_FAST8_MAX    __INT_LEAST8_MAX\n# define UINT_FAST8_MAX  __UINT_LEAST8_MAX\n\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n# define UINT_LEAST8_WIDTH __UINT_LEAST8_WIDTH\n# define INT_LEAST8_WIDTH  UINT_LEAST8_WIDTH\n# define UINT_FAST8_WIDTH  __UINT_LEAST8_WIDTH\n# define INT_FAST8_WIDTH   UINT_FAST8_WIDTH\n#endif /* __STDC_VERSION__ */\n#endif /* __INT_LEAST8_MIN */\n\n/* Some utility macros */\n#define  __INTN_MIN(n)  __stdint_join3( INT, n, _MIN)\n#define  __INTN_MAX(n)  __stdint_join3( INT, n, _MAX)\n#define __UINTN_MAX(n)  __stdint_join3(UINT, n, _MAX)\n#define  __INTN_C(n, v) __stdint_join3( INT, n, _C(v))\n#define __UINTN_C(n, v) __stdint_join3(UINT, n, _C(v))\n\n/* C99 7.18.2.4 Limits of integer types capable of holding object pointers. */\n/* C99 7.18.3 Limits of other integer types. */\n\n#define  INTPTR_MIN  (-__INTPTR_MAX__-1)\n#define  INTPTR_MAX    __INTPTR_MAX__\n#define UINTPTR_MAX   __UINTPTR_MAX__\n#define PTRDIFF_MIN (-__PTRDIFF_MAX__-1)\n#define PTRDIFF_MAX   __PTRDIFF_MAX__\n#define    SIZE_MAX      __SIZE_MAX__\n\n/* C2x 7.20.2.4 Width of integer types capable of holding object pointers. */\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n/* NB: The C standard requires that these be the same value, but the compiler\n   exposes separate internal width macros. */\n#define INTPTR_WIDTH  __INTPTR_WIDTH__\n#define UINTPTR_WIDTH __UINTPTR_WIDTH__\n#endif\n\n/* ISO9899:2011 7.20 (C11 Annex K): Define RSIZE_MAX if __STDC_WANT_LIB_EXT1__\n * is enabled. */\n#if defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1\n#define   RSIZE_MAX            (SIZE_MAX >> 1)\n#endif\n\n/* C99 7.18.2.5 Limits of greatest-width integer types. */\n#define  INTMAX_MIN (-__INTMAX_MAX__-1)\n#define  INTMAX_MAX   __INTMAX_MAX__\n#define UINTMAX_MAX  __UINTMAX_MAX__\n\n/* C2x 7.20.2.5 Width of greatest-width integer types. */\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n/* NB: The C standard requires that these be the same value, but the compiler\n   exposes separate internal width macros. */\n#define INTMAX_WIDTH __INTMAX_WIDTH__\n#define UINTMAX_WIDTH __UINTMAX_WIDTH__\n#endif\n\n/* C99 7.18.3 Limits of other integer types. */\n#define SIG_ATOMIC_MIN __INTN_MIN(__SIG_ATOMIC_WIDTH__)\n#define SIG_ATOMIC_MAX __INTN_MAX(__SIG_ATOMIC_WIDTH__)\n#ifdef __WINT_UNSIGNED__\n# define WINT_MIN       __UINTN_C(__WINT_WIDTH__, 0)\n# define WINT_MAX       __UINTN_MAX(__WINT_WIDTH__)\n#else\n# define WINT_MIN       __INTN_MIN(__WINT_WIDTH__)\n# define WINT_MAX       __INTN_MAX(__WINT_WIDTH__)\n#endif\n\n#ifndef WCHAR_MAX\n# define WCHAR_MAX __WCHAR_MAX__\n#endif\n#ifndef WCHAR_MIN\n# if __WCHAR_MAX__ == __INTN_MAX(__WCHAR_WIDTH__)\n#  define WCHAR_MIN __INTN_MIN(__WCHAR_WIDTH__)\n# else\n#  define WCHAR_MIN __UINTN_C(__WCHAR_WIDTH__, 0)\n# endif\n#endif\n\n/* 7.18.4.2 Macros for greatest-width integer constants. */\n#define  INTMAX_C(v) __int_c(v,  __INTMAX_C_SUFFIX__)\n#define UINTMAX_C(v) __int_c(v, __UINTMAX_C_SUFFIX__)\n\n/* C2x 7.20.3.x Width of other integer types. */\n/* FIXME: This is using the placeholder dates Clang produces for these macros\n   in C2x mode; switch to the correct values once they've been published. */\n#if __STDC_VERSION__ >= 202000L\n#define PTRDIFF_WIDTH    __PTRDIFF_WIDTH__\n#define SIG_ATOMIC_WIDTH __SIG_ATOMIC_WIDTH__\n#define SIZE_WIDTH       __SIZE_WIDTH__\n#define WCHAR_WIDTH      __WCHAR_WIDTH__\n#define WINT_WIDTH       __WINT_WIDTH__\n#endif\n\n#endif /* __STDC_HOSTED__ */\n#endif /* __CLANG_STDINT_H */\n"}],"crc32":2626358805,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]