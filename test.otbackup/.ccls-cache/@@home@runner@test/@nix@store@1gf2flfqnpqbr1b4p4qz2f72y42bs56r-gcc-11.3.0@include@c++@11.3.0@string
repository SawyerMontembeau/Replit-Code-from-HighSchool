[{"ops":[{"insert":"// Components for manipulating sequences of characters -*- C++ -*-\n\n// Copyright (C) 1997-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file include/string\n *  This is a Standard C++ Library header.\n */\n\n//\n// ISO C++ 14882: 21  Strings library\n//\n\n#ifndef _GLIBCXX_STRING\n#define _GLIBCXX_STRING\t1\n\n#pragma GCC system_header\n\n#include <bits/c++config.h>\n#include <bits/stringfwd.h>\n#include <bits/char_traits.h>  // NB: In turn includes stl_algobase.h\n#include <bits/allocator.h>\n#include <bits/cpp_type_traits.h>\n#include <bits/localefwd.h>    // For operators >>, <<, and getline.\n#include <bits/ostream_insert.h>\n#include <bits/stl_iterator_base_types.h>\n#include <bits/stl_iterator_base_funcs.h>\n#include <bits/stl_iterator.h>\n#include <bits/stl_function.h> // For less\n#include <ext/numeric_traits.h>\n#include <bits/stl_algobase.h>\n#if __cplusplus > 201703L\n#  include <bits/stl_algo.h> // For remove and remove_if\n#endif // C++20\n#include <bits/range_access.h>\n#include <bits/basic_string.h>\n#include <bits/basic_string.tcc>\n\n#if __cplusplus >= 201703L && _GLIBCXX_USE_CXX11_ABI\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n  namespace pmr {\n    template<typename _Tp> class polymorphic_allocator;\n    template<typename _CharT, typename _Traits = char_traits<_CharT>>\n      using basic_string = std::basic_string<_CharT, _Traits,\n\t\t\t\t\t     polymorphic_allocator<_CharT>>;\n    using string    = basic_string<char>;\n#ifdef _GLIBCXX_USE_CHAR8_T\n    using u8string  = basic_string<char8_t>;\n#endif\n    using u16string = basic_string<char16_t>;\n    using u32string = basic_string<char32_t>;\n#ifdef _GLIBCXX_USE_WCHAR_T\n    using wstring   = basic_string<wchar_t>;\n#endif\n  } // namespace pmr\n\n  template<typename _Str>\n    struct __hash_string_base\n    : public __hash_base<size_t, _Str>\n    {\n      size_t\n      operator()(const _Str& __s) const noexcept\n      { return hash<basic_string_view<typename _Str::value_type>>{}(__s); }\n    };\n\n  template<>\n    struct hash<pmr::string>\n    : public __hash_string_base<pmr::string>\n    { };\n#ifdef _GLIBCXX_USE_CHAR8_T\n  template<>\n    struct hash<pmr::u8string>\n    : public __hash_string_base<pmr::u8string>\n    { };\n#endif\n  template<>\n    struct hash<pmr::u16string>\n    : public __hash_string_base<pmr::u16string>\n    { };\n  template<>\n    struct hash<pmr::u32string>\n    : public __hash_string_base<pmr::u32string>\n    { };\n#ifdef _GLIBCXX_USE_WCHAR_T\n  template<>\n    struct hash<pmr::wstring>\n    : public __hash_string_base<pmr::wstring>\n    { };\n#endif\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace std\n#endif // C++17\n\n#if __cplusplus > 201703L\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n#define __cpp_lib_erase_if 202002L\n\n  template<typename _CharT, typename _Traits, typename _Alloc,\n\t   typename _Predicate>\n    inline typename basic_string<_CharT, _Traits, _Alloc>::size_type\n    erase_if(basic_string<_CharT, _Traits, _Alloc>& __cont, _Predicate __pred)\n    {\n      const auto __osz = __cont.size();\n      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n\t\t   __cont.end());\n      return __osz - __cont.size();\n    }\n\n  template<typename _CharT, typename _Traits, typename _Alloc, typename _Up>\n    inline typename basic_string<_CharT, _Traits, _Alloc>::size_type\n    erase(basic_string<_CharT, _Traits, _Alloc>& __cont, const _Up& __value)\n    {\n      const auto __osz = __cont.size();\n      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n\t\t   __cont.end());\n      return __osz - __cont.size();\n    }\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace std\n#endif // C++20\n\n#endif /* _GLIBCXX_STRING */\n"}],"crc32":3816808628,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]