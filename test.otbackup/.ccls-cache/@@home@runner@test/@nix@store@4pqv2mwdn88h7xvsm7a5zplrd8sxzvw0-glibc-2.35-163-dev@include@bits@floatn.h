[{"ops":[{"insert":"/* Macros to control TS 18661-3 glibc features on x86.\n   Copyright (C) 2017-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n#ifndef _BITS_FLOATN_H\n#define _BITS_FLOATN_H\n\n#include <features.h>\n\n/* Defined to 1 if the current compiler invocation provides a\n   floating-point type with the IEEE 754 binary128 format, and this\n   glibc includes corresponding *f128 interfaces for it.  The required\n   libgcc support was added some time after the basic compiler\n   support, for x86_64 and x86.  */\n#if (defined __x86_64__\t\t\t\t\t\t\t\\\n     ? __GNUC_PREREQ (4, 3)\t\t\t\t\t\t\\\n     : (defined __GNU__ ? __GNUC_PREREQ (4, 5) : __GNUC_PREREQ (4, 4)))\n# define __HAVE_FLOAT128 1\n#else\n# define __HAVE_FLOAT128 0\n#endif\n\n/* Defined to 1 if __HAVE_FLOAT128 is 1 and the type is ABI-distinct\n   from the default float, double and long double types in this glibc.  */\n#if __HAVE_FLOAT128\n# define __HAVE_DISTINCT_FLOAT128 1\n#else\n# define __HAVE_DISTINCT_FLOAT128 0\n#endif\n\n/* Defined to 1 if the current compiler invocation provides a\n   floating-point type with the right format for _Float64x, and this\n   glibc includes corresponding *f64x interfaces for it.  */\n#define __HAVE_FLOAT64X 1\n\n/* Defined to 1 if __HAVE_FLOAT64X is 1 and _Float64x has the format\n   of long double.  Otherwise, if __HAVE_FLOAT64X is 1, _Float64x has\n   the format of _Float128, which must be different from that of long\n   double.  */\n#define __HAVE_FLOAT64X_LONG_DOUBLE 1\n\n#ifndef __ASSEMBLER__\n\n/* Defined to concatenate the literal suffix to be used with _Float128\n   types, if __HAVE_FLOAT128 is 1. */\n# if __HAVE_FLOAT128\n#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n/* The literal suffix f128 exists only since GCC 7.0.  */\n#   define __f128(x) x##q\n#  else\n#   define __f128(x) x##f128\n#  endif\n# endif\n\n/* Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.  */\n# if __HAVE_FLOAT128\n#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n/* Add a typedef for older GCC compilers which don't natively support\n   _Complex _Float128.  */\ntypedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));\n#   define __CFLOAT128 __cfloat128\n#  else\n#   define __CFLOAT128 _Complex _Float128\n#  endif\n# endif\n\n/* The remaining of this file provides support for older compilers.  */\n# if __HAVE_FLOAT128\n\n/* The type _Float128 exists only since GCC 7.0.  */\n#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\ntypedef __float128 _Float128;\n#  endif\n\n/* __builtin_huge_valf128 doesn't exist before GCC 7.0.  */\n#  if !__GNUC_PREREQ (7, 0)\n#   define __builtin_huge_valf128() ((_Float128) __builtin_huge_val ())\n#  endif\n\n/* Older GCC has only a subset of built-in functions for _Float128 on\n   x86, and __builtin_infq is not usable in static initializers.\n   Converting a narrower sNaN to _Float128 produces a quiet NaN, so\n   attempts to use _Float128 sNaNs will not work properly with older\n   compilers.  */\n#  if !__GNUC_PREREQ (7, 0)\n#   define __builtin_copysignf128 __builtin_copysignq\n#   define __builtin_fabsf128 __builtin_fabsq\n#   define __builtin_inff128() ((_Float128) __builtin_inf ())\n#   define __builtin_nanf128(x) ((_Float128) __builtin_nan (x))\n#   define __builtin_nansf128(x) ((_Float128) __builtin_nans (x))\n#  endif\n\n/* In math/math.h, __MATH_TG will expand signbit to __builtin_signbit*,\n   e.g.: __builtin_signbitf128, before GCC 6.  However, there has never\n   been a __builtin_signbitf128 in GCC and the type-generic builtin is\n   only available since GCC 6.  */\n#  if !__GNUC_PREREQ (6, 0)\n#   define __builtin_signbitf128 __signbitf128\n#  endif\n\n# endif\n\n#endif /* !__ASSEMBLER__.  */\n\n#include <bits/floatn-common.h>\n\n#endif /* _BITS_FLOATN_H */\n"}],"crc32":2443228667,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]