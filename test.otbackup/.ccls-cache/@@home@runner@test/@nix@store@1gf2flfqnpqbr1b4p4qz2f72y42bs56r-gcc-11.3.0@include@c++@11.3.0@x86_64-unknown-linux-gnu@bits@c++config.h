[{"ops":[{"insert":"// Predefined symbols and macros -*- C++ -*-\n\n// Copyright (C) 1997-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/c++config.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{version}\n */\n\n#ifndef _GLIBCXX_CXX_CONFIG_H\n#define _GLIBCXX_CXX_CONFIG_H 1\n\n// The major release number for the GCC release the C++ library belongs to.\n#define _GLIBCXX_RELEASE 11\n\n// The datestamp of the C++ library in compressed ISO date format.\n#define __GLIBCXX__ 20220421\n\n// Macros for various attributes.\n//   _GLIBCXX_PURE\n//   _GLIBCXX_CONST\n//   _GLIBCXX_NORETURN\n//   _GLIBCXX_NOTHROW\n//   _GLIBCXX_VISIBILITY\n#ifndef _GLIBCXX_PURE\n# define _GLIBCXX_PURE __attribute__ ((__pure__))\n#endif\n\n#ifndef _GLIBCXX_CONST\n# define _GLIBCXX_CONST __attribute__ ((__const__))\n#endif\n\n#ifndef _GLIBCXX_NORETURN\n# define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))\n#endif\n\n// See below for C++\n#ifndef _GLIBCXX_NOTHROW\n# ifndef __cplusplus\n#  define _GLIBCXX_NOTHROW __attribute__((__nothrow__))\n# endif\n#endif\n\n// Macros for visibility attributes.\n//   _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n//   _GLIBCXX_VISIBILITY\n# define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1\n\n#if _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n# define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))\n#else\n// If this is not supplied by the OS-specific or CPU-specific\n// headers included below, it will be defined to an empty default.\n# define _GLIBCXX_VISIBILITY(V) _GLIBCXX_PSEUDO_VISIBILITY(V)\n#endif\n\n// Macros for deprecated attributes.\n//   _GLIBCXX_USE_DEPRECATED\n//   _GLIBCXX_DEPRECATED\n//   _GLIBCXX_DEPRECATED_SUGGEST( string-literal )\n//   _GLIBCXX11_DEPRECATED\n//   _GLIBCXX11_DEPRECATED_SUGGEST( string-literal )\n//   _GLIBCXX17_DEPRECATED\n//   _GLIBCXX17_DEPRECATED_SUGGEST( string-literal )\n//   _GLIBCXX20_DEPRECATED( string-literal )\n//   _GLIBCXX20_DEPRECATED_SUGGEST( string-literal )\n#ifndef _GLIBCXX_USE_DEPRECATED\n# define _GLIBCXX_USE_DEPRECATED 1\n#endif\n\n#if defined(__DEPRECATED)\n# define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))\n# define _GLIBCXX_DEPRECATED_SUGGEST(ALT) \\\n  __attribute__ ((__deprecated__ (\"use '\" ALT \"' instead\")))\n#else\n# define _GLIBCXX_DEPRECATED\n# define _GLIBCXX_DEPRECATED_SUGGEST(ALT)\n#endif\n\n#if defined(__DEPRECATED) && (__cplusplus >= 201103L)\n# define _GLIBCXX11_DEPRECATED _GLIBCXX_DEPRECATED\n# define _GLIBCXX11_DEPRECATED_SUGGEST(ALT) _GLIBCXX_DEPRECATED_SUGGEST(ALT)\n#else\n# define _GLIBCXX11_DEPRECATED\n# define _GLIBCXX11_DEPRECATED_SUGGEST(ALT)\n#endif\n\n#if defined(__DEPRECATED) && (__cplusplus >= 201703L)\n# define _GLIBCXX17_DEPRECATED [[__deprecated__]]\n# define _GLIBCXX17_DEPRECATED_SUGGEST(ALT) _GLIBCXX_DEPRECATED_SUGGEST(ALT)\n#else\n# define _GLIBCXX17_DEPRECATED\n# define _GLIBCXX17_DEPRECATED_SUGGEST(ALT)\n#endif\n\n#if defined(__DEPRECATED) && (__cplusplus > 201703L)\n# define _GLIBCXX20_DEPRECATED(MSG) [[deprecated(MSG)]]\n# define _GLIBCXX20_DEPRECATED_SUGGEST(ALT) _GLIBCXX_DEPRECATED_SUGGEST(ALT)\n#else\n# define _GLIBCXX20_DEPRECATED(MSG)\n# define _GLIBCXX20_DEPRECATED_SUGGEST(ALT)\n#endif\n\n// Macros for ABI tag attributes.\n#ifndef _GLIBCXX_ABI_TAG_CXX11\n# define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ (\"cxx11\")))\n#endif\n\n// Macro to warn about unused results.\n#if __cplusplus >= 201703L\n# define _GLIBCXX_NODISCARD [[__nodiscard__]]\n#else\n# define _GLIBCXX_NODISCARD\n#endif\n\n\n\n#if __cplusplus\n\n// Macro for constexpr, to support in mixed 03/0x mode.\n#ifndef _GLIBCXX_CONSTEXPR\n# if __cplusplus >= 201103L\n#  define _GLIBCXX_CONSTEXPR constexpr\n#  define _GLIBCXX_USE_CONSTEXPR constexpr\n# else\n#  define _GLIBCXX_CONSTEXPR\n#  define _GLIBCXX_USE_CONSTEXPR const\n# endif\n#endif\n\n#ifndef _GLIBCXX14_CONSTEXPR\n# if __cplusplus >= 201402L\n#  define _GLIBCXX14_CONSTEXPR constexpr\n# else\n#  define _GLIBCXX14_CONSTEXPR\n# endif\n#endif\n\n#ifndef _GLIBCXX17_CONSTEXPR\n# if __cplusplus >= 201703L\n#  define _GLIBCXX17_CONSTEXPR constexpr\n# else\n#  define _GLIBCXX17_CONSTEXPR\n# endif\n#endif\n\n#ifndef _GLIBCXX20_CONSTEXPR\n# if __cplusplus > 201703L\n#  define _GLIBCXX20_CONSTEXPR constexpr\n# else\n#  define _GLIBCXX20_CONSTEXPR\n# endif\n#endif\n\n#ifndef _GLIBCXX17_INLINE\n# if __cplusplus >= 201703L\n#  define _GLIBCXX17_INLINE inline\n# else\n#  define _GLIBCXX17_INLINE\n# endif\n#endif\n\n// Macro for noexcept, to support in mixed 03/0x mode.\n#ifndef _GLIBCXX_NOEXCEPT\n# if __cplusplus >= 201103L\n#  define _GLIBCXX_NOEXCEPT noexcept\n#  define _GLIBCXX_NOEXCEPT_IF(...) noexcept(__VA_ARGS__)\n#  define _GLIBCXX_USE_NOEXCEPT noexcept\n#  define _GLIBCXX_THROW(_EXC)\n# else\n#  define _GLIBCXX_NOEXCEPT\n#  define _GLIBCXX_NOEXCEPT_IF(...)\n#  define _GLIBCXX_USE_NOEXCEPT throw()\n#  define _GLIBCXX_THROW(_EXC) throw(_EXC)\n# endif\n#endif\n\n#ifndef _GLIBCXX_NOTHROW\n# define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT\n#endif\n\n#ifndef _GLIBCXX_THROW_OR_ABORT\n# if __cpp_exceptions\n#  define _GLIBCXX_THROW_OR_ABORT(_EXC) (throw (_EXC))\n# else\n#  define _GLIBCXX_THROW_OR_ABORT(_EXC) (__builtin_abort())\n# endif\n#endif\n\n#if __cpp_noexcept_function_type\n#define _GLIBCXX_NOEXCEPT_PARM , bool _NE\n#define _GLIBCXX_NOEXCEPT_QUAL noexcept (_NE)\n#else\n#define _GLIBCXX_NOEXCEPT_PARM\n#define _GLIBCXX_NOEXCEPT_QUAL\n#endif\n\n// Macro for extern template, ie controlling template linkage via use\n// of extern keyword on template declaration. As documented in the g++\n// manual, it inhibits all implicit instantiations and is used\n// throughout the library to avoid multiple weak definitions for\n// required types that are already explicitly instantiated in the\n// library binary. This substantially reduces the binary size of\n// resulting executables.\n// Special case: _GLIBCXX_EXTERN_TEMPLATE == -1 disallows extern\n// templates only in basic_string, thus activating its debug-mode\n// checks even at -O0.\n# define _GLIBCXX_EXTERN_TEMPLATE 1\n\n/*\n  Outline of libstdc++ namespaces.\n\n  namespace std\n  {\n    namespace __debug { }\n    namespace __parallel { }\n    namespace __cxx1998 { }\n\n    namespace __detail {\n      namespace __variant { }\t\t\t\t// C++17\n    }\n\n    namespace rel_ops { }\n\n    namespace tr1\n    {\n      namespace placeholders { }\n      namespace regex_constants { }\n      namespace __detail { }\n    }\n\n    namespace tr2 { }\n    \n    namespace decimal { }\n\n    namespace chrono { }\t\t\t\t// C++11\n    namespace placeholders { }\t\t\t\t// C++11\n    namespace regex_constants { }\t\t\t// C++11\n    namespace this_thread { }\t\t\t\t// C++11\n    inline namespace literals {\t\t\t\t// C++14\n      inline namespace chrono_literals { }\t\t// C++14\n      inline namespace complex_literals { }\t\t// C++14\n      inline namespace string_literals { }\t\t// C++14\n      inline namespace string_view_literals { }\t\t// C++17\n    }\n  }\n\n  namespace abi { }\n\n  namespace __gnu_cxx\n  {\n    namespace __detail { }\n  }\n\n  For full details see:\n  http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaces.html\n*/\nnamespace std\n{\n  typedef __SIZE_TYPE__ \tsize_t;\n  typedef __PTRDIFF_TYPE__\tptrdiff_t;\n\n#if __cplusplus >= 201103L\n  typedef decltype(nullptr)\tnullptr_t;\n#endif\n}\n\n# define _GLIBCXX_USE_DUAL_ABI 1\n\n#if ! _GLIBCXX_USE_DUAL_ABI\n// Ignore any pre-defined value of _GLIBCXX_USE_CXX11_ABI\n# undef _GLIBCXX_USE_CXX11_ABI\n#endif\n\n#ifndef _GLIBCXX_USE_CXX11_ABI\n# define _GLIBCXX_USE_CXX11_ABI 1\n#endif\n\n#if _GLIBCXX_USE_CXX11_ABI\nnamespace std\n{\n  inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n}\nnamespace __gnu_cxx\n{\n  inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n}\n# define _GLIBCXX_NAMESPACE_CXX11 __cxx11::\n# define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {\n# define _GLIBCXX_END_NAMESPACE_CXX11 }\n# define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11\n#else\n# define _GLIBCXX_NAMESPACE_CXX11\n# define _GLIBCXX_BEGIN_NAMESPACE_CXX11\n# define _GLIBCXX_END_NAMESPACE_CXX11\n# define _GLIBCXX_DEFAULT_ABI_TAG\n#endif\n\n// Defined if inline namespaces are used for versioning.\n# define _GLIBCXX_INLINE_VERSION 0 \n\n// Inline namespace for symbol versioning.\n#if _GLIBCXX_INLINE_VERSION\n# define _GLIBCXX_BEGIN_NAMESPACE_VERSION namespace __8 {\n# define _GLIBCXX_END_NAMESPACE_VERSION }\n\nnamespace std\n{\ninline _GLIBCXX_BEGIN_NAMESPACE_VERSION\n#if __cplusplus >= 201402L\n  inline namespace literals {\n    inline namespace chrono_literals { }\n    inline namespace complex_literals { }\n    inline namespace string_literals { }\n#if __cplusplus > 201402L\n    inline namespace string_view_literals { }\n#endif // C++17\n  }\n#endif // C++14\n_GLIBCXX_END_NAMESPACE_VERSION\n}\n\nnamespace __gnu_cxx\n{\ninline _GLIBCXX_BEGIN_NAMESPACE_VERSION\n_GLIBCXX_END_NAMESPACE_VERSION\n}\n\n#else\n# define _GLIBCXX_BEGIN_NAMESPACE_VERSION\n# define _GLIBCXX_END_NAMESPACE_VERSION\n#endif\n\n// Inline namespaces for special modes: debug, parallel.\n#if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PARALLEL)\nnamespace std\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  // Non-inline namespace for components replaced by alternates in active mode.\n  namespace __cxx1998\n  {\n# if _GLIBCXX_USE_CXX11_ABI\n  inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n# endif\n  }\n\n_GLIBCXX_END_NAMESPACE_VERSION\n\n  // Inline namespace for debug mode.\n# ifdef _GLIBCXX_DEBUG\n  inline namespace __debug { }\n# endif\n\n  // Inline namespaces for parallel mode.\n# ifdef _GLIBCXX_PARALLEL\n  inline namespace __parallel { }\n# endif\n}\n\n// Check for invalid usage and unsupported mixed-mode use.\n# if defined(_GLIBCXX_DEBUG) && defined(_GLIBCXX_PARALLEL)\n#  error illegal use of multiple inlined namespaces\n# endif\n\n// Check for invalid use due to lack for weak symbols.\n# if __NO_INLINE__ && !__GXX_WEAK__\n#  warning currently using inlined namespace mode which may fail \\\n   without inlining due to lack of weak symbols\n# endif\n#endif\n\n// Macros for namespace scope. Either namespace std:: or the name\n// of some nested namespace within it corresponding to the active mode.\n// _GLIBCXX_STD_A\n// _GLIBCXX_STD_C\n//\n// Macros for opening/closing conditional namespaces.\n// _GLIBCXX_BEGIN_NAMESPACE_ALGO\n// _GLIBCXX_END_NAMESPACE_ALGO\n// _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n// _GLIBCXX_END_NAMESPACE_CONTAINER\n#if defined(_GLIBCXX_DEBUG)\n# define _GLIBCXX_STD_C __cxx1998\n# define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER \\\n\t namespace _GLIBCXX_STD_C {\n# define _GLIBCXX_END_NAMESPACE_CONTAINER }\n#else\n# define _GLIBCXX_STD_C std\n# define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n# define _GLIBCXX_END_NAMESPACE_CONTAINER\n#endif\n\n#ifdef _GLIBCXX_PARALLEL\n# define _GLIBCXX_STD_A __cxx1998\n# define _GLIBCXX_BEGIN_NAMESPACE_ALGO \\\n\t namespace _GLIBCXX_STD_A {\n# define _GLIBCXX_END_NAMESPACE_ALGO }\n#else\n# define _GLIBCXX_STD_A std\n# define _GLIBCXX_BEGIN_NAMESPACE_ALGO\n# define _GLIBCXX_END_NAMESPACE_ALGO\n#endif\n\n// GLIBCXX_ABI Deprecated\n// Define if compatibility should be provided for -mlong-double-64.\n#undef _GLIBCXX_LONG_DOUBLE_COMPAT\n\n// Define if compatibility should be provided for alternative 128-bit long\n// double formats. Not possible for Clang until __ibm128 is supported.\n#ifndef __clang__\n#undef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n#endif\n\n// Inline namespaces for long double 128 modes.\n#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n  && defined __LONG_DOUBLE_IEEE128__\nnamespace std\n{\n  // Namespaces for 128-bit IEEE long double format on 64-bit POWER LE.\n  inline namespace __gnu_cxx_ieee128 { }\n  inline namespace __gnu_cxx11_ieee128 { }\n}\n# define _GLIBCXX_NAMESPACE_LDBL __gnu_cxx_ieee128::\n# define _GLIBCXX_BEGIN_NAMESPACE_LDBL namespace __gnu_cxx_ieee128 {\n# define _GLIBCXX_END_NAMESPACE_LDBL }\n# define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 __gnu_cxx11_ieee128::\n# define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 namespace __gnu_cxx11_ieee128 {\n# define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 }\n\n#else // _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && IEEE128\n\n#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\nnamespace std\n{\n  inline namespace __gnu_cxx_ldbl128 { }\n}\n# define _GLIBCXX_NAMESPACE_LDBL __gnu_cxx_ldbl128::\n# define _GLIBCXX_BEGIN_NAMESPACE_LDBL namespace __gnu_cxx_ldbl128 {\n# define _GLIBCXX_END_NAMESPACE_LDBL }\n#else\n# define _GLIBCXX_NAMESPACE_LDBL\n# define _GLIBCXX_BEGIN_NAMESPACE_LDBL\n# define _GLIBCXX_END_NAMESPACE_LDBL\n#endif\n\n#if _GLIBCXX_USE_CXX11_ABI\n# define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11\n# define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11\n# define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11\n#else\n# define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_LDBL\n# define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_LDBL\n# define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_LDBL\n#endif\n\n#endif // _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && IEEE128\n\n// Debug Mode implies checking assertions.\n#if defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_ASSERTIONS)\n# define _GLIBCXX_ASSERTIONS 1\n#endif\n\n// Disable std::string explicit instantiation declarations in order to assert.\n#ifdef _GLIBCXX_ASSERTIONS\n# undef _GLIBCXX_EXTERN_TEMPLATE\n# define _GLIBCXX_EXTERN_TEMPLATE -1\n#endif\n\n\n#if __has_builtin(__builtin_is_constant_evaluated)\n# define __glibcxx_constexpr_assert(cond) \\\n  if (__builtin_is_constant_evaluated() && !bool(cond))\t\\\n    __builtin_unreachable() /* precondition violation detected! */\n#else\n# define __glibcxx_constexpr_assert(unevaluated)\n#endif\n\n\n// Assert.\n#if defined(_GLIBCXX_ASSERTIONS) \\\n  || defined(_GLIBCXX_PARALLEL) || defined(_GLIBCXX_PARALLEL_ASSERTIONS)\nnamespace std\n{\n  // Avoid the use of assert, because we're trying to keep the <cassert>\n  // include out of the mix.\n  extern \"C++\" _GLIBCXX_NORETURN\n  inline void\n  __replacement_assert(const char* __file, int __line,\n\t\t       const char* __function, const char* __condition)\n  {\n    __builtin_printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n\t\t     __function, __condition);\n    __builtin_abort();\n  }\n}\n#define __glibcxx_assert_impl(_Condition)\t\t\t       \\\n  if (__builtin_expect(!bool(_Condition), false))\t\t       \\\n  {\t\t\t\t\t\t\t\t       \\\n    __glibcxx_constexpr_assert(_Condition);\t\t\t       \\\n    std::__replacement_assert(__FILE__, __LINE__, __PRETTY_FUNCTION__, \\\n\t\t\t      #_Condition);\t\t\t       \\\n  }\n#endif\n\n#if defined(_GLIBCXX_ASSERTIONS)\n# define __glibcxx_assert(cond) \\\n  do { __glibcxx_assert_impl(cond); } while (false)\n#else\n# define __glibcxx_assert(cond) \\\n  do { __glibcxx_constexpr_assert(cond); } while (false)\n#endif\n\n// Macros for race detectors.\n// _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) and\n// _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) should be used to explain\n// atomic (lock-free) synchronization to race detectors:\n// the race detector will infer a happens-before arc from the former to the\n// latter when they share the same argument pointer.\n//\n// The most frequent use case for these macros (and the only case in the\n// current implementation of the library) is atomic reference counting:\n//   void _M_remove_reference()\n//   {\n//     _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);\n//     if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount, -1) <= 0)\n//       {\n//         _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);\n//         _M_destroy(__a);\n//       }\n//   }\n// The annotations in this example tell the race detector that all memory\n// accesses occurred when the refcount was positive do not race with\n// memory accesses which occurred after the refcount became zero.\n#ifndef _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE\n# define  _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A)\n#endif\n#ifndef _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER\n# define  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A)\n#endif\n\n// Macros for C linkage: define extern \"C\" linkage only when using C++.\n# define _GLIBCXX_BEGIN_EXTERN_C extern \"C\" {\n# define _GLIBCXX_END_EXTERN_C }\n\n# define _GLIBCXX_USE_ALLOCATOR_NEW 1\n\n#ifdef __SIZEOF_INT128__\n#if ! defined __GLIBCXX_TYPE_INT_N_0 && ! defined __STRICT_ANSI__\n// If __int128 is supported, we expect __GLIBCXX_TYPE_INT_N_0 to be defined\n// unless the compiler is in strict mode. If it's not defined and the strict\n// macro is not defined, something is wrong.\n#warning \"__STRICT_ANSI__ seems to have been undefined; this is not supported\"\n#endif\n#endif\n\n#else // !__cplusplus\n# define _GLIBCXX_BEGIN_EXTERN_C\n# define _GLIBCXX_END_EXTERN_C\n#endif\n\n\n// First includes.\n\n// Pick up any OS-specific definitions.\n#include <bits/os_defines.h>\n\n// Pick up any CPU-specific definitions.\n#include <bits/cpu_defines.h>\n\n// If platform uses neither visibility nor psuedo-visibility,\n// specify empty default for namespace annotation macros.\n#ifndef _GLIBCXX_PSEUDO_VISIBILITY\n# define _GLIBCXX_PSEUDO_VISIBILITY(V)\n#endif\n\n// Certain function definitions that are meant to be overridable from\n// user code are decorated with this macro.  For some targets, this\n// macro causes these definitions to be weak.\n#ifndef _GLIBCXX_WEAK_DEFINITION\n# define _GLIBCXX_WEAK_DEFINITION\n#endif\n\n// By default, we assume that __GXX_WEAK__ also means that there is support\n// for declaring functions as weak while not defining such functions.  This\n// allows for referring to functions provided by other libraries (e.g.,\n// libitm) without depending on them if the respective features are not used.\n#ifndef _GLIBCXX_USE_WEAK_REF\n# define _GLIBCXX_USE_WEAK_REF __GXX_WEAK__\n#endif\n\n// Conditionally enable annotations for the Transactional Memory TS on C++11.\n// Most of the following conditions are due to limitations in the current\n// implementation.\n#if __cplusplus >= 201103L && _GLIBCXX_USE_CXX11_ABI\t\t\t\\\n  && _GLIBCXX_USE_DUAL_ABI && __cpp_transactional_memory >= 201500L\t\\\n  &&  !_GLIBCXX_FULLY_DYNAMIC_STRING && _GLIBCXX_USE_WEAK_REF\t\t\\\n  && _GLIBCXX_USE_ALLOCATOR_NEW\n#define _GLIBCXX_TXN_SAFE transaction_safe\n#define _GLIBCXX_TXN_SAFE_DYN transaction_safe_dynamic\n#else\n#define _GLIBCXX_TXN_SAFE\n#define _GLIBCXX_TXN_SAFE_DYN\n#endif\n\n#if __cplusplus > 201402L\n// In C++17 mathematical special functions are in namespace std.\n# define _GLIBCXX_USE_STD_SPEC_FUNCS 1\n#elif __cplusplus >= 201103L && __STDCPP_WANT_MATH_SPEC_FUNCS__ != 0\n// For C++11 and C++14 they are in namespace std when requested.\n# define _GLIBCXX_USE_STD_SPEC_FUNCS 1\n#endif\n\n// The remainder of the prewritten config is automatic; all the\n// user hooks are listed above.\n\n// Create a boolean flag to be used to determine if --fast-math is set.\n#ifdef __FAST_MATH__\n# define _GLIBCXX_FAST_MATH 1\n#else\n# define _GLIBCXX_FAST_MATH 0\n#endif\n\n// This marks string literals in header files to be extracted for eventual\n// translation.  It is primarily used for messages in thrown exceptions; see\n// src/functexcept.cc.  We use __N because the more traditional _N is used\n// for something else under certain OSes (see BADNAMES).\n#define __N(msgid)     (msgid)\n\n// For example, <windows.h> is known to #define min and max as macros...\n#undef min\n#undef max\n\n// N.B. these _GLIBCXX_USE_C99_XXX macros are defined unconditionally\n// so they should be tested with #if not with #ifdef.\n#if __cplusplus >= 201103L\n# ifndef _GLIBCXX_USE_C99_MATH\n#  define _GLIBCXX_USE_C99_MATH _GLIBCXX11_USE_C99_MATH\n# endif\n# ifndef _GLIBCXX_USE_C99_COMPLEX\n# define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX11_USE_C99_COMPLEX\n# endif\n# ifndef _GLIBCXX_USE_C99_STDIO\n# define _GLIBCXX_USE_C99_STDIO _GLIBCXX11_USE_C99_STDIO\n# endif\n# ifndef _GLIBCXX_USE_C99_STDLIB\n# define _GLIBCXX_USE_C99_STDLIB _GLIBCXX11_USE_C99_STDLIB\n# endif\n# ifndef _GLIBCXX_USE_C99_WCHAR\n# define _GLIBCXX_USE_C99_WCHAR _GLIBCXX11_USE_C99_WCHAR\n# endif\n#else\n# ifndef _GLIBCXX_USE_C99_MATH\n#  define _GLIBCXX_USE_C99_MATH _GLIBCXX98_USE_C99_MATH\n# endif\n# ifndef _GLIBCXX_USE_C99_COMPLEX\n# define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX98_USE_C99_COMPLEX\n# endif\n# ifndef _GLIBCXX_USE_C99_STDIO\n# define _GLIBCXX_USE_C99_STDIO _GLIBCXX98_USE_C99_STDIO\n# endif\n# ifndef _GLIBCXX_USE_C99_STDLIB\n# define _GLIBCXX_USE_C99_STDLIB _GLIBCXX98_USE_C99_STDLIB\n# endif\n# ifndef _GLIBCXX_USE_C99_WCHAR\n# define _GLIBCXX_USE_C99_WCHAR _GLIBCXX98_USE_C99_WCHAR\n# endif\n#endif\n\n// Unless explicitly specified, enable char8_t extensions only if the core\n// language char8_t feature macro is defined.\n#ifndef _GLIBCXX_USE_CHAR8_T\n# ifdef __cpp_char8_t\n#  define _GLIBCXX_USE_CHAR8_T 1\n# endif\n#endif\n#ifdef _GLIBCXX_USE_CHAR8_T\n# define __cpp_lib_char8_t 201907L\n#endif\n\n/* Define if __float128 is supported on this host.  */\n#if defined(__FLOAT128__) || defined(__SIZEOF_FLOAT128__)\n/* For powerpc64 don't use __float128 when it's the same type as long double. */\n# if !(defined(_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT) && defined(__LONG_DOUBLE_IEEE128__))\n#  define _GLIBCXX_USE_FLOAT128 1\n# endif\n#endif\n\n// Define if float has the IEEE binary32 format.\n#if __FLT_MANT_DIG__ == 24 \\\n  && __FLT_MIN_EXP__ == -125 \\\n  && __FLT_MAX_EXP__ == 128\n# define _GLIBCXX_FLOAT_IS_IEEE_BINARY32 1\n#endif\n\n// Define if double has the IEEE binary64 format.\n#if __DBL_MANT_DIG__ == 53 \\\n  && __DBL_MIN_EXP__ == -1021 \\\n  && __DBL_MAX_EXP__ == 1024\n# define _GLIBCXX_DOUBLE_IS_IEEE_BINARY64 1\n#endif\n\n#ifdef __has_builtin\n# ifdef __is_identifier\n// Intel and older Clang require !__is_identifier for some built-ins:\n#  define _GLIBCXX_HAS_BUILTIN(B) __has_builtin(B) || ! __is_identifier(B)\n# else\n#  define _GLIBCXX_HAS_BUILTIN(B) __has_builtin(B)\n# endif\n#endif\n\n#if _GLIBCXX_HAS_BUILTIN(__has_unique_object_representations)\n# define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP 1\n#endif\n\n#if _GLIBCXX_HAS_BUILTIN(__is_aggregate)\n# define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE 1\n#endif\n\n#if _GLIBCXX_HAS_BUILTIN(__builtin_is_constant_evaluated)\n#  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1\n#endif\n\n#if _GLIBCXX_HAS_BUILTIN(__is_same)\n#  define _GLIBCXX_HAVE_BUILTIN_IS_SAME 1\n#endif\n\n#if _GLIBCXX_HAS_BUILTIN(__builtin_launder)\n# define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1\n#endif\n\n#undef _GLIBCXX_HAS_BUILTIN\n\n\n// PSTL configuration\n\n#if __cplusplus >= 201703L\n// This header is not installed for freestanding:\n#if __has_include(<pstl/pstl_config.h>)\n// Preserved here so we have some idea which version of upstream we've pulled in\n// #define PSTL_VERSION 9000\n\n// For now this defaults to being based on the presence of Thread Building Blocks\n# ifndef _GLIBCXX_USE_TBB_PAR_BACKEND\n#  define _GLIBCXX_USE_TBB_PAR_BACKEND __has_include(<tbb/tbb.h>)\n# endif\n// This section will need some rework when a new (default) backend type is added\n# if _GLIBCXX_USE_TBB_PAR_BACKEND\n#  define _PSTL_PAR_BACKEND_TBB\n# else\n#  define _PSTL_PAR_BACKEND_SERIAL\n# endif\n\n# define _PSTL_ASSERT(_Condition) __glibcxx_assert(_Condition)\n# define _PSTL_ASSERT_MSG(_Condition, _Message) __glibcxx_assert(_Condition)\n\n#include <pstl/pstl_config.h>\n#endif // __has_include\n#endif // C++17\n\n// End of prewritten config; the settings discovered at configure time follow.\n/* config.h.  Generated from config.h.in by configure.  */\n/* config.h.in.  Generated from configure.ac by autoheader.  */\n\n/* Define to 1 if you have the `acosf' function. */\n#define _GLIBCXX_HAVE_ACOSF 1\n\n/* Define to 1 if you have the `acosl' function. */\n#define _GLIBCXX_HAVE_ACOSL 1\n\n/* Define to 1 if you have the `aligned_alloc' function. */\n#define _GLIBCXX_HAVE_ALIGNED_ALLOC 1\n\n/* Define to 1 if you have the <arpa/inet.h> header file. */\n#define _GLIBCXX_HAVE_ARPA_INET_H 1\n\n/* Define to 1 if you have the `asinf' function. */\n#define _GLIBCXX_HAVE_ASINF 1\n\n/* Define to 1 if you have the `asinl' function. */\n#define _GLIBCXX_HAVE_ASINL 1\n\n/* Define to 1 if the target assembler supports .symver directive. */\n#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE 1\n\n/* Define to 1 if you have the `atan2f' function. */\n#define _GLIBCXX_HAVE_ATAN2F 1\n\n/* Define to 1 if you have the `atan2l' function. */\n#define _GLIBCXX_HAVE_ATAN2L 1\n\n/* Define to 1 if you have the `atanf' function. */\n#define _GLIBCXX_HAVE_ATANF 1\n\n/* Define to 1 if you have the `atanl' function. */\n#define _GLIBCXX_HAVE_ATANL 1\n\n/* Defined if shared_ptr reference counting should use atomic operations. */\n#define _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY 1\n\n/* Define to 1 if you have the `at_quick_exit' function. */\n#define _GLIBCXX_HAVE_AT_QUICK_EXIT 1\n\n/* Define to 1 if the target assembler supports thread-local storage. */\n/* #undef _GLIBCXX_HAVE_CC_TLS */\n\n/* Define to 1 if you have the `ceilf' function. */\n#define _GLIBCXX_HAVE_CEILF 1\n\n/* Define to 1 if you have the `ceill' function. */\n#define _GLIBCXX_HAVE_CEILL 1\n\n/* Define to 1 if you have the <complex.h> header file. */\n#define _GLIBCXX_HAVE_COMPLEX_H 1\n\n/* Define to 1 if you have the `cosf' function. */\n#define _GLIBCXX_HAVE_COSF 1\n\n/* Define to 1 if you have the `coshf' function. */\n#define _GLIBCXX_HAVE_COSHF 1\n\n/* Define to 1 if you have the `coshl' function. */\n#define _GLIBCXX_HAVE_COSHL 1\n\n/* Define to 1 if you have the `cosl' function. */\n#define _GLIBCXX_HAVE_COSL 1\n\n/* Define to 1 if you have the <dirent.h> header file. */\n#define _GLIBCXX_HAVE_DIRENT_H 1\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#define _GLIBCXX_HAVE_DLFCN_H 1\n\n/* Define to 1 if you have the <endian.h> header file. */\n#define _GLIBCXX_HAVE_ENDIAN_H 1\n\n/* Define to 1 if GCC 4.6 supported std::exception_ptr for the target */\n#define _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46 1\n\n/* Define to 1 if you have the <execinfo.h> header file. */\n#define _GLIBCXX_HAVE_EXECINFO_H 1\n\n/* Define to 1 if you have the `expf' function. */\n#define _GLIBCXX_HAVE_EXPF 1\n\n/* Define to 1 if you have the `expl' function. */\n#define _GLIBCXX_HAVE_EXPL 1\n\n/* Define to 1 if you have the `fabsf' function. */\n#define _GLIBCXX_HAVE_FABSF 1\n\n/* Define to 1 if you have the `fabsl' function. */\n#define _GLIBCXX_HAVE_FABSL 1\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#define _GLIBCXX_HAVE_FCNTL_H 1\n\n/* Define to 1 if you have the <fenv.h> header file. */\n#define _GLIBCXX_HAVE_FENV_H 1\n\n/* Define to 1 if you have the `finite' function. */\n#define _GLIBCXX_HAVE_FINITE 1\n\n/* Define to 1 if you have the `finitef' function. */\n#define _GLIBCXX_HAVE_FINITEF 1\n\n/* Define to 1 if you have the `finitel' function. */\n#define _GLIBCXX_HAVE_FINITEL 1\n\n/* Define to 1 if you have the <float.h> header file. */\n#define _GLIBCXX_HAVE_FLOAT_H 1\n\n/* Define to 1 if you have the `floorf' function. */\n#define _GLIBCXX_HAVE_FLOORF 1\n\n/* Define to 1 if you have the `floorl' function. */\n#define _GLIBCXX_HAVE_FLOORL 1\n\n/* Define to 1 if you have the `fmodf' function. */\n#define _GLIBCXX_HAVE_FMODF 1\n\n/* Define to 1 if you have the `fmodl' function. */\n#define _GLIBCXX_HAVE_FMODL 1\n\n/* Define to 1 if you have the `fpclass' function. */\n/* #undef _GLIBCXX_HAVE_FPCLASS */\n\n/* Define to 1 if you have the <fp.h> header file. */\n/* #undef _GLIBCXX_HAVE_FP_H */\n\n/* Define to 1 if you have the `frexpf' function. */\n#define _GLIBCXX_HAVE_FREXPF 1\n\n/* Define to 1 if you have the `frexpl' function. */\n#define _GLIBCXX_HAVE_FREXPL 1\n\n/* Define if _Unwind_GetIPInfo is available. */\n#define _GLIBCXX_HAVE_GETIPINFO 1\n\n/* Define if gets is available in <stdio.h> before C++14. */\n#define _GLIBCXX_HAVE_GETS 1\n\n/* Define to 1 if you have the `hypot' function. */\n#define _GLIBCXX_HAVE_HYPOT 1\n\n/* Define to 1 if you have the `hypotf' function. */\n#define _GLIBCXX_HAVE_HYPOTF 1\n\n/* Define to 1 if you have the `hypotl' function. */\n#define _GLIBCXX_HAVE_HYPOTL 1\n\n/* Define if you have the iconv() function. */\n#define _GLIBCXX_HAVE_ICONV 1\n\n/* Define to 1 if you have the <ieeefp.h> header file. */\n/* #undef _GLIBCXX_HAVE_IEEEFP_H */\n\n/* Define if int64_t is available in <stdint.h>. */\n#define _GLIBCXX_HAVE_INT64_T 1\n\n/* Define if int64_t is a long. */\n#define _GLIBCXX_HAVE_INT64_T_LONG 1\n\n/* Define if int64_t is a long long. */\n/* #undef _GLIBCXX_HAVE_INT64_T_LONG_LONG */\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#define _GLIBCXX_HAVE_INTTYPES_H 1\n\n/* Define to 1 if you have the `isinf' function. */\n/* #undef _GLIBCXX_HAVE_ISINF */\n\n/* Define to 1 if you have the `isinff' function. */\n#define _GLIBCXX_HAVE_ISINFF 1\n\n/* Define to 1 if you have the `isinfl' function. */\n#define _GLIBCXX_HAVE_ISINFL 1\n\n/* Define to 1 if you have the `isnan' function. */\n/* #undef _GLIBCXX_HAVE_ISNAN */\n\n/* Define to 1 if you have the `isnanf' function. */\n#define _GLIBCXX_HAVE_ISNANF 1\n\n/* Define to 1 if you have the `isnanl' function. */\n#define _GLIBCXX_HAVE_ISNANL 1\n\n/* Defined if iswblank exists. */\n#define _GLIBCXX_HAVE_ISWBLANK 1\n\n/* Define if LC_MESSAGES is available in <locale.h>. */\n#define _GLIBCXX_HAVE_LC_MESSAGES 1\n\n/* Define to 1 if you have the `ldexpf' function. */\n#define _GLIBCXX_HAVE_LDEXPF 1\n\n/* Define to 1 if you have the `ldexpl' function. */\n#define _GLIBCXX_HAVE_LDEXPL 1\n\n/* Define to 1 if you have the <libintl.h> header file. */\n#define _GLIBCXX_HAVE_LIBINTL_H 1\n\n/* Only used in build directory testsuite_hooks.h. */\n#define _GLIBCXX_HAVE_LIMIT_AS 1\n\n/* Only used in build directory testsuite_hooks.h. */\n#define _GLIBCXX_HAVE_LIMIT_DATA 1\n\n/* Only used in build directory testsuite_hooks.h. */\n#define _GLIBCXX_HAVE_LIMIT_FSIZE 1\n\n/* Only used in build directory testsuite_hooks.h. */\n#define _GLIBCXX_HAVE_LIMIT_RSS 1\n\n/* Only used in build directory testsuite_hooks.h. */\n#define _GLIBCXX_HAVE_LIMIT_VMEM 0\n\n/* Define if link is available in <unistd.h>. */\n#define _GLIBCXX_HAVE_LINK 1\n\n/* Define if futex syscall is available. */\n#define _GLIBCXX_HAVE_LINUX_FUTEX 1\n\n/* Define to 1 if you have the <linux/random.h> header file. */\n#define _GLIBCXX_HAVE_LINUX_RANDOM_H 1\n\n/* Define to 1 if you have the <linux/types.h> header file. */\n#define _GLIBCXX_HAVE_LINUX_TYPES_H 1\n\n/* Define to 1 if you have the <locale.h> header file. */\n#define _GLIBCXX_HAVE_LOCALE_H 1\n\n/* Define to 1 if you have the `log10f' function. */\n#define _GLIBCXX_HAVE_LOG10F 1\n\n/* Define to 1 if you have the `log10l' function. */\n#define _GLIBCXX_HAVE_LOG10L 1\n\n/* Define to 1 if you have the `logf' function. */\n#define _GLIBCXX_HAVE_LOGF 1\n\n/* Define to 1 if you have the `logl' function. */\n#define _GLIBCXX_HAVE_LOGL 1\n\n/* Define to 1 if you have the <machine/endian.h> header file. */\n/* #undef _GLIBCXX_HAVE_MACHINE_ENDIAN_H */\n\n/* Define to 1 if you have the <machine/param.h> header file. */\n/* #undef _GLIBCXX_HAVE_MACHINE_PARAM_H */\n\n/* Define if mbstate_t exists in wchar.h. */\n#define _GLIBCXX_HAVE_MBSTATE_T 1\n\n/* Define to 1 if you have the `memalign' function. */\n#define _GLIBCXX_HAVE_MEMALIGN 1\n\n/* Define to 1 if you have the <memory.h> header file. */\n#define _GLIBCXX_HAVE_MEMORY_H 1\n\n/* Define to 1 if you have the `modf' function. */\n#define _GLIBCXX_HAVE_MODF 1\n\n/* Define to 1 if you have the `modff' function. */\n#define _GLIBCXX_HAVE_MODFF 1\n\n/* Define to 1 if you have the `modfl' function. */\n#define _GLIBCXX_HAVE_MODFL 1\n\n/* Define to 1 if you have the <nan.h> header file. */\n/* #undef _GLIBCXX_HAVE_NAN_H */\n\n/* Define to 1 if you have the <netdb.h> header file. */\n#define _GLIBCXX_HAVE_NETDB_H 1\n\n/* Define to 1 if you have the <netinet/in.h> header file. */\n#define _GLIBCXX_HAVE_NETINET_IN_H 1\n\n/* Define to 1 if you have the <netinet/tcp.h> header file. */\n#define _GLIBCXX_HAVE_NETINET_TCP_H 1\n\n/* Define if <math.h> defines obsolete isinf function. */\n/* #undef _GLIBCXX_HAVE_OBSOLETE_ISINF */\n\n/* Define if <math.h> defines obsolete isnan function. */\n/* #undef _GLIBCXX_HAVE_OBSOLETE_ISNAN */\n\n/* Define if poll is available in <poll.h>. */\n#define _GLIBCXX_HAVE_POLL 1\n\n/* Define to 1 if you have the <poll.h> header file. */\n#define _GLIBCXX_HAVE_POLL_H 1\n\n/* Define to 1 if you have the `posix_memalign' function. */\n#define _GLIBCXX_HAVE_POSIX_MEMALIGN 1\n\n/* Define to 1 if POSIX Semaphores with sem_timedwait are available in\n   <semaphore.h>. */\n#define _GLIBCXX_HAVE_POSIX_SEMAPHORE 1\n\n/* Define to 1 if you have the `powf' function. */\n#define _GLIBCXX_HAVE_POWF 1\n\n/* Define to 1 if you have the `powl' function. */\n#define _GLIBCXX_HAVE_POWL 1\n\n/* Define to 1 if you have the `qfpclass' function. */\n/* #undef _GLIBCXX_HAVE_QFPCLASS */\n\n/* Define to 1 if you have the `quick_exit' function. */\n#define _GLIBCXX_HAVE_QUICK_EXIT 1\n\n/* Define if readlink is available in <unistd.h>. */\n#define _GLIBCXX_HAVE_READLINK 1\n\n/* Define to 1 if you have the `setenv' function. */\n#define _GLIBCXX_HAVE_SETENV 1\n\n/* Define to 1 if you have the `sincos' function. */\n#define _GLIBCXX_HAVE_SINCOS 1\n\n/* Define to 1 if you have the `sincosf' function. */\n#define _GLIBCXX_HAVE_SINCOSF 1\n\n/* Define to 1 if you have the `sincosl' function. */\n#define _GLIBCXX_HAVE_SINCOSL 1\n\n/* Define to 1 if you have the `sinf' function. */\n#define _GLIBCXX_HAVE_SINF 1\n\n/* Define to 1 if you have the `sinhf' function. */\n#define _GLIBCXX_HAVE_SINHF 1\n\n/* Define to 1 if you have the `sinhl' function. */\n#define _GLIBCXX_HAVE_SINHL 1\n\n/* Define to 1 if you have the `sinl' function. */\n#define _GLIBCXX_HAVE_SINL 1\n\n/* Defined if sleep exists. */\n/* #undef _GLIBCXX_HAVE_SLEEP */\n\n/* Define to 1 if you have the `sockatmark' function. */\n#define _GLIBCXX_HAVE_SOCKATMARK 1\n\n/* Define to 1 if you have the `sqrtf' function. */\n#define _GLIBCXX_HAVE_SQRTF 1\n\n/* Define to 1 if you have the `sqrtl' function. */\n#define _GLIBCXX_HAVE_SQRTL 1\n\n/* Define to 1 if you have the <stdalign.h> header file. */\n#define _GLIBCXX_HAVE_STDALIGN_H 1\n\n/* Define to 1 if you have the <stdbool.h> header file. */\n#define _GLIBCXX_HAVE_STDBOOL_H 1\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#define _GLIBCXX_HAVE_STDINT_H 1\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#define _GLIBCXX_HAVE_STDLIB_H 1\n\n/* Define if strerror_l is available in <string.h>. */\n#define _GLIBCXX_HAVE_STRERROR_L 1\n\n/* Define if strerror_r is available in <string.h>. */\n#define _GLIBCXX_HAVE_STRERROR_R 1\n\n/* Define to 1 if you have the <strings.h> header file. */\n#define _GLIBCXX_HAVE_STRINGS_H 1\n\n/* Define to 1 if you have the <string.h> header file. */\n#define _GLIBCXX_HAVE_STRING_H 1\n\n/* Define to 1 if you have the `strtof' function. */\n#define _GLIBCXX_HAVE_STRTOF 1\n\n/* Define to 1 if you have the `strtold' function. */\n#define _GLIBCXX_HAVE_STRTOLD 1\n\n/* Define to 1 if `d_type' is a member of `struct dirent'. */\n#define _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE 1\n\n/* Define if strxfrm_l is available in <string.h>. */\n#define _GLIBCXX_HAVE_STRXFRM_L 1\n\n/* Define if symlink is available in <unistd.h>. */\n#define _GLIBCXX_HAVE_SYMLINK 1\n\n/* Define to 1 if the target runtime linker supports binding the same symbol\n   to different versions. */\n#define _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT 1\n\n/* Define to 1 if you have the <sys/filio.h> header file. */\n/* #undef _GLIBCXX_HAVE_SYS_FILIO_H */\n\n/* Define to 1 if you have the <sys/ioctl.h> header file. */\n#define _GLIBCXX_HAVE_SYS_IOCTL_H 1\n\n/* Define to 1 if you have the <sys/ipc.h> header file. */\n#define _GLIBCXX_HAVE_SYS_IPC_H 1\n\n/* Define to 1 if you have the <sys/isa_defs.h> header file. */\n/* #undef _GLIBCXX_HAVE_SYS_ISA_DEFS_H */\n\n/* Define to 1 if you have the <sys/machine.h> header file. */\n/* #undef _GLIBCXX_HAVE_SYS_MACHINE_H */\n\n/* Define to 1 if you have the <sys/param.h> header file. */\n#define _GLIBCXX_HAVE_SYS_PARAM_H 1\n\n/* Define to 1 if you have the <sys/resource.h> header file. */\n#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1\n\n/* Define to 1 if you have a suitable <sys/sdt.h> header file */\n/* #undef _GLIBCXX_HAVE_SYS_SDT_H */\n\n/* Define to 1 if you have the <sys/sem.h> header file. */\n#define _GLIBCXX_HAVE_SYS_SEM_H 1\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n#define _GLIBCXX_HAVE_SYS_SOCKET_H 1\n\n/* Define to 1 if you have the <sys/statvfs.h> header file. */\n#define _GLIBCXX_HAVE_SYS_STATVFS_H 1\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#define _GLIBCXX_HAVE_SYS_STAT_H 1\n\n/* Define to 1 if you have the <sys/sysinfo.h> header file. */\n#define _GLIBCXX_HAVE_SYS_SYSINFO_H 1\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#define _GLIBCXX_HAVE_SYS_TIME_H 1\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#define _GLIBCXX_HAVE_SYS_TYPES_H 1\n\n/* Define to 1 if you have the <sys/uio.h> header file. */\n#define _GLIBCXX_HAVE_SYS_UIO_H 1\n\n/* Define if S_IFREG is available in <sys/stat.h>. */\n/* #undef _GLIBCXX_HAVE_S_IFREG */\n\n/* Define if S_ISREG is available in <sys/stat.h>. */\n#define _GLIBCXX_HAVE_S_ISREG 1\n\n/* Define to 1 if you have the `tanf' function. */\n#define _GLIBCXX_HAVE_TANF 1\n\n/* Define to 1 if you have the `tanhf' function. */\n#define _GLIBCXX_HAVE_TANHF 1\n\n/* Define to 1 if you have the `tanhl' function. */\n#define _GLIBCXX_HAVE_TANHL 1\n\n/* Define to 1 if you have the `tanl' function. */\n#define _GLIBCXX_HAVE_TANL 1\n\n/* Define to 1 if you have the <tgmath.h> header file. */\n#define _GLIBCXX_HAVE_TGMATH_H 1\n\n/* Define to 1 if you have the `timespec_get' function. */\n#define _GLIBCXX_HAVE_TIMESPEC_GET 1\n\n/* Define to 1 if the target supports thread-local storage. */\n#define _GLIBCXX_HAVE_TLS 1\n\n/* Define if truncate is available in <unistd.h>. */\n#define _GLIBCXX_HAVE_TRUNCATE 1\n\n/* Define to 1 if you have the <uchar.h> header file. */\n#define _GLIBCXX_HAVE_UCHAR_H 1\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#define _GLIBCXX_HAVE_UNISTD_H 1\n\n/* Define to 1 if you have the `uselocale' function. */\n#define _GLIBCXX_HAVE_USELOCALE 1\n\n/* Defined if usleep exists. */\n/* #undef _GLIBCXX_HAVE_USLEEP */\n\n/* Define to 1 if you have the <utime.h> header file. */\n#define _GLIBCXX_HAVE_UTIME_H 1\n\n/* Defined if vfwscanf exists. */\n#define _GLIBCXX_HAVE_VFWSCANF 1\n\n/* Defined if vswscanf exists. */\n#define _GLIBCXX_HAVE_VSWSCANF 1\n\n/* Defined if vwscanf exists. */\n#define _GLIBCXX_HAVE_VWSCANF 1\n\n/* Define to 1 if you have the <wchar.h> header file. */\n#define _GLIBCXX_HAVE_WCHAR_H 1\n\n/* Defined if wcstof exists. */\n#define _GLIBCXX_HAVE_WCSTOF 1\n\n/* Define to 1 if you have the <wctype.h> header file. */\n#define _GLIBCXX_HAVE_WCTYPE_H 1\n\n/* Defined if Sleep exists. */\n/* #undef _GLIBCXX_HAVE_WIN32_SLEEP */\n\n/* Define if writev is available in <sys/uio.h>. */\n#define _GLIBCXX_HAVE_WRITEV 1\n\n/* Define to 1 if you have the <xlocale.h> header file. */\n/* #undef _GLIBCXX_HAVE_XLOCALE_H */\n\n/* Define to 1 if you have the `_acosf' function. */\n/* #undef _GLIBCXX_HAVE__ACOSF */\n\n/* Define to 1 if you have the `_acosl' function. */\n/* #undef _GLIBCXX_HAVE__ACOSL */\n\n/* Define to 1 if you have the `_aligned_malloc' function. */\n/* #undef _GLIBCXX_HAVE__ALIGNED_MALLOC */\n\n/* Define to 1 if you have the `_asinf' function. */\n/* #undef _GLIBCXX_HAVE__ASINF */\n\n/* Define to 1 if you have the `_asinl' function. */\n/* #undef _GLIBCXX_HAVE__ASINL */\n\n/* Define to 1 if you have the `_atan2f' function. */\n/* #undef _GLIBCXX_HAVE__ATAN2F */\n\n/* Define to 1 if you have the `_atan2l' function. */\n/* #undef _GLIBCXX_HAVE__ATAN2L */\n\n/* Define to 1 if you have the `_atanf' function. */\n/* #undef _GLIBCXX_HAVE__ATANF */\n\n/* Define to 1 if you have the `_atanl' function. */\n/* #undef _GLIBCXX_HAVE__ATANL */\n\n/* Define to 1 if you have the `_ceilf' function. */\n/* #undef _GLIBCXX_HAVE__CEILF */\n\n/* Define to 1 if you have the `_ceill' function. */\n/* #undef _GLIBCXX_HAVE__CEILL */\n\n/* Define to 1 if you have the `_cosf' function. */\n/* #undef _GLIBCXX_HAVE__COSF */\n\n/* Define to 1 if you have the `_coshf' function. */\n/* #undef _GLIBCXX_HAVE__COSHF */\n\n/* Define to 1 if you have the `_coshl' function. */\n/* #undef _GLIBCXX_HAVE__COSHL */\n\n/* Define to 1 if you have the `_cosl' function. */\n/* #undef _GLIBCXX_HAVE__COSL */\n\n/* Define to 1 if you have the `_expf' function. */\n/* #undef _GLIBCXX_HAVE__EXPF */\n\n/* Define to 1 if you have the `_expl' function. */\n/* #undef _GLIBCXX_HAVE__EXPL */\n\n/* Define to 1 if you have the `_fabsf' function. */\n/* #undef _GLIBCXX_HAVE__FABSF */\n\n/* Define to 1 if you have the `_fabsl' function. */\n/* #undef _GLIBCXX_HAVE__FABSL */\n\n/* Define to 1 if you have the `_finite' function. */\n/* #undef _GLIBCXX_HAVE__FINITE */\n\n/* Define to 1 if you have the `_finitef' function. */\n/* #undef _GLIBCXX_HAVE__FINITEF */\n\n/* Define to 1 if you have the `_finitel' function. */\n/* #undef _GLIBCXX_HAVE__FINITEL */\n\n/* Define to 1 if you have the `_floorf' function. */\n/* #undef _GLIBCXX_HAVE__FLOORF */\n\n/* Define to 1 if you have the `_floorl' function. */\n/* #undef _GLIBCXX_HAVE__FLOORL */\n\n/* Define to 1 if you have the `_fmodf' function. */\n/* #undef _GLIBCXX_HAVE__FMODF */\n\n/* Define to 1 if you have the `_fmodl' function. */\n/* #undef _GLIBCXX_HAVE__FMODL */\n\n/* Define to 1 if you have the `_fpclass' function. */\n/* #undef _GLIBCXX_HAVE__FPCLASS */\n\n/* Define to 1 if you have the `_frexpf' function. */\n/* #undef _GLIBCXX_HAVE__FREXPF */\n\n/* Define to 1 if you have the `_frexpl' function. */\n/* #undef _GLIBCXX_HAVE__FREXPL */\n\n/* Define to 1 if you have the `_hypot' function. */\n/* #undef _GLIBCXX_HAVE__HYPOT */\n\n/* Define to 1 if you have the `_hypotf' function. */\n/* #undef _GLIBCXX_HAVE__HYPOTF */\n\n/* Define to 1 if you have the `_hypotl' function. */\n/* #undef _GLIBCXX_HAVE__HYPOTL */\n\n/* Define to 1 if you have the `_isinf' function. */\n/* #undef _GLIBCXX_HAVE__ISINF */\n\n/* Define to 1 if you have the `_isinff' function. */\n/* #undef _GLIBCXX_HAVE__ISINFF */\n\n/* Define to 1 if you have the `_isinfl' function. */\n/* #undef _GLIBCXX_HAVE__ISINFL */\n\n/* Define to 1 if you have the `_isnan' function. */\n/* #undef _GLIBCXX_HAVE__ISNAN */\n\n/* Define to 1 if you have the `_isnanf' function. */\n/* #undef _GLIBCXX_HAVE__ISNANF */\n\n/* Define to 1 if you have the `_isnanl' function. */\n/* #undef _GLIBCXX_HAVE__ISNANL */\n\n/* Define to 1 if you have the `_ldexpf' function. */\n/* #undef _GLIBCXX_HAVE__LDEXPF */\n\n/* Define to 1 if you have the `_ldexpl' function. */\n/* #undef _GLIBCXX_HAVE__LDEXPL */\n\n/* Define to 1 if you have the `_log10f' function. */\n/* #undef _GLIBCXX_HAVE__LOG10F */\n\n/* Define to 1 if you have the `_log10l' function. */\n/* #undef _GLIBCXX_HAVE__LOG10L */\n\n/* Define to 1 if you have the `_logf' function. */\n/* #undef _GLIBCXX_HAVE__LOGF */\n\n/* Define to 1 if you have the `_logl' function. */\n/* #undef _GLIBCXX_HAVE__LOGL */\n\n/* Define to 1 if you have the `_modf' function. */\n/* #undef _GLIBCXX_HAVE__MODF */\n\n/* Define to 1 if you have the `_modff' function. */\n/* #undef _GLIBCXX_HAVE__MODFF */\n\n/* Define to 1 if you have the `_modfl' function. */\n/* #undef _GLIBCXX_HAVE__MODFL */\n\n/* Define to 1 if you have the `_powf' function. */\n/* #undef _GLIBCXX_HAVE__POWF */\n\n/* Define to 1 if you have the `_powl' function. */\n/* #undef _GLIBCXX_HAVE__POWL */\n\n/* Define to 1 if you have the `_qfpclass' function. */\n/* #undef _GLIBCXX_HAVE__QFPCLASS */\n\n/* Define to 1 if you have the `_sincos' function. */\n/* #undef _GLIBCXX_HAVE__SINCOS */\n\n/* Define to 1 if you have the `_sincosf' function. */\n/* #undef _GLIBCXX_HAVE__SINCOSF */\n\n/* Define to 1 if you have the `_sincosl' function. */\n/* #undef _GLIBCXX_HAVE__SINCOSL */\n\n/* Define to 1 if you have the `_sinf' function. */\n/* #undef _GLIBCXX_HAVE__SINF */\n\n/* Define to 1 if you have the `_sinhf' function. */\n/* #undef _GLIBCXX_HAVE__SINHF */\n\n/* Define to 1 if you have the `_sinhl' function. */\n/* #undef _GLIBCXX_HAVE__SINHL */\n\n/* Define to 1 if you have the `_sinl' function. */\n/* #undef _GLIBCXX_HAVE__SINL */\n\n/* Define to 1 if you have the `_sqrtf' function. */\n/* #undef _GLIBCXX_HAVE__SQRTF */\n\n/* Define to 1 if you have the `_sqrtl' function. */\n/* #undef _GLIBCXX_HAVE__SQRTL */\n\n/* Define to 1 if you have the `_tanf' function. */\n/* #undef _GLIBCXX_HAVE__TANF */\n\n/* Define to 1 if you have the `_tanhf' function. */\n/* #undef _GLIBCXX_HAVE__TANHF */\n\n/* Define to 1 if you have the `_tanhl' function. */\n/* #undef _GLIBCXX_HAVE__TANHL */\n\n/* Define to 1 if you have the `_tanl' function. */\n/* #undef _GLIBCXX_HAVE__TANL */\n\n/* Define to 1 if you have the `_wfopen' function. */\n/* #undef _GLIBCXX_HAVE__WFOPEN */\n\n/* Define to 1 if you have the `__cxa_thread_atexit' function. */\n/* #undef _GLIBCXX_HAVE___CXA_THREAD_ATEXIT */\n\n/* Define to 1 if you have the `__cxa_thread_atexit_impl' function. */\n#define _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL 1\n\n/* Define as const if the declaration of iconv() needs const. */\n#define _GLIBCXX_ICONV_CONST \n\n/* Define to the sub-directory in which libtool stores uninstalled libraries.\n   */\n#define _GLIBCXX_LT_OBJDIR \".libs/\"\n\n/* Name of package */\n/* #undef _GLIBCXX_PACKAGE */\n\n/* Define to the address where bug reports for this package should be sent. */\n#define _GLIBCXX_PACKAGE_BUGREPORT \"\"\n\n/* Define to the full name of this package. */\n#define _GLIBCXX_PACKAGE_NAME \"package-unused\"\n\n/* Define to the full name and version of this package. */\n#define _GLIBCXX_PACKAGE_STRING \"package-unused version-unused\"\n\n/* Define to the one symbol short name of this package. */\n#define _GLIBCXX_PACKAGE_TARNAME \"libstdc++\"\n\n/* Define to the home page for this package. */\n#define _GLIBCXX_PACKAGE_URL \"\"\n\n/* Define to the version of this package. */\n#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION \"version-unused\"\n\n/* The size of `char', as computed by sizeof. */\n/* #undef SIZEOF_CHAR */\n\n/* The size of `int', as computed by sizeof. */\n/* #undef SIZEOF_INT */\n\n/* The size of `long', as computed by sizeof. */\n/* #undef SIZEOF_LONG */\n\n/* The size of `short', as computed by sizeof. */\n/* #undef SIZEOF_SHORT */\n\n/* The size of `void *', as computed by sizeof. */\n/* #undef SIZEOF_VOID_P */\n\n/* Define to 1 if you have the ANSI C header files. */\n#define _GLIBCXX_STDC_HEADERS 1\n\n/* Version number of package */\n/* #undef _GLIBCXX_VERSION */\n\n/* Enable large inode numbers on Mac OS X 10.5.  */\n#ifndef _GLIBCXX_DARWIN_USE_64_BIT_INODE\n# define _GLIBCXX_DARWIN_USE_64_BIT_INODE 1\n#endif\n\n/* Number of bits in a file offset, on hosts where this is settable. */\n/* #undef _GLIBCXX_FILE_OFFSET_BITS */\n\n/* Define if C99 functions in <complex.h> should be used in <complex> for\n   C++11. Using compiler builtins for these functions requires corresponding\n   C99 library functions to be present. */\n#define _GLIBCXX11_USE_C99_COMPLEX 1\n\n/* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n   in namespace std for C++11. */\n#define _GLIBCXX11_USE_C99_MATH 1\n\n/* Define if C99 functions or macros in <stdio.h> should be imported in\n   <cstdio> in namespace std for C++11. */\n#define _GLIBCXX11_USE_C99_STDIO 1\n\n/* Define if C99 functions or macros in <stdlib.h> should be imported in\n   <cstdlib> in namespace std for C++11. */\n#define _GLIBCXX11_USE_C99_STDLIB 1\n\n/* Define if C99 functions or macros in <wchar.h> should be imported in\n   <cwchar> in namespace std for C++11. */\n#define _GLIBCXX11_USE_C99_WCHAR 1\n\n/* Define if C99 functions in <complex.h> should be used in <complex> for\n   C++98. Using compiler builtins for these functions requires corresponding\n   C99 library functions to be present. */\n#define _GLIBCXX98_USE_C99_COMPLEX 1\n\n/* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n   in namespace std for C++98. */\n#define _GLIBCXX98_USE_C99_MATH 1\n\n/* Define if C99 functions or macros in <stdio.h> should be imported in\n   <cstdio> in namespace std for C++98. */\n#define _GLIBCXX98_USE_C99_STDIO 1\n\n/* Define if C99 functions or macros in <stdlib.h> should be imported in\n   <cstdlib> in namespace std for C++98. */\n#define _GLIBCXX98_USE_C99_STDLIB 1\n\n/* Define if C99 functions or macros in <wchar.h> should be imported in\n   <cwchar> in namespace std for C++98. */\n#define _GLIBCXX98_USE_C99_WCHAR 1\n\n/* Define if the compiler supports C++11 atomics. */\n#define _GLIBCXX_ATOMIC_BUILTINS 1\n\n/* Define to use concept checking code from the boost libraries. */\n/* #undef _GLIBCXX_CONCEPT_CHECKS */\n\n/* Define to 1 if a fully dynamic basic_string is wanted, 0 to disable,\n   undefined for platform defaults */\n#define _GLIBCXX_FULLY_DYNAMIC_STRING 0\n\n/* Define if gthreads library is available. */\n#define _GLIBCXX_HAS_GTHREADS 1\n\n/* Define to 1 if a full hosted library is built, or 0 if freestanding. */\n#define _GLIBCXX_HOSTED 1\n\n/* Define if compatibility should be provided for alternative 128-bit long\n   double formats. */\n\n/* Define if compatibility should be provided for -mlong-double-64. */\n\n/* Define to the letter to which size_t is mangled. */\n#define _GLIBCXX_MANGLE_SIZE_T m\n\n/* Define if C99 llrint and llround functions are missing from <math.h>. */\n/* #undef _GLIBCXX_NO_C99_ROUNDING_FUNCS */\n\n/* Defined if no way to sleep is available. */\n/* #undef _GLIBCXX_NO_SLEEP */\n\n/* Define if ptrdiff_t is int. */\n/* #undef _GLIBCXX_PTRDIFF_T_IS_INT */\n\n/* Define if using setrlimit to set resource limits during \"make check\" */\n#define _GLIBCXX_RES_LIMITS 1\n\n/* Define if size_t is unsigned int. */\n/* #undef _GLIBCXX_SIZE_T_IS_UINT */\n\n/* Define to the value of the EOF integer constant. */\n#define _GLIBCXX_STDIO_EOF -1\n\n/* Define to the value of the SEEK_CUR integer constant. */\n#define _GLIBCXX_STDIO_SEEK_CUR 1\n\n/* Define to the value of the SEEK_END integer constant. */\n#define _GLIBCXX_STDIO_SEEK_END 2\n\n/* Define to use symbol versioning in the shared library. */\n#define _GLIBCXX_SYMVER 1\n\n/* Define to use darwin versioning in the shared library. */\n/* #undef _GLIBCXX_SYMVER_DARWIN */\n\n/* Define to use GNU versioning in the shared library. */\n#define _GLIBCXX_SYMVER_GNU 1\n\n/* Define to use GNU namespace versioning in the shared library. */\n/* #undef _GLIBCXX_SYMVER_GNU_NAMESPACE */\n\n/* Define to use Sun versioning in the shared library. */\n/* #undef _GLIBCXX_SYMVER_SUN */\n\n/* Define if C11 functions in <uchar.h> should be imported into namespace std\n   in <cuchar>. */\n#define _GLIBCXX_USE_C11_UCHAR_CXX11 1\n\n/* Define if C99 functions or macros from <wchar.h>, <math.h>, <complex.h>,\n   <stdio.h>, and <stdlib.h> can be used or exposed. */\n#define _GLIBCXX_USE_C99 1\n\n/* Define if C99 functions in <complex.h> should be used in <tr1/complex>.\n   Using compiler builtins for these functions requires corresponding C99\n   library functions to be present. */\n#define _GLIBCXX_USE_C99_COMPLEX_TR1 1\n\n/* Define if C99 functions in <ctype.h> should be imported in <tr1/cctype> in\n   namespace std::tr1. */\n#define _GLIBCXX_USE_C99_CTYPE_TR1 1\n\n/* Define if C99 functions in <fenv.h> should be imported in <tr1/cfenv> in\n   namespace std::tr1. */\n#define _GLIBCXX_USE_C99_FENV_TR1 1\n\n/* Define if C99 functions in <inttypes.h> should be imported in\n   <tr1/cinttypes> in namespace std::tr1. */\n#define _GLIBCXX_USE_C99_INTTYPES_TR1 1\n\n/* Define if wchar_t C99 functions in <inttypes.h> should be imported in\n   <tr1/cinttypes> in namespace std::tr1. */\n#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1\n\n/* Define if C99 functions or macros in <math.h> should be imported in\n   <tr1/cmath> in namespace std::tr1. */\n#define _GLIBCXX_USE_C99_MATH_TR1 1\n\n/* Define if C99 types in <stdint.h> should be imported in <tr1/cstdint> in\n   namespace std::tr1. */\n#define _GLIBCXX_USE_C99_STDINT_TR1 1\n\n/* Defined if clock_gettime syscall has monotonic and realtime clock support.\n   */\n/* #undef _GLIBCXX_USE_CLOCK_GETTIME_SYSCALL */\n\n/* Defined if clock_gettime has monotonic clock support. */\n#define _GLIBCXX_USE_CLOCK_MONOTONIC 1\n\n/* Defined if clock_gettime has realtime clock support. */\n#define _GLIBCXX_USE_CLOCK_REALTIME 1\n\n/* Define if ISO/IEC TR 24733 decimal floating point types are supported on\n   this host. */\n#define _GLIBCXX_USE_DECIMAL_FLOAT 1\n\n/* Define if /dev/random and /dev/urandom are available for\n   std::random_device. */\n#define _GLIBCXX_USE_DEV_RANDOM 1\n\n/* Define if fchmod is available in <sys/stat.h>. */\n#define _GLIBCXX_USE_FCHMOD 1\n\n/* Define if fchmodat is available in <sys/stat.h>. */\n#define _GLIBCXX_USE_FCHMODAT 1\n\n/* Defined if gettimeofday is available. */\n#define _GLIBCXX_USE_GETTIMEOFDAY 1\n\n/* Define if get_nprocs is available in <sys/sysinfo.h>. */\n#define _GLIBCXX_USE_GET_NPROCS 1\n\n/* Define if __int128 is supported on this host. */\n#define _GLIBCXX_USE_INT128 1\n\n/* Define if LFS support is available. */\n#define _GLIBCXX_USE_LFS 1\n\n/* Define if code specialized for long long should be used. */\n#define _GLIBCXX_USE_LONG_LONG 1\n\n/* Define if lstat is available in <sys/stat.h>. */\n#define _GLIBCXX_USE_LSTAT 1\n\n/* Defined if nanosleep is available. */\n#define _GLIBCXX_USE_NANOSLEEP 1\n\n/* Define if NLS translations are to be used. */\n#define _GLIBCXX_USE_NLS 1\n\n/* Define if pthreads_num_processors_np is available in <pthread.h>. */\n/* #undef _GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP */\n\n/* Define if pthread_cond_clockwait is available in <pthread.h>. */\n#define _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT 1\n\n/* Define if pthread_mutex_clocklock is available in <pthread.h>. */\n#define _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK 1\n\n/* Define if pthread_rwlock_clockrdlock and pthread_rwlock_clockwrlock are\n   available in <pthread.h>. */\n#define _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK 1\n\n/* Define if POSIX read/write locks are available in <gthr.h>. */\n#define _GLIBCXX_USE_PTHREAD_RWLOCK_T 1\n\n/* Define if /dev/random and /dev/urandom are available for the random_device\n   of TR1 (Chapter 5.1). */\n#define _GLIBCXX_USE_RANDOM_TR1 1\n\n/* Define if usable realpath is available in <stdlib.h>. */\n#define _GLIBCXX_USE_REALPATH 1\n\n/* Defined if sched_yield is available. */\n#define _GLIBCXX_USE_SCHED_YIELD 1\n\n/* Define if _SC_NPROCESSORS_ONLN is available in <unistd.h>. */\n#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1\n\n/* Define if _SC_NPROC_ONLN is available in <unistd.h>. */\n/* #undef _GLIBCXX_USE_SC_NPROC_ONLN */\n\n/* Define if sendfile is available in <sys/sendfile.h>. */\n#define _GLIBCXX_USE_SENDFILE 1\n\n/* Define to restrict std::__basic_file<> to stdio APIs. */\n/* #undef _GLIBCXX_USE_STDIO_PURE */\n\n/* Define if struct stat has timespec members. */\n#define _GLIBCXX_USE_ST_MTIM 1\n\n/* Define if sysctl(), CTL_HW and HW_NCPU are available in <sys/sysctl.h>. */\n/* #undef _GLIBCXX_USE_SYSCTL_HW_NCPU */\n\n/* Define if obsolescent tmpnam is available in <stdio.h>. */\n#define _GLIBCXX_USE_TMPNAM 1\n\n/* Define if utime is available in <utime.h>. */\n#define _GLIBCXX_USE_UTIME 1\n\n/* Define if utimensat and UTIME_OMIT are available in <sys/stat.h> and\n   AT_FDCWD in <fcntl.h>. */\n#define _GLIBCXX_USE_UTIMENSAT 1\n\n/* Define if code specialized for wchar_t should be used. */\n#define _GLIBCXX_USE_WCHAR_T 1\n\n/* Define to 1 if a verbose library is built, or 0 otherwise. */\n#define _GLIBCXX_VERBOSE 1\n\n/* Defined if as can handle rdrand. */\n#define _GLIBCXX_X86_RDRAND 1\n\n/* Defined if as can handle rdseed. */\n#define _GLIBCXX_X86_RDSEED 1\n\n/* Define to 1 if mutex_timedlock is available. */\n#define _GTHREAD_USE_MUTEX_TIMEDLOCK 1\n\n/* Define for large files, on AIX-style hosts. */\n/* #undef _GLIBCXX_LARGE_FILES */\n\n/* Define if all C++11 floating point overloads are available in <math.h>.  */\n#if __cplusplus >= 201103L\n/* #undef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP */\n#endif\n\n/* Define if all C++11 integral type overloads are available in <math.h>.  */\n#if __cplusplus >= 201103L\n/* #undef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT */\n#endif\n\n#if defined (_GLIBCXX_HAVE__ACOSF) && ! defined (_GLIBCXX_HAVE_ACOSF)\n# define _GLIBCXX_HAVE_ACOSF 1\n# define acosf _acosf\n#endif\n\n#if defined (_GLIBCXX_HAVE__ACOSL) && ! defined (_GLIBCXX_HAVE_ACOSL)\n# define _GLIBCXX_HAVE_ACOSL 1\n# define acosl _acosl\n#endif\n\n#if defined (_GLIBCXX_HAVE__ASINF) && ! defined (_GLIBCXX_HAVE_ASINF)\n# define _GLIBCXX_HAVE_ASINF 1\n# define asinf _asinf\n#endif\n\n#if defined (_GLIBCXX_HAVE__ASINL) && ! defined (_GLIBCXX_HAVE_ASINL)\n# define _GLIBCXX_HAVE_ASINL 1\n# define asinl _asinl\n#endif\n\n#if defined (_GLIBCXX_HAVE__ATAN2F) && ! defined (_GLIBCXX_HAVE_ATAN2F)\n# define _GLIBCXX_HAVE_ATAN2F 1\n# define atan2f _atan2f\n#endif\n\n#if defined (_GLIBCXX_HAVE__ATAN2L) && ! defined (_GLIBCXX_HAVE_ATAN2L)\n# define _GLIBCXX_HAVE_ATAN2L 1\n# define atan2l _atan2l\n#endif\n\n#if defined (_GLIBCXX_HAVE__ATANF) && ! defined (_GLIBCXX_HAVE_ATANF)\n# define _GLIBCXX_HAVE_ATANF 1\n# define atanf _atanf\n#endif\n\n#if defined (_GLIBCXX_HAVE__ATANL) && ! defined (_GLIBCXX_HAVE_ATANL)\n# define _GLIBCXX_HAVE_ATANL 1\n# define atanl _atanl\n#endif\n\n#if defined (_GLIBCXX_HAVE__CEILF) && ! defined (_GLIBCXX_HAVE_CEILF)\n# define _GLIBCXX_HAVE_CEILF 1\n# define ceilf _ceilf\n#endif\n\n#if defined (_GLIBCXX_HAVE__CEILL) && ! defined (_GLIBCXX_HAVE_CEILL)\n# define _GLIBCXX_HAVE_CEILL 1\n# define ceill _ceill\n#endif\n\n#if defined (_GLIBCXX_HAVE__COSF) && ! defined (_GLIBCXX_HAVE_COSF)\n# define _GLIBCXX_HAVE_COSF 1\n# define cosf _cosf\n#endif\n\n#if defined (_GLIBCXX_HAVE__COSHF) && ! defined (_GLIBCXX_HAVE_COSHF)\n# define _GLIBCXX_HAVE_COSHF 1\n# define coshf _coshf\n#endif\n\n#if defined (_GLIBCXX_HAVE__COSHL) && ! defined (_GLIBCXX_HAVE_COSHL)\n# define _GLIBCXX_HAVE_COSHL 1\n# define coshl _coshl\n#endif\n\n#if defined (_GLIBCXX_HAVE__COSL) && ! defined (_GLIBCXX_HAVE_COSL)\n# define _GLIBCXX_HAVE_COSL 1\n# define cosl _cosl\n#endif\n\n#if defined (_GLIBCXX_HAVE__EXPF) && ! defined (_GLIBCXX_HAVE_EXPF)\n# define _GLIBCXX_HAVE_EXPF 1\n# define expf _expf\n#endif\n\n#if defined (_GLIBCXX_HAVE__EXPL) && ! defined (_GLIBCXX_HAVE_EXPL)\n# define _GLIBCXX_HAVE_EXPL 1\n# define expl _expl\n#endif\n\n#if defined (_GLIBCXX_HAVE__FABSF) && ! defined (_GLIBCXX_HAVE_FABSF)\n# define _GLIBCXX_HAVE_FABSF 1\n# define fabsf _fabsf\n#endif\n\n#if defined (_GLIBCXX_HAVE__FABSL) && ! defined (_GLIBCXX_HAVE_FABSL)\n# define _GLIBCXX_HAVE_FABSL 1\n# define fabsl _fabsl\n#endif\n\n#if defined (_GLIBCXX_HAVE__FINITE) && ! defined (_GLIBCXX_HAVE_FINITE)\n# define _GLIBCXX_HAVE_FINITE 1\n# define finite _finite\n#endif\n\n#if defined (_GLIBCXX_HAVE__FINITEF) && ! defined (_GLIBCXX_HAVE_FINITEF)\n# define _GLIBCXX_HAVE_FINITEF 1\n# define finitef _finitef\n#endif\n\n#if defined (_GLIBCXX_HAVE__FINITEL) && ! defined (_GLIBCXX_HAVE_FINITEL)\n# define _GLIBCXX_HAVE_FINITEL 1\n# define finitel _finitel\n#endif\n\n#if defined (_GLIBCXX_HAVE__FLOORF) && ! defined (_GLIBCXX_HAVE_FLOORF)\n# define _GLIBCXX_HAVE_FLOORF 1\n# define floorf _floorf\n#endif\n\n#if defined (_GLIBCXX_HAVE__FLOORL) && ! defined (_GLIBCXX_HAVE_FLOORL)\n# define _GLIBCXX_HAVE_FLOORL 1\n# define floorl _floorl\n#endif\n\n#if defined (_GLIBCXX_HAVE__FMODF) && ! defined (_GLIBCXX_HAVE_FMODF)\n# define _GLIBCXX_HAVE_FMODF 1\n# define fmodf _fmodf\n#endif\n\n#if defined (_GLIBCXX_HAVE__FMODL) && ! defined (_GLIBCXX_HAVE_FMODL)\n# define _GLIBCXX_HAVE_FMODL 1\n# define fmodl _fmodl\n#endif\n\n#if defined (_GLIBCXX_HAVE__FPCLASS) && ! defined (_GLIBCXX_HAVE_FPCLASS)\n# define _GLIBCXX_HAVE_FPCLASS 1\n# define fpclass _fpclass\n#endif\n\n#if defined (_GLIBCXX_HAVE__FREXPF) && ! defined (_GLIBCXX_HAVE_FREXPF)\n# define _GLIBCXX_HAVE_FREXPF 1\n# define frexpf _frexpf\n#endif\n\n#if defined (_GLIBCXX_HAVE__FREXPL) && ! defined (_GLIBCXX_HAVE_FREXPL)\n# define _GLIBCXX_HAVE_FREXPL 1\n# define frexpl _frexpl\n#endif\n\n#if defined (_GLIBCXX_HAVE__HYPOT) && ! defined (_GLIBCXX_HAVE_HYPOT)\n# define _GLIBCXX_HAVE_HYPOT 1\n# define hypot _hypot\n#endif\n\n#if defined (_GLIBCXX_HAVE__HYPOTF) && ! defined (_GLIBCXX_HAVE_HYPOTF)\n# define _GLIBCXX_HAVE_HYPOTF 1\n# define hypotf _hypotf\n#endif\n\n#if defined (_GLIBCXX_HAVE__HYPOTL) && ! defined (_GLIBCXX_HAVE_HYPOTL)\n# define _GLIBCXX_HAVE_HYPOTL 1\n# define hypotl _hypotl\n#endif\n\n#if defined (_GLIBCXX_HAVE__ISINF) && ! defined (_GLIBCXX_HAVE_ISINF)\n# define _GLIBCXX_HAVE_ISINF 1\n# define isinf _isinf\n#endif\n\n#if defined (_GLIBCXX_HAVE__ISINFF) && ! defined (_GLIBCXX_HAVE_ISINFF)\n# define _GLIBCXX_HAVE_ISINFF 1\n# define isinff _isinff\n#endif\n\n#if defined (_GLIBCXX_HAVE__ISINFL) && ! defined (_GLIBCXX_HAVE_ISINFL)\n# define _GLIBCXX_HAVE_ISINFL 1\n# define isinfl _isinfl\n#endif\n\n#if defined (_GLIBCXX_HAVE__ISNAN) && ! defined (_GLIBCXX_HAVE_ISNAN)\n# define _GLIBCXX_HAVE_ISNAN 1\n# define isnan _isnan\n#endif\n\n#if defined (_GLIBCXX_HAVE__ISNANF) && ! defined (_GLIBCXX_HAVE_ISNANF)\n# define _GLIBCXX_HAVE_ISNANF 1\n# define isnanf _isnanf\n#endif\n\n#if defined (_GLIBCXX_HAVE__ISNANL) && ! defined (_GLIBCXX_HAVE_ISNANL)\n# define _GLIBCXX_HAVE_ISNANL 1\n# define isnanl _isnanl\n#endif\n\n#if defined (_GLIBCXX_HAVE__LDEXPF) && ! defined (_GLIBCXX_HAVE_LDEXPF)\n# define _GLIBCXX_HAVE_LDEXPF 1\n# define ldexpf _ldexpf\n#endif\n\n#if defined (_GLIBCXX_HAVE__LDEXPL) && ! defined (_GLIBCXX_HAVE_LDEXPL)\n# define _GLIBCXX_HAVE_LDEXPL 1\n# define ldexpl _ldexpl\n#endif\n\n#if defined (_GLIBCXX_HAVE__LOG10F) && ! defined (_GLIBCXX_HAVE_LOG10F)\n# define _GLIBCXX_HAVE_LOG10F 1\n# define log10f _log10f\n#endif\n\n#if defined (_GLIBCXX_HAVE__LOG10L) && ! defined (_GLIBCXX_HAVE_LOG10L)\n# define _GLIBCXX_HAVE_LOG10L 1\n# define log10l _log10l\n#endif\n\n#if defined (_GLIBCXX_HAVE__LOGF) && ! defined (_GLIBCXX_HAVE_LOGF)\n# define _GLIBCXX_HAVE_LOGF 1\n# define logf _logf\n#endif\n\n#if defined (_GLIBCXX_HAVE__LOGL) && ! defined (_GLIBCXX_HAVE_LOGL)\n# define _GLIBCXX_HAVE_LOGL 1\n# define logl _logl\n#endif\n\n#if defined (_GLIBCXX_HAVE__MODF) && ! defined (_GLIBCXX_HAVE_MODF)\n# define _GLIBCXX_HAVE_MODF 1\n# define modf _modf\n#endif\n\n#if defined (_GLIBCXX_HAVE__MODFF) && ! defined (_GLIBCXX_HAVE_MODFF)\n# define _GLIBCXX_HAVE_MODFF 1\n# define modff _modff\n#endif\n\n#if defined (_GLIBCXX_HAVE__MODFL) && ! defined (_GLIBCXX_HAVE_MODFL)\n# define _GLIBCXX_HAVE_MODFL 1\n# define modfl _modfl\n#endif\n\n#if defined (_GLIBCXX_HAVE__POWF) && ! defined (_GLIBCXX_HAVE_POWF)\n# define _GLIBCXX_HAVE_POWF 1\n# define powf _powf\n#endif\n\n#if defined (_GLIBCXX_HAVE__POWL) && ! defined (_GLIBCXX_HAVE_POWL)\n# define _GLIBCXX_HAVE_POWL 1\n# define powl _powl\n#endif\n\n#if defined (_GLIBCXX_HAVE__QFPCLASS) && ! defined (_GLIBCXX_HAVE_QFPCLASS)\n# define _GLIBCXX_HAVE_QFPCLASS 1\n# define qfpclass _qfpclass\n#endif\n\n#if defined (_GLIBCXX_HAVE__SINCOS) && ! defined (_GLIBCXX_HAVE_SINCOS)\n# define _GLIBCXX_HAVE_SINCOS 1\n# define sincos _sincos\n#endif\n\n#if defined (_GLIBCXX_HAVE__SINCOSF) && ! defined (_GLIBCXX_HAVE_SINCOSF)\n# define _GLIBCXX_HAVE_SINCOSF 1\n# define sincosf _sincosf\n#endif\n\n#if defined (_GLIBCXX_HAVE__SINCOSL) && ! defined (_GLIBCXX_HAVE_SINCOSL)\n# define _GLIBCXX_HAVE_SINCOSL 1\n# define sincosl _sincosl\n#endif\n\n#if defined (_GLIBCXX_HAVE__SINF) && ! defined (_GLIBCXX_HAVE_SINF)\n# define _GLIBCXX_HAVE_SINF 1\n# define sinf _sinf\n#endif\n\n#if defined (_GLIBCXX_HAVE__SINHF) && ! defined (_GLIBCXX_HAVE_SINHF)\n# define _GLIBCXX_HAVE_SINHF 1\n# define sinhf _sinhf\n#endif\n\n#if defined (_GLIBCXX_HAVE__SINHL) && ! defined (_GLIBCXX_HAVE_SINHL)\n# define _GLIBCXX_HAVE_SINHL 1\n# define sinhl _sinhl\n#endif\n\n#if defined (_GLIBCXX_HAVE__SINL) && ! defined (_GLIBCXX_HAVE_SINL)\n# define _GLIBCXX_HAVE_SINL 1\n# define sinl _sinl\n#endif\n\n#if defined (_GLIBCXX_HAVE__SQRTF) && ! defined (_GLIBCXX_HAVE_SQRTF)\n# define _GLIBCXX_HAVE_SQRTF 1\n# define sqrtf _sqrtf\n#endif\n\n#if defined (_GLIBCXX_HAVE__SQRTL) && ! defined (_GLIBCXX_HAVE_SQRTL)\n# define _GLIBCXX_HAVE_SQRTL 1\n# define sqrtl _sqrtl\n#endif\n\n#if defined (_GLIBCXX_HAVE__STRTOF) && ! defined (_GLIBCXX_HAVE_STRTOF)\n# define _GLIBCXX_HAVE_STRTOF 1\n# define strtof _strtof\n#endif\n\n#if defined (_GLIBCXX_HAVE__STRTOLD) && ! defined (_GLIBCXX_HAVE_STRTOLD)\n# define _GLIBCXX_HAVE_STRTOLD 1\n# define strtold _strtold\n#endif\n\n#if defined (_GLIBCXX_HAVE__TANF) && ! defined (_GLIBCXX_HAVE_TANF)\n# define _GLIBCXX_HAVE_TANF 1\n# define tanf _tanf\n#endif\n\n#if defined (_GLIBCXX_HAVE__TANHF) && ! defined (_GLIBCXX_HAVE_TANHF)\n# define _GLIBCXX_HAVE_TANHF 1\n# define tanhf _tanhf\n#endif\n\n#if defined (_GLIBCXX_HAVE__TANHL) && ! defined (_GLIBCXX_HAVE_TANHL)\n# define _GLIBCXX_HAVE_TANHL 1\n# define tanhl _tanhl\n#endif\n\n#if defined (_GLIBCXX_HAVE__TANL) && ! defined (_GLIBCXX_HAVE_TANL)\n# define _GLIBCXX_HAVE_TANL 1\n# define tanl _tanl\n#endif\n\n#endif // _GLIBCXX_CXX_CONFIG_H\n"}],"crc32":2301915293,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]