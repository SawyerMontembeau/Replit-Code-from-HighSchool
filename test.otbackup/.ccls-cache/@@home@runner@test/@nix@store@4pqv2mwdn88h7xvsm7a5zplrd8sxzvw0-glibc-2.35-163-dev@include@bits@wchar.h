[{"ops":[{"insert":"/* wchar_t type related definitions.\n   Copyright (C) 2000-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n#ifndef _BITS_WCHAR_H\n#define _BITS_WCHAR_H\t1\n\n/* The fallback definitions, for when __WCHAR_MAX__ or __WCHAR_MIN__\n   are not defined, give the right value and type as long as both int\n   and wchar_t are 32-bit types.  Adding L'\\0' to a constant value\n   ensures that the type is correct; it is necessary to use (L'\\0' +\n   0) rather than just L'\\0' so that the type in C++ is the promoted\n   version of wchar_t rather than the distinct wchar_t type itself.\n   Because wchar_t in preprocessor #if expressions is treated as\n   intmax_t or uintmax_t, the expression (L'\\0' - 1) would have the\n   wrong value for WCHAR_MAX in such expressions and so cannot be used\n   to define __WCHAR_MAX in the unsigned case.  */\n\n#ifdef __WCHAR_MAX__\n# define __WCHAR_MAX\t__WCHAR_MAX__\n#elif L'\\0' - 1 > 0\n# define __WCHAR_MAX\t(0xffffffffu + L'\\0')\n#else\n# define __WCHAR_MAX\t(0x7fffffff + L'\\0')\n#endif\n\n#ifdef __WCHAR_MIN__\n# define __WCHAR_MIN\t__WCHAR_MIN__\n#elif L'\\0' - 1 > 0\n# define __WCHAR_MIN\t(L'\\0' + 0)\n#else\n# define __WCHAR_MIN\t(-__WCHAR_MAX - 1)\n#endif\n\n#endif\t/* bits/wchar.h */\n"}],"crc32":102913627,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]