[{"ops":[{"insert":"/* Copyright (C) 1995-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n#ifndef\t_BITS_TIMEX_H\n#define\t_BITS_TIMEX_H\t1\n\n#include <bits/types.h>\n#include <bits/types/struct_timeval.h>\n\n/* These definitions from linux/timex.h as of 3.18.  */\n\nstruct timex\n{\n# if defined __USE_TIME_BITS64 || (__TIMESIZE == 64 && __WORDSIZE == 32)\n  unsigned int modes;          /* mode selector */\n  int :32;                     /* pad */\n  long long offset;            /* time offset (usec) */\n  long long freq;              /* frequency offset (scaled ppm) */\n  long long maxerror;          /* maximum error (usec) */\n  long long esterror;          /* estimated error (usec) */\n  int status;                  /* clock command/status */\n  int :32;                     /* pad */\n  long long constant;          /* pll time constant */\n  long long precision;         /* clock precision (usec) (read only) */\n  long long tolerance;         /* clock frequency tolerance (ppm) (ro) */\n  struct timeval time;     /* (read only, except for ADJ_SETOFFSET) */\n  long long tick;              /* (modified) usecs between clock ticks */\n  long long ppsfreq;           /* pps frequency (scaled ppm) (ro) */\n  long long jitter;            /* pps jitter (us) (ro) */\n  int shift;                   /* interval duration (s) (shift) (ro) */\n  int :32;                     /* pad */\n  long long stabil;            /* pps stability (scaled ppm) (ro) */\n  long long jitcnt;            /* jitter limit exceeded (ro) */\n  long long calcnt;            /* calibration intervals (ro) */\n  long long errcnt;            /* calibration errors (ro) */\n  long long stbcnt;            /* stability limit exceeded (ro) */\n\n  int tai;                     /* TAI offset (ro) */\n\n  int  :32; int  :32; int  :32; int  :32;\n  int  :32; int  :32; int  :32; int  :32;\n  int  :32; int  :32; int  :32;\n# else\n  unsigned int modes;\t\t/* mode selector */\n  __syscall_slong_t offset;\t/* time offset (usec) */\n  __syscall_slong_t freq;\t/* frequency offset (scaled ppm) */\n  __syscall_slong_t maxerror;\t/* maximum error (usec) */\n  __syscall_slong_t esterror;\t/* estimated error (usec) */\n  int status;\t\t\t/* clock command/status */\n  __syscall_slong_t constant;\t/* pll time constant */\n  __syscall_slong_t precision;\t/* clock precision (usec) (ro) */\n  __syscall_slong_t tolerance;\t/* clock frequency tolerance (ppm) (ro) */\n  struct timeval time;\t\t/* (read only, except for ADJ_SETOFFSET) */\n  __syscall_slong_t tick;\t/* (modified) usecs between clock ticks */\n  __syscall_slong_t ppsfreq;\t/* pps frequency (scaled ppm) (ro) */\n  __syscall_slong_t jitter;\t/* pps jitter (us) (ro) */\n  int shift;\t\t\t/* interval duration (s) (shift) (ro) */\n  __syscall_slong_t stabil;\t/* pps stability (scaled ppm) (ro) */\n  __syscall_slong_t jitcnt;\t/* jitter limit exceeded (ro) */\n  __syscall_slong_t calcnt;\t/* calibration intervals (ro) */\n  __syscall_slong_t errcnt;\t/* calibration errors (ro) */\n  __syscall_slong_t stbcnt;\t/* stability limit exceeded (ro) */\n\n  int tai;\t\t\t/* TAI offset (ro) */\n\n  /* ??? */\n  int  :32; int  :32; int  :32; int  :32;\n  int  :32; int  :32; int  :32; int  :32;\n  int  :32; int  :32; int  :32;\n# endif\n};\n\n/* Mode codes (timex.mode) */\n#define ADJ_OFFSET\t\t0x0001\t/* time offset */\n#define ADJ_FREQUENCY\t\t0x0002\t/* frequency offset */\n#define ADJ_MAXERROR\t\t0x0004\t/* maximum time error */\n#define ADJ_ESTERROR\t\t0x0008\t/* estimated time error */\n#define ADJ_STATUS\t\t0x0010\t/* clock status */\n#define ADJ_TIMECONST\t\t0x0020\t/* pll time constant */\n#define ADJ_TAI\t\t\t0x0080\t/* set TAI offset */\n#define ADJ_SETOFFSET\t\t0x0100\t/* add 'time' to current time */\n#define ADJ_MICRO\t\t0x1000\t/* select microsecond resolution */\n#define ADJ_NANO\t\t0x2000\t/* select nanosecond resolution */\n#define ADJ_TICK\t\t0x4000\t/* tick value */\n#define ADJ_OFFSET_SINGLESHOT\t0x8001\t/* old-fashioned adjtime */\n#define ADJ_OFFSET_SS_READ\t0xa001\t/* read-only adjtime */\n\n/* xntp 3.4 compatibility names */\n#define MOD_OFFSET\tADJ_OFFSET\n#define MOD_FREQUENCY\tADJ_FREQUENCY\n#define MOD_MAXERROR\tADJ_MAXERROR\n#define MOD_ESTERROR\tADJ_ESTERROR\n#define MOD_STATUS\tADJ_STATUS\n#define MOD_TIMECONST\tADJ_TIMECONST\n#define MOD_CLKB\tADJ_TICK\n#define MOD_CLKA\tADJ_OFFSET_SINGLESHOT /* 0x8000 in original */\n#define MOD_TAI\t\tADJ_TAI\n#define MOD_MICRO\tADJ_MICRO\n#define MOD_NANO\tADJ_NANO\n\n\n/* Status codes (timex.status) */\n#define STA_PLL\t\t0x0001\t/* enable PLL updates (rw) */\n#define STA_PPSFREQ\t0x0002\t/* enable PPS freq discipline (rw) */\n#define STA_PPSTIME\t0x0004\t/* enable PPS time discipline (rw) */\n#define STA_FLL\t\t0x0008\t/* select frequency-lock mode (rw) */\n\n#define STA_INS\t\t0x0010\t/* insert leap (rw) */\n#define STA_DEL\t\t0x0020\t/* delete leap (rw) */\n#define STA_UNSYNC\t0x0040\t/* clock unsynchronized (rw) */\n#define STA_FREQHOLD\t0x0080\t/* hold frequency (rw) */\n\n#define STA_PPSSIGNAL\t0x0100\t/* PPS signal present (ro) */\n#define STA_PPSJITTER\t0x0200\t/* PPS signal jitter exceeded (ro) */\n#define STA_PPSWANDER\t0x0400\t/* PPS signal wander exceeded (ro) */\n#define STA_PPSERROR\t0x0800\t/* PPS signal calibration error (ro) */\n\n#define STA_CLOCKERR\t0x1000\t/* clock hardware fault (ro) */\n#define STA_NANO\t0x2000\t/* resolution (0 = us, 1 = ns) (ro) */\n#define STA_MODE\t0x4000\t/* mode (0 = PLL, 1 = FLL) (ro) */\n#define STA_CLK\t\t0x8000\t/* clock source (0 = A, 1 = B) (ro) */\n\n/* Read-only bits */\n#define STA_RONLY (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER \\\n    | STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)\n\n#endif /* bits/timex.h */\n"}],"crc32":1666149227,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]