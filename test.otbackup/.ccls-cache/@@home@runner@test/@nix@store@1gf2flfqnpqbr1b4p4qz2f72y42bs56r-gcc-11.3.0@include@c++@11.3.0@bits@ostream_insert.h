[{"ops":[{"insert":"// Helpers for ostream inserters -*- C++ -*-\n\n// Copyright (C) 2007-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/ostream_insert.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{ostream}\n */\n\n#ifndef _OSTREAM_INSERT_H\n#define _OSTREAM_INSERT_H 1\n\n#pragma GCC system_header\n\n#include <iosfwd>\n#include <bits/cxxabi_forced.h>\n#include <bits/exception_defines.h>\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  template<typename _CharT, typename _Traits>\n    inline void\n    __ostream_write(basic_ostream<_CharT, _Traits>& __out,\n\t\t    const _CharT* __s, streamsize __n)\n    {\n      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      \n      typedef typename __ostream_type::ios_base    __ios_base;\n\n      const streamsize __put = __out.rdbuf()->sputn(__s, __n);\n      if (__put != __n)\n\t__out.setstate(__ios_base::badbit);\n    }\n\n  template<typename _CharT, typename _Traits>\n    inline void\n    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)\n    {\n      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      \n      typedef typename __ostream_type::ios_base    __ios_base;\n\n      const _CharT __c = __out.fill();\n      for (; __n > 0; --__n)\n\t{\n\t  const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);\n\t  if (_Traits::eq_int_type(__put, _Traits::eof()))\n\t    {\n\t      __out.setstate(__ios_base::badbit);\n\t      break;\n\t    }\n\t}\n    }\n\n  template<typename _CharT, typename _Traits>\n    basic_ostream<_CharT, _Traits>&\n    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,\n\t\t     const _CharT* __s, streamsize __n)\n    {\n      typedef basic_ostream<_CharT, _Traits>       __ostream_type;\n      typedef typename __ostream_type::ios_base    __ios_base;\n\n      typename __ostream_type::sentry __cerb(__out);\n      if (__cerb)\n\t{\n\t  __try\n\t    {\n\t      const streamsize __w = __out.width();\n\t      if (__w > __n)\n\t\t{\n\t\t  const bool __left = ((__out.flags()\n\t\t\t\t\t& __ios_base::adjustfield)\n\t\t\t\t       == __ios_base::left);\n\t\t  if (!__left)\n\t\t    __ostream_fill(__out, __w - __n);\n\t\t  if (__out.good())\n\t\t    __ostream_write(__out, __s, __n);\n\t\t  if (__left && __out.good())\n\t\t    __ostream_fill(__out, __w - __n);\n\t\t}\n\t      else\n\t\t__ostream_write(__out, __s, __n);\n\t      __out.width(0);\n\t    }\n\t  __catch(__cxxabiv1::__forced_unwind&)\n\t    {\n\t      __out._M_setstate(__ios_base::badbit);\n\t      __throw_exception_again;\n\t    }\n\t  __catch(...)\n\t    { __out._M_setstate(__ios_base::badbit); }\n\t}\n      return __out;\n    }\n\n  // Inhibit implicit instantiations for required instantiations,\n  // which are defined via explicit instantiations elsewhere.\n#if _GLIBCXX_EXTERN_TEMPLATE\n  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);\n\n#ifdef _GLIBCXX_USE_WCHAR_T\n  extern template wostream& __ostream_insert(wostream&, const wchar_t*,\n\t\t\t\t\t     streamsize);\n#endif\n#endif\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace std\n\n#endif /* _OSTREAM_INSERT_H */\n"}],"crc32":694925971,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]