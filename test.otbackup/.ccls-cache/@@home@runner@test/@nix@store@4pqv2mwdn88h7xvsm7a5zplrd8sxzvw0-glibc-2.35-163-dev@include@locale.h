[{"ops":[{"insert":"/* Copyright (C) 1991-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n/*\n *\tISO C99 Standard: 7.11 Localization\t<locale.h>\n */\n\n#ifndef\t_LOCALE_H\n#define\t_LOCALE_H\t1\n\n#include <features.h>\n\n#define __need_NULL\n#include <stddef.h>\n#include <bits/locale.h>\n\n__BEGIN_DECLS\n\n/* These are the possibilities for the first argument to setlocale.\n   The code assumes that the lowest LC_* symbol has the value zero.  */\n#define LC_CTYPE          __LC_CTYPE\n#define LC_NUMERIC        __LC_NUMERIC\n#define LC_TIME           __LC_TIME\n#define LC_COLLATE        __LC_COLLATE\n#define LC_MONETARY       __LC_MONETARY\n#define LC_MESSAGES       __LC_MESSAGES\n#define\tLC_ALL\t\t  __LC_ALL\n#define LC_PAPER\t  __LC_PAPER\n#define LC_NAME\t\t  __LC_NAME\n#define LC_ADDRESS\t  __LC_ADDRESS\n#define LC_TELEPHONE\t  __LC_TELEPHONE\n#define LC_MEASUREMENT\t  __LC_MEASUREMENT\n#define LC_IDENTIFICATION __LC_IDENTIFICATION\n\n\n/* Structure giving information about numeric and monetary notation.  */\nstruct lconv\n{\n  /* Numeric (non-monetary) information.  */\n\n  char *decimal_point;\t\t/* Decimal point character.  */\n  char *thousands_sep;\t\t/* Thousands separator.  */\n  /* Each element is the number of digits in each group;\n     elements with higher indices are farther left.\n     An element with value CHAR_MAX means that no further grouping is done.\n     An element with value 0 means that the previous element is used\n     for all groups farther left.  */\n  char *grouping;\n\n  /* Monetary information.  */\n\n  /* First three chars are a currency symbol from ISO 4217.\n     Fourth char is the separator.  Fifth char is '\\0'.  */\n  char *int_curr_symbol;\n  char *currency_symbol;\t/* Local currency symbol.  */\n  char *mon_decimal_point;\t/* Decimal point character.  */\n  char *mon_thousands_sep;\t/* Thousands separator.  */\n  char *mon_grouping;\t\t/* Like `grouping' element (above).  */\n  char *positive_sign;\t\t/* Sign for positive values.  */\n  char *negative_sign;\t\t/* Sign for negative values.  */\n  char int_frac_digits;\t\t/* Int'l fractional digits.  */\n  char frac_digits;\t\t/* Local fractional digits.  */\n  /* 1 if currency_symbol precedes a positive value, 0 if succeeds.  */\n  char p_cs_precedes;\n  /* 1 iff a space separates currency_symbol from a positive value.  */\n  char p_sep_by_space;\n  /* 1 if currency_symbol precedes a negative value, 0 if succeeds.  */\n  char n_cs_precedes;\n  /* 1 iff a space separates currency_symbol from a negative value.  */\n  char n_sep_by_space;\n  /* Positive and negative sign positions:\n     0 Parentheses surround the quantity and currency_symbol.\n     1 The sign string precedes the quantity and currency_symbol.\n     2 The sign string follows the quantity and currency_symbol.\n     3 The sign string immediately precedes the currency_symbol.\n     4 The sign string immediately follows the currency_symbol.  */\n  char p_sign_posn;\n  char n_sign_posn;\n#ifdef __USE_ISOC99\n  /* 1 if int_curr_symbol precedes a positive value, 0 if succeeds.  */\n  char int_p_cs_precedes;\n  /* 1 iff a space separates int_curr_symbol from a positive value.  */\n  char int_p_sep_by_space;\n  /* 1 if int_curr_symbol precedes a negative value, 0 if succeeds.  */\n  char int_n_cs_precedes;\n  /* 1 iff a space separates int_curr_symbol from a negative value.  */\n  char int_n_sep_by_space;\n  /* Positive and negative sign positions:\n     0 Parentheses surround the quantity and int_curr_symbol.\n     1 The sign string precedes the quantity and int_curr_symbol.\n     2 The sign string follows the quantity and int_curr_symbol.\n     3 The sign string immediately precedes the int_curr_symbol.\n     4 The sign string immediately follows the int_curr_symbol.  */\n  char int_p_sign_posn;\n  char int_n_sign_posn;\n#else\n  char __int_p_cs_precedes;\n  char __int_p_sep_by_space;\n  char __int_n_cs_precedes;\n  char __int_n_sep_by_space;\n  char __int_p_sign_posn;\n  char __int_n_sign_posn;\n#endif\n};\n\n\n/* Set and/or return the current locale.  */\nextern char *setlocale (int __category, const char *__locale) __THROW;\n\n/* Return the numeric/monetary information for the current locale.  */\nextern struct lconv *localeconv (void) __THROW;\n\n\n#ifdef\t__USE_XOPEN2K8\n/* POSIX.1-2008 extends the locale interface with functions for\n   explicit creation and manipulation of 'locale_t' objects\n   representing locale contexts, and a set of parallel\n   locale-sensitive text processing functions that take a locale_t\n   argument.  This enables applications to work with data from\n   multiple locales simultaneously and thread-safely.  */\n# include <bits/types/locale_t.h>\n\n/* Return a reference to a data structure representing a set of locale\n   datasets.  Unlike for the CATEGORY parameter for `setlocale' the\n   CATEGORY_MASK parameter here uses a single bit for each category,\n   made by OR'ing together LC_*_MASK bits above.  */\nextern locale_t newlocale (int __category_mask, const char *__locale,\n\t\t\t   locale_t __base) __THROW;\n\n/* These are the bits that can be set in the CATEGORY_MASK argument to\n   `newlocale'.  In the GNU implementation, LC_FOO_MASK has the value\n   of (1 << LC_FOO), but this is not a part of the interface that\n   callers can assume will be true.  */\n# define LC_CTYPE_MASK\t\t(1 << __LC_CTYPE)\n# define LC_NUMERIC_MASK\t(1 << __LC_NUMERIC)\n# define LC_TIME_MASK\t\t(1 << __LC_TIME)\n# define LC_COLLATE_MASK\t(1 << __LC_COLLATE)\n# define LC_MONETARY_MASK\t(1 << __LC_MONETARY)\n# define LC_MESSAGES_MASK\t(1 << __LC_MESSAGES)\n# define LC_PAPER_MASK\t\t(1 << __LC_PAPER)\n# define LC_NAME_MASK\t\t(1 << __LC_NAME)\n# define LC_ADDRESS_MASK\t(1 << __LC_ADDRESS)\n# define LC_TELEPHONE_MASK\t(1 << __LC_TELEPHONE)\n# define LC_MEASUREMENT_MASK\t(1 << __LC_MEASUREMENT)\n# define LC_IDENTIFICATION_MASK\t(1 << __LC_IDENTIFICATION)\n# define LC_ALL_MASK\t\t(LC_CTYPE_MASK \\\n\t\t\t\t | LC_NUMERIC_MASK \\\n\t\t\t\t | LC_TIME_MASK \\\n\t\t\t\t | LC_COLLATE_MASK \\\n\t\t\t\t | LC_MONETARY_MASK \\\n\t\t\t\t | LC_MESSAGES_MASK \\\n\t\t\t\t | LC_PAPER_MASK \\\n\t\t\t\t | LC_NAME_MASK \\\n\t\t\t\t | LC_ADDRESS_MASK \\\n\t\t\t\t | LC_TELEPHONE_MASK \\\n\t\t\t\t | LC_MEASUREMENT_MASK \\\n\t\t\t\t | LC_IDENTIFICATION_MASK \\\n\t\t\t\t )\n\n/* Return a duplicate of the set of locale in DATASET.  All usage\n   counters are increased if necessary.  */\nextern locale_t duplocale (locale_t __dataset) __THROW;\n\n/* Free the data associated with a locale dataset previously returned\n   by a call to `setlocale_r'.  */\nextern void freelocale (locale_t __dataset) __THROW;\n\n/* Switch the current thread's locale to DATASET.\n   If DATASET is null, instead just return the current setting.\n   The special value LC_GLOBAL_LOCALE is the initial setting\n   for all threads and can also be installed any time, meaning\n   the thread uses the global settings controlled by `setlocale'.  */\nextern locale_t uselocale (locale_t __dataset) __THROW;\n\n/* This value can be passed to `uselocale' and may be returned by it.\n   Passing this value to any other function has undefined behavior.  */\n# define LC_GLOBAL_LOCALE\t((locale_t) -1L)\n\n#endif\n\n__END_DECLS\n\n#endif /* locale.h  */\n"}],"crc32":1227324480,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]