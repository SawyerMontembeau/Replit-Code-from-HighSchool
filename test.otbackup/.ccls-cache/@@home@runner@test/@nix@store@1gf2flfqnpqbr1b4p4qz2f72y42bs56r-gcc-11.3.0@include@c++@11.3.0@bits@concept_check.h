[{"ops":[{"insert":"// Concept-checking control -*- C++ -*-\n\n// Copyright (C) 2001-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/concept_check.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{iterator}\n */\n\n#ifndef _CONCEPT_CHECK_H\n#define _CONCEPT_CHECK_H 1\n\n#pragma GCC system_header\n\n#include <bits/c++config.h>\n\n// All places in libstdc++-v3 where these are used, or /might/ be used, or\n// don't need to be used, or perhaps /should/ be used, are commented with\n// \"concept requirements\" (and maybe some more text).  So grep like crazy\n// if you're looking for additional places to use these.\n\n// Concept-checking code is off by default unless users turn it on via\n// configure options or editing c++config.h.\n// It is not supported for freestanding implementations.\n\n#if !defined(_GLIBCXX_CONCEPT_CHECKS) || !_GLIBCXX_HOSTED\n\n#define __glibcxx_function_requires(...)\n#define __glibcxx_class_requires(_a,_b)\n#define __glibcxx_class_requires2(_a,_b,_c)\n#define __glibcxx_class_requires3(_a,_b,_c,_d)\n#define __glibcxx_class_requires4(_a,_b,_c,_d,_e)\n\n#else // the checks are on\n\n#include <bits/boost_concept_check.h>\n\n// Note that the obvious and elegant approach of\n//\n//#define glibcxx_function_requires(C) debug::function_requires< debug::C >()\n//\n// won't work due to concept templates with more than one parameter, e.g.,\n// BinaryPredicateConcept.  The preprocessor tries to split things up on\n// the commas in the template argument list.  We can't use an inner pair of\n// parenthesis to hide the commas, because \"debug::(Temp<Foo,Bar>)\" isn't\n// a valid instantiation pattern.  Thus, we steal a feature from C99.\n\n#define __glibcxx_function_requires(...)                                 \\\n            __gnu_cxx::__function_requires< __gnu_cxx::__VA_ARGS__ >();\n#define __glibcxx_class_requires(_a,_C)                                  \\\n            _GLIBCXX_CLASS_REQUIRES(_a, __gnu_cxx, _C);\n#define __glibcxx_class_requires2(_a,_b,_C)                              \\\n            _GLIBCXX_CLASS_REQUIRES2(_a, _b, __gnu_cxx, _C);\n#define __glibcxx_class_requires3(_a,_b,_c,_C)                           \\\n            _GLIBCXX_CLASS_REQUIRES3(_a, _b, _c, __gnu_cxx, _C);\n#define __glibcxx_class_requires4(_a,_b,_c,_d,_C)                        \\\n            _GLIBCXX_CLASS_REQUIRES4(_a, _b, _c, _d, __gnu_cxx, _C);\n\n#endif // enable/disable\n\n#endif // _GLIBCXX_CONCEPT_CHECK\n"}],"crc32":568299019,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]