[{"ops":[{"insert":"/* bits/types.h -- definitions of __*_t types underlying *_t types.\n   Copyright (C) 2002-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n/*\n * Never include this file directly; use <sys/types.h> instead.\n */\n\n#ifndef\t_BITS_TYPES_H\n#define\t_BITS_TYPES_H\t1\n\n#include <features.h>\n#include <bits/wordsize.h>\n#include <bits/timesize.h>\n\n/* Convenience types.  */\ntypedef unsigned char __u_char;\ntypedef unsigned short int __u_short;\ntypedef unsigned int __u_int;\ntypedef unsigned long int __u_long;\n\n/* Fixed-size types, underlying types depend on word size and compiler.  */\ntypedef signed char __int8_t;\ntypedef unsigned char __uint8_t;\ntypedef signed short int __int16_t;\ntypedef unsigned short int __uint16_t;\ntypedef signed int __int32_t;\ntypedef unsigned int __uint32_t;\n#if __WORDSIZE == 64\ntypedef signed long int __int64_t;\ntypedef unsigned long int __uint64_t;\n#else\n__extension__ typedef signed long long int __int64_t;\n__extension__ typedef unsigned long long int __uint64_t;\n#endif\n\n/* Smallest types with at least a given width.  */\ntypedef __int8_t __int_least8_t;\ntypedef __uint8_t __uint_least8_t;\ntypedef __int16_t __int_least16_t;\ntypedef __uint16_t __uint_least16_t;\ntypedef __int32_t __int_least32_t;\ntypedef __uint32_t __uint_least32_t;\ntypedef __int64_t __int_least64_t;\ntypedef __uint64_t __uint_least64_t;\n\n/* quad_t is also 64 bits.  */\n#if __WORDSIZE == 64\ntypedef long int __quad_t;\ntypedef unsigned long int __u_quad_t;\n#else\n__extension__ typedef long long int __quad_t;\n__extension__ typedef unsigned long long int __u_quad_t;\n#endif\n\n/* Largest integral types.  */\n#if __WORDSIZE == 64\ntypedef long int __intmax_t;\ntypedef unsigned long int __uintmax_t;\n#else\n__extension__ typedef long long int __intmax_t;\n__extension__ typedef unsigned long long int __uintmax_t;\n#endif\n\n\n/* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE\n   macros for each of the OS types we define below.  The definitions\n   of those macros must use the following macros for underlying types.\n   We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsigned\n   variants of each of the following integer types on this machine.\n\n\t16\t\t-- \"natural\" 16-bit type (always short)\n\t32\t\t-- \"natural\" 32-bit type (always int)\n\t64\t\t-- \"natural\" 64-bit type (long or long long)\n\tLONG32\t\t-- 32-bit type, traditionally long\n\tQUAD\t\t-- 64-bit type, traditionally long long\n\tWORD\t\t-- natural type of __WORDSIZE bits (int or long)\n\tLONGWORD\t-- type of __WORDSIZE bits, traditionally long\n\n   We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the\n   conventional uses of `long' or `long long' type modifiers match the\n   types we define, even when a less-adorned type would be the same size.\n   This matters for (somewhat) portably writing printf/scanf formats for\n   these types, where using the appropriate l or ll format modifiers can\n   make the typedefs and the formats match up across all GNU platforms.  If\n   we used `long' when it's 64 bits where `long long' is expected, then the\n   compiler would warn about the formats not matching the argument types,\n   and the programmer changing them to shut up the compiler would break the\n   program's portability.\n\n   Here we assume what is presently the case in all the GCC configurations\n   we support: long long is always 64 bits, long is always word/address size,\n   and int is always 32 bits.  */\n\n#define\t__S16_TYPE\t\tshort int\n#define __U16_TYPE\t\tunsigned short int\n#define\t__S32_TYPE\t\tint\n#define __U32_TYPE\t\tunsigned int\n#define __SLONGWORD_TYPE\tlong int\n#define __ULONGWORD_TYPE\tunsigned long int\n#if __WORDSIZE == 32\n# define __SQUAD_TYPE\t\t__int64_t\n# define __UQUAD_TYPE\t\t__uint64_t\n# define __SWORD_TYPE\t\tint\n# define __UWORD_TYPE\t\tunsigned int\n# define __SLONG32_TYPE\t\tlong int\n# define __ULONG32_TYPE\t\tunsigned long int\n# define __S64_TYPE\t\t__int64_t\n# define __U64_TYPE\t\t__uint64_t\n/* We want __extension__ before typedef's that use nonstandard base types\n   such as `long long' in C89 mode.  */\n# define __STD_TYPE\t\t__extension__ typedef\n#elif __WORDSIZE == 64\n# define __SQUAD_TYPE\t\tlong int\n# define __UQUAD_TYPE\t\tunsigned long int\n# define __SWORD_TYPE\t\tlong int\n# define __UWORD_TYPE\t\tunsigned long int\n# define __SLONG32_TYPE\t\tint\n# define __ULONG32_TYPE\t\tunsigned int\n# define __S64_TYPE\t\tlong int\n# define __U64_TYPE\t\tunsigned long int\n/* No need to mark the typedef with __extension__.   */\n# define __STD_TYPE\t\ttypedef\n#else\n# error\n#endif\n#include <bits/typesizes.h>\t/* Defines __*_T_TYPE macros.  */\n#include <bits/time64.h>\t/* Defines __TIME*_T_TYPE macros.  */\n\n\n__STD_TYPE __DEV_T_TYPE __dev_t;\t/* Type of device numbers.  */\n__STD_TYPE __UID_T_TYPE __uid_t;\t/* Type of user identifications.  */\n__STD_TYPE __GID_T_TYPE __gid_t;\t/* Type of group identifications.  */\n__STD_TYPE __INO_T_TYPE __ino_t;\t/* Type of file serial numbers.  */\n__STD_TYPE __INO64_T_TYPE __ino64_t;\t/* Type of file serial numbers (LFS).*/\n__STD_TYPE __MODE_T_TYPE __mode_t;\t/* Type of file attribute bitmasks.  */\n__STD_TYPE __NLINK_T_TYPE __nlink_t;\t/* Type of file link counts.  */\n__STD_TYPE __OFF_T_TYPE __off_t;\t/* Type of file sizes and offsets.  */\n__STD_TYPE __OFF64_T_TYPE __off64_t;\t/* Type of file sizes and offsets (LFS).  */\n__STD_TYPE __PID_T_TYPE __pid_t;\t/* Type of process identifications.  */\n__STD_TYPE __FSID_T_TYPE __fsid_t;\t/* Type of file system IDs.  */\n__STD_TYPE __CLOCK_T_TYPE __clock_t;\t/* Type of CPU usage counts.  */\n__STD_TYPE __RLIM_T_TYPE __rlim_t;\t/* Type for resource measurement.  */\n__STD_TYPE __RLIM64_T_TYPE __rlim64_t;\t/* Type for resource measurement (LFS).  */\n__STD_TYPE __ID_T_TYPE __id_t;\t\t/* General type for IDs.  */\n__STD_TYPE __TIME_T_TYPE __time_t;\t/* Seconds since the Epoch.  */\n__STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  */\n__STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microseconds.  */\n__STD_TYPE __SUSECONDS64_T_TYPE __suseconds64_t;\n\n__STD_TYPE __DADDR_T_TYPE __daddr_t;\t/* The type of a disk address.  */\n__STD_TYPE __KEY_T_TYPE __key_t;\t/* Type of an IPC key.  */\n\n/* Clock ID used in clock and timer functions.  */\n__STD_TYPE __CLOCKID_T_TYPE __clockid_t;\n\n/* Timer ID returned by `timer_create'.  */\n__STD_TYPE __TIMER_T_TYPE __timer_t;\n\n/* Type to represent block size.  */\n__STD_TYPE __BLKSIZE_T_TYPE __blksize_t;\n\n/* Types from the Large File Support interface.  */\n\n/* Type to count number of disk blocks.  */\n__STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;\n__STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;\n\n/* Type to count file system blocks.  */\n__STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;\n__STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;\n\n/* Type to count file system nodes.  */\n__STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;\n__STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;\n\n/* Type of miscellaneous file system fields.  */\n__STD_TYPE __FSWORD_T_TYPE __fsword_t;\n\n__STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.  */\n\n/* Signed long type used in system calls.  */\n__STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;\n/* Unsigned long type used in system calls.  */\n__STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;\n\n/* These few don't really vary by system, they always correspond\n   to one of the other defined types.  */\ntypedef __off64_t __loff_t;\t/* Type of file sizes and offsets (LFS).  */\ntypedef char *__caddr_t;\n\n/* Duplicates info from stdint.h but this is used in unistd.h.  */\n__STD_TYPE __SWORD_TYPE __intptr_t;\n\n/* Duplicate info from sys/socket.h.  */\n__STD_TYPE __U32_TYPE __socklen_t;\n\n/* C99: An integer type that can be accessed as an atomic entity,\n   even in the presence of asynchronous interrupts.\n   It is not currently necessary for this to be machine-specific.  */\ntypedef int __sig_atomic_t;\n\n/* Seconds since the Epoch, visible to user code when time_t is too\n   narrow only for consistency with the old way of widening too-narrow\n   types.  User code should never use __time64_t.  */\n#if __TIMESIZE == 64 && defined __LIBC\n# define __time64_t __time_t\n#elif __TIMESIZE != 64\n__STD_TYPE __TIME64_T_TYPE __time64_t;\n#endif\n\n#undef __STD_TYPE\n\n#endif /* bits/types.h */\n"}],"crc32":410028819,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]