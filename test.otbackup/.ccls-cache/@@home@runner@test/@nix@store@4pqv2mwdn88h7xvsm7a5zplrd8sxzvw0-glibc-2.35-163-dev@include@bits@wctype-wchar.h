[{"ops":[{"insert":"/* Copyright (C) 1996-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n/*\n *\tISO C99 Standard: 7.25\n *\tWide character classification and mapping utilities  <wctype.h>\n */\n\n#ifndef _BITS_WCTYPE_WCHAR_H\n#define _BITS_WCTYPE_WCHAR_H 1\n\n#if !defined _WCTYPE_H && !defined _WCHAR_H\n#error \"Never include <bits/wctype-wchar.h> directly; include <wctype.h> or <wchar.h> instead.\"\n#endif\n\n#include <bits/types.h>\n#include <bits/types/wint_t.h>\n\n/* The definitions in this header are specified to appear in <wctype.h>\n   in ISO C99, but in <wchar.h> in Unix98.  _GNU_SOURCE follows C99.  */\n\n/* Scalar type that can hold values which represent locale-specific\n   character classifications.  */\ntypedef unsigned long int wctype_t;\n\n# ifndef _ISwbit\n/* The characteristics are stored always in network byte order (big\n   endian).  We define the bit value interpretations here dependent on the\n   machine's byte order.  */\n\n#  include <bits/endian.h>\n#  if __BYTE_ORDER == __BIG_ENDIAN\n#   define _ISwbit(bit)\t(1 << (bit))\n#  else /* __BYTE_ORDER == __LITTLE_ENDIAN */\n#   define _ISwbit(bit)\t\\\n\t((bit) < 8 ? (int) ((1UL << (bit)) << 24)\t\t\t      \\\n\t : ((bit) < 16 ? (int) ((1UL << (bit)) << 8)\t\t\t      \\\n\t    : ((bit) < 24 ? (int) ((1UL << (bit)) >> 8)\t\t\t      \\\n\t       : (int) ((1UL << (bit)) >> 24))))\n#  endif\n\nenum\n{\n  __ISwupper = 0,\t\t\t/* UPPERCASE.  */\n  __ISwlower = 1,\t\t\t/* lowercase.  */\n  __ISwalpha = 2,\t\t\t/* Alphabetic.  */\n  __ISwdigit = 3,\t\t\t/* Numeric.  */\n  __ISwxdigit = 4,\t\t\t/* Hexadecimal numeric.  */\n  __ISwspace = 5,\t\t\t/* Whitespace.  */\n  __ISwprint = 6,\t\t\t/* Printing.  */\n  __ISwgraph = 7,\t\t\t/* Graphical.  */\n  __ISwblank = 8,\t\t\t/* Blank (usually SPC and TAB).  */\n  __ISwcntrl = 9,\t\t\t/* Control character.  */\n  __ISwpunct = 10,\t\t\t/* Punctuation.  */\n  __ISwalnum = 11,\t\t\t/* Alphanumeric.  */\n\n  _ISwupper = _ISwbit (__ISwupper),\t/* UPPERCASE.  */\n  _ISwlower = _ISwbit (__ISwlower),\t/* lowercase.  */\n  _ISwalpha = _ISwbit (__ISwalpha),\t/* Alphabetic.  */\n  _ISwdigit = _ISwbit (__ISwdigit),\t/* Numeric.  */\n  _ISwxdigit = _ISwbit (__ISwxdigit),\t/* Hexadecimal numeric.  */\n  _ISwspace = _ISwbit (__ISwspace),\t/* Whitespace.  */\n  _ISwprint = _ISwbit (__ISwprint),\t/* Printing.  */\n  _ISwgraph = _ISwbit (__ISwgraph),\t/* Graphical.  */\n  _ISwblank = _ISwbit (__ISwblank),\t/* Blank (usually SPC and TAB).  */\n  _ISwcntrl = _ISwbit (__ISwcntrl),\t/* Control character.  */\n  _ISwpunct = _ISwbit (__ISwpunct),\t/* Punctuation.  */\n  _ISwalnum = _ISwbit (__ISwalnum)\t/* Alphanumeric.  */\n};\n# endif /* Not _ISwbit  */\n\n\n__BEGIN_DECLS\n\n/*\n * Wide-character classification functions: 7.15.2.1.\n */\n\n/* Test for any wide character for which `iswalpha' or `iswdigit' is\n   true.  */\nextern int iswalnum (wint_t __wc) __THROW;\n\n/* Test for any wide character for which `iswupper' or 'iswlower' is\n   true, or any wide character that is one of a locale-specific set of\n   wide-characters for which none of `iswcntrl', `iswdigit',\n   `iswpunct', or `iswspace' is true.  */\nextern int iswalpha (wint_t __wc) __THROW;\n\n/* Test for any control wide character.  */\nextern int iswcntrl (wint_t __wc) __THROW;\n\n/* Test for any wide character that corresponds to a decimal-digit\n   character.  */\nextern int iswdigit (wint_t __wc) __THROW;\n\n/* Test for any wide character for which `iswprint' is true and\n   `iswspace' is false.  */\nextern int iswgraph (wint_t __wc) __THROW;\n\n/* Test for any wide character that corresponds to a lowercase letter\n   or is one of a locale-specific set of wide characters for which\n   none of `iswcntrl', `iswdigit', `iswpunct', or `iswspace' is true.  */\nextern int iswlower (wint_t __wc) __THROW;\n\n/* Test for any printing wide character.  */\nextern int iswprint (wint_t __wc) __THROW;\n\n/* Test for any printing wide character that is one of a\n   locale-specific et of wide characters for which neither `iswspace'\n   nor `iswalnum' is true.  */\nextern int iswpunct (wint_t __wc) __THROW;\n\n/* Test for any wide character that corresponds to a locale-specific\n   set of wide characters for which none of `iswalnum', `iswgraph', or\n   `iswpunct' is true.  */\nextern int iswspace (wint_t __wc) __THROW;\n\n/* Test for any wide character that corresponds to an uppercase letter\n   or is one of a locale-specific set of wide character for which none\n   of `iswcntrl', `iswdigit', `iswpunct', or `iswspace' is true.  */\nextern int iswupper (wint_t __wc) __THROW;\n\n/* Test for any wide character that corresponds to a hexadecimal-digit\n   character equivalent to that performed be the functions described\n   in the previous subclause.  */\nextern int iswxdigit (wint_t __wc) __THROW;\n\n/* Test for any wide character that corresponds to a standard blank\n   wide character or a locale-specific set of wide characters for\n   which `iswalnum' is false.  */\n# ifdef __USE_ISOC99\nextern int iswblank (wint_t __wc) __THROW;\n# endif\n\n/*\n * Extensible wide-character classification functions: 7.15.2.2.\n */\n\n/* Construct value that describes a class of wide characters identified\n   by the string argument PROPERTY.  */\nextern wctype_t wctype (const char *__property) __THROW;\n\n/* Determine whether the wide-character WC has the property described by\n   DESC.  */\nextern int iswctype (wint_t __wc, wctype_t __desc) __THROW;\n\n/*\n * Wide-character case-mapping functions: 7.15.3.1.\n */\n\n/* Converts an uppercase letter to the corresponding lowercase letter.  */\nextern wint_t towlower (wint_t __wc) __THROW;\n\n/* Converts an lowercase letter to the corresponding uppercase letter.  */\nextern wint_t towupper (wint_t __wc) __THROW;\n\n__END_DECLS\n\n#endif /* bits/wctype-wchar.h.  */\n"}],"crc32":1693328205,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]