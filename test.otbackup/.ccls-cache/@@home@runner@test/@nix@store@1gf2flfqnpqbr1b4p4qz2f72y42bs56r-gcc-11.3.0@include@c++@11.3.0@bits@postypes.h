[{"ops":[{"insert":"// Position types -*- C++ -*-\n\n// Copyright (C) 1997-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/postypes.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{iosfwd}\n */\n\n//\n// ISO C++ 14882: 27.4.1 - Types\n// ISO C++ 14882: 27.4.3 - Template class fpos\n//\n\n#ifndef _GLIBCXX_POSTYPES_H\n#define _GLIBCXX_POSTYPES_H 1\n\n#pragma GCC system_header\n\n#include <cwchar> // For mbstate_t\n\n// XXX If <stdint.h> is really needed, make sure to define the macros\n// before including it, in order not to break <tr1/cstdint> (and <cstdint>\n// in C++11).  Reconsider all this as soon as possible...\n#if (defined(_GLIBCXX_HAVE_INT64_T) && !defined(_GLIBCXX_HAVE_INT64_T_LONG) \\\n     && !defined(_GLIBCXX_HAVE_INT64_T_LONG_LONG))\n\n#ifndef __STDC_LIMIT_MACROS\n# define _UNDEF__STDC_LIMIT_MACROS\n# define __STDC_LIMIT_MACROS\n#endif\n#ifndef __STDC_CONSTANT_MACROS\n# define _UNDEF__STDC_CONSTANT_MACROS\n# define __STDC_CONSTANT_MACROS\n#endif\n#include <stdint.h> // For int64_t\n#ifdef _UNDEF__STDC_LIMIT_MACROS\n# undef __STDC_LIMIT_MACROS\n# undef _UNDEF__STDC_LIMIT_MACROS\n#endif\n#ifdef _UNDEF__STDC_CONSTANT_MACROS\n# undef __STDC_CONSTANT_MACROS\n# undef _UNDEF__STDC_CONSTANT_MACROS\n#endif\n\n#endif\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  // The types streamoff, streampos and wstreampos and the class\n  // template fpos<> are described in clauses 21.1.2, 21.1.3, 27.1.2,\n  // 27.2, 27.4.1, 27.4.3 and D.6. Despite all this verbiage, the\n  // behaviour of these types is mostly implementation defined or\n  // unspecified. The behaviour in this implementation is as noted\n  // below.\n\n  /**\n   *  @brief  Type used by fpos, char_traits<char>, and char_traits<wchar_t>.\n   *\n   *  In clauses 21.1.3.1 and 27.4.1 streamoff is described as an\n   *  implementation defined type.\n   *  Note: In versions of GCC up to and including GCC 3.3, streamoff\n   *  was typedef long.\n  */  \n#ifdef _GLIBCXX_HAVE_INT64_T_LONG\n  typedef long          streamoff;\n#elif defined(_GLIBCXX_HAVE_INT64_T_LONG_LONG)\n  typedef long long     streamoff;\n#elif defined(_GLIBCXX_HAVE_INT64_T) \n  typedef int64_t       streamoff;\n#else\n  typedef long long     streamoff;\n#endif\n\n  /// Integral type for I/O operation counts and buffer sizes.\n  typedef ptrdiff_t\tstreamsize; // Signed integral type\n\n  /**\n   *  @brief  Class representing stream positions.\n   *\n   *  The standard places no requirements upon the template parameter StateT.\n   *  In this implementation StateT must be DefaultConstructible,\n   *  CopyConstructible and Assignable.  The standard only requires that fpos\n   *  should contain a member of type StateT. In this implementation it also\n   *  contains an offset stored as a signed integer.\n   *\n   *  @param  StateT  Type passed to and returned from state().\n   */\n  template<typename _StateT>\n    class fpos\n    {\n    private:\n      streamoff\t                _M_off;\n      _StateT\t\t\t_M_state;\n\n    public:\n      // The standard doesn't require that fpos objects can be default\n      // constructed. This implementation provides a default\n      // constructor that initializes the offset to 0 and default\n      // constructs the state.\n      fpos()\n      : _M_off(0), _M_state() { }\n\n      // The standard requires that fpos objects can be constructed\n      // from streamoff objects using the constructor syntax, and\n      // fails to give any meaningful semantics. In this\n      // implementation implicit conversion is also allowed, and this\n      // constructor stores the streamoff as the offset and default\n      // constructs the state.\n      /// Construct position from offset.\n      fpos(streamoff __off)\n      : _M_off(__off), _M_state() { }\n\n#if __cplusplus >= 201103L\n      fpos(const fpos&) = default;\n      fpos& operator=(const fpos&) = default;\n      ~fpos() = default;\n#endif\n\n      /// Convert to streamoff.\n      operator streamoff() const { return _M_off; }\n\n      /// Remember the value of @a st.\n      void\n      state(_StateT __st)\n      { _M_state = __st; }\n\n      /// Return the last set value of @a st.\n      _StateT\n      state() const\n      { return _M_state; }\n\n      // The standard requires that this operator must be defined, but\n      // gives no semantics. In this implementation it just adds its\n      // argument to the stored offset and returns *this.\n      /// Add offset to this position.\n      fpos&\n      operator+=(streamoff __off)\n      {\n\t_M_off += __off;\n\treturn *this;\n      }\n\n      // The standard requires that this operator must be defined, but\n      // gives no semantics. In this implementation it just subtracts\n      // its argument from the stored offset and returns *this.\n      /// Subtract offset from this position.\n      fpos&\n      operator-=(streamoff __off)\n      {\n\t_M_off -= __off;\n\treturn *this;\n      }\n\n      // The standard requires that this operator must be defined, but\n      // defines its semantics only in terms of operator-. In this\n      // implementation it constructs a copy of *this, adds the\n      // argument to that copy using operator+= and then returns the\n      // copy.\n      /// Add position and offset.\n      fpos\n      operator+(streamoff __off) const\n      {\n\tfpos __pos(*this);\n\t__pos += __off;\n\treturn __pos;\n      }\n\n      // The standard requires that this operator must be defined, but\n      // defines its semantics only in terms of operator+. In this\n      // implementation it constructs a copy of *this, subtracts the\n      // argument from that copy using operator-= and then returns the\n      // copy.\n      /// Subtract offset from position.\n      fpos\n      operator-(streamoff __off) const\n      {\n\tfpos __pos(*this);\n\t__pos -= __off;\n\treturn __pos;\n      }\n\n      // The standard requires that this operator must be defined, but\n      // defines its semantics only in terms of operator+. In this\n      // implementation it returns the difference between the offset\n      // stored in *this and in the argument.\n      /// Subtract position to return offset.\n      streamoff\n      operator-(const fpos& __other) const\n      { return _M_off - __other._M_off; }\n    };\n\n  // The standard only requires that operator== must be an\n  // equivalence relation. In this implementation two fpos<StateT>\n  // objects belong to the same equivalence class if the contained\n  // offsets compare equal.\n  /// Test if equivalent to another position.\n  template<typename _StateT>\n    inline bool\n    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)\n    { return streamoff(__lhs) == streamoff(__rhs); }\n\n  template<typename _StateT>\n    inline bool\n    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)\n    { return streamoff(__lhs) != streamoff(__rhs); }\n\n  // Clauses 21.1.3.1 and 21.1.3.2 describe streampos and wstreampos\n  // as implementation defined types, but clause 27.2 requires that\n  // they must both be typedefs for fpos<mbstate_t>\n  /// File position for char streams.\n  typedef fpos<mbstate_t> streampos;\n  /// File position for wchar_t streams.\n  typedef fpos<mbstate_t> wstreampos;\n\n#ifdef _GLIBCXX_USE_CHAR8_T\n  /// File position for char8_t streams.\n  typedef fpos<mbstate_t> u8streampos;\n#endif\n\n#if __cplusplus >= 201103L\n  /// File position for char16_t streams.\n  typedef fpos<mbstate_t> u16streampos;\n  /// File position for char32_t streams.\n  typedef fpos<mbstate_t> u32streampos;\n#endif\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n\n#endif\n"}],"crc32":575608777,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]