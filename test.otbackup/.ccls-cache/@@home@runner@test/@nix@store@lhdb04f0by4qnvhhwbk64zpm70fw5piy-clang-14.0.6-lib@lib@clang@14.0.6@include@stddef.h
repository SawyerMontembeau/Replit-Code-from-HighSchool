[{"ops":[{"insert":"/*===---- stddef.h - Basic type definitions --------------------------------===\n *\n * Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n * See https://llvm.org/LICENSE.txt for license information.\n * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n *\n *===-----------------------------------------------------------------------===\n */\n\n#if !defined(__STDDEF_H) || defined(__need_ptrdiff_t) ||                       \\\n    defined(__need_size_t) || defined(__need_wchar_t) ||                       \\\n    defined(__need_NULL) || defined(__need_wint_t)\n\n#if !defined(__need_ptrdiff_t) && !defined(__need_size_t) &&                   \\\n    !defined(__need_wchar_t) && !defined(__need_NULL) &&                       \\\n    !defined(__need_wint_t)\n/* Always define miscellaneous pieces when modules are available. */\n#if !__has_feature(modules)\n#define __STDDEF_H\n#endif\n#define __need_ptrdiff_t\n#define __need_size_t\n#define __need_wchar_t\n#define __need_NULL\n#define __need_STDDEF_H_misc\n/* __need_wint_t is intentionally not defined here. */\n#endif\n\n#if defined(__need_ptrdiff_t)\n#if !defined(_PTRDIFF_T) || __has_feature(modules)\n/* Always define ptrdiff_t when modules are available. */\n#if !__has_feature(modules)\n#define _PTRDIFF_T\n#endif\ntypedef __PTRDIFF_TYPE__ ptrdiff_t;\n#endif\n#undef __need_ptrdiff_t\n#endif /* defined(__need_ptrdiff_t) */\n\n#if defined(__need_size_t)\n#if !defined(_SIZE_T) || __has_feature(modules)\n/* Always define size_t when modules are available. */\n#if !__has_feature(modules)\n#define _SIZE_T\n#endif\ntypedef __SIZE_TYPE__ size_t;\n#endif\n#undef __need_size_t\n#endif /*defined(__need_size_t) */\n\n#if defined(__need_STDDEF_H_misc)\n/* ISO9899:2011 7.20 (C11 Annex K): Define rsize_t if __STDC_WANT_LIB_EXT1__ is\n * enabled. */\n#if (defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1 && \\\n     !defined(_RSIZE_T)) || __has_feature(modules)\n/* Always define rsize_t when modules are available. */\n#if !__has_feature(modules)\n#define _RSIZE_T\n#endif\ntypedef __SIZE_TYPE__ rsize_t;\n#endif\n#endif /* defined(__need_STDDEF_H_misc) */\n\n#if defined(__need_wchar_t)\n#ifndef __cplusplus\n/* Always define wchar_t when modules are available. */\n#if !defined(_WCHAR_T) || __has_feature(modules)\n#if !__has_feature(modules)\n#define _WCHAR_T\n#if defined(_MSC_EXTENSIONS)\n#define _WCHAR_T_DEFINED\n#endif\n#endif\ntypedef __WCHAR_TYPE__ wchar_t;\n#endif\n#endif\n#undef __need_wchar_t\n#endif /* defined(__need_wchar_t) */\n\n#if defined(__need_NULL)\n#undef NULL\n#ifdef __cplusplus\n#  if !defined(__MINGW32__) && !defined(_MSC_VER)\n#    define NULL __null\n#  else\n#    define NULL 0\n#  endif\n#else\n#  define NULL ((void*)0)\n#endif\n#ifdef __cplusplus\n#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)\nnamespace std { typedef decltype(nullptr) nullptr_t; }\nusing ::std::nullptr_t;\n#endif\n#endif\n#undef __need_NULL\n#endif /* defined(__need_NULL) */\n\n#if defined(__need_STDDEF_H_misc)\n#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L\n#include \"__stddef_max_align_t.h\"\n#endif\n#define offsetof(t, d) __builtin_offsetof(t, d)\n#undef __need_STDDEF_H_misc\n#endif  /* defined(__need_STDDEF_H_misc) */\n\n/* Some C libraries expect to see a wint_t here. Others (notably MinGW) will use\n__WINT_TYPE__ directly; accommodate both by requiring __need_wint_t */\n#if defined(__need_wint_t)\n/* Always define wint_t when modules are available. */\n#if !defined(_WINT_T) || __has_feature(modules)\n#if !__has_feature(modules)\n#define _WINT_T\n#endif\ntypedef __WINT_TYPE__ wint_t;\n#endif\n#undef __need_wint_t\n#endif /* __need_wint_t */\n\n#endif\n"}],"crc32":4168482378,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]