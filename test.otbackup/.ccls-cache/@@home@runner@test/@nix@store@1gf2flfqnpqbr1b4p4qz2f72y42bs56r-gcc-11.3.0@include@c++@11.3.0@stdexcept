[{"ops":[{"insert":"// Standard exception classes  -*- C++ -*-\n\n// Copyright (C) 2001-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file include/stdexcept\n *  This is a Standard C++ Library header.\n */\n\n//\n// ISO C++ 19.1  Exception classes\n//\n\n#ifndef _GLIBCXX_STDEXCEPT\n#define _GLIBCXX_STDEXCEPT 1\n\n#pragma GCC system_header\n\n#include <exception>\n#include <string>\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n#if _GLIBCXX_USE_DUAL_ABI\n#if _GLIBCXX_USE_CXX11_ABI\n  // Emulates an old COW string when the new std::string is in use.\n  struct __cow_string\n  {\n    union {\n      const char* _M_p;\n      char _M_bytes[sizeof(const char*)];\n    };\n\n    __cow_string();\n    __cow_string(const std::string&);\n    __cow_string(const char*, size_t);\n    __cow_string(const __cow_string&) _GLIBCXX_NOTHROW;\n    __cow_string& operator=(const __cow_string&) _GLIBCXX_NOTHROW;\n    ~__cow_string();\n#if __cplusplus >= 201103L\n    __cow_string(__cow_string&&) noexcept;\n    __cow_string& operator=(__cow_string&&) noexcept;\n#endif\n  };\n\n  typedef basic_string<char> __sso_string;\n#else // _GLIBCXX_USE_CXX11_ABI\n  typedef basic_string<char> __cow_string;\n\n  // Emulates a new SSO string when the old std::string is in use.\n  struct __sso_string\n  {\n    struct __str\n    {\n      const char* _M_p;\n      size_t _M_string_length;\n      char _M_local_buf[16];\n    };\n\n    union {\n      __str _M_s;\n      char _M_bytes[sizeof(__str)];\n    };\n\n    __sso_string() _GLIBCXX_NOTHROW;\n    __sso_string(const std::string&);\n    __sso_string(const char*, size_t);\n    __sso_string(const __sso_string&);\n    __sso_string& operator=(const __sso_string&);\n    ~__sso_string();\n#if __cplusplus >= 201103L\n    __sso_string(__sso_string&&) noexcept;\n    __sso_string& operator=(__sso_string&&) noexcept;\n#endif\n  };\n#endif // _GLIBCXX_USE_CXX11_ABI\n#else  // _GLIBCXX_USE_DUAL_ABI\n  typedef basic_string<char> __sso_string;\n  typedef basic_string<char> __cow_string;\n#endif\n\n  /**\n   * @addtogroup exceptions\n   * @{\n   */\n\n  /** Logic errors represent problems in the internal logic of a program;\n   *  in theory, these are preventable, and even detectable before the\n   *  program runs (e.g., violations of class invariants).\n   *  @brief One of two subclasses of exception.\n   */\n  class logic_error : public exception\n  {\n    __cow_string _M_msg;\n\n  public:\n    /** Takes a character string describing the error.  */\n    explicit\n    logic_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n\n#if __cplusplus >= 201103L\n    explicit\n    logic_error(const char*) _GLIBCXX_TXN_SAFE;\n\n    logic_error(logic_error&&) noexcept;\n    logic_error& operator=(logic_error&&) noexcept;\n#endif\n\n#if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS\n    logic_error(const logic_error&) _GLIBCXX_NOTHROW;\n    logic_error& operator=(const logic_error&) _GLIBCXX_NOTHROW;\n#elif __cplusplus >= 201103L\n    logic_error(const logic_error&) = default;\n    logic_error& operator=(const logic_error&) = default;\n#endif\n\n    virtual ~logic_error() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n\n    /** Returns a C-style character string describing the general cause of\n     *  the current error (the same string passed to the ctor).  */\n    virtual const char*\n    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n\n# ifdef _GLIBCXX_TM_TS_INTERNAL\n    friend void*\n    ::_txnal_logic_error_get_msg(void* e);\n# endif\n  };\n\n  /** Thrown by the library, or by you, to report domain errors (domain in\n   *  the mathematical sense).  */\n  class domain_error : public logic_error\n  {\n  public:\n    explicit domain_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n#if __cplusplus >= 201103L\n    explicit domain_error(const char*) _GLIBCXX_TXN_SAFE;\n    domain_error(const domain_error&) = default;\n    domain_error& operator=(const domain_error&) = default;\n    domain_error(domain_error&&) = default;\n    domain_error& operator=(domain_error&&) = default;\n#endif\n    virtual ~domain_error() _GLIBCXX_NOTHROW;\n  };\n\n  /** Thrown to report invalid arguments to functions.  */\n  class invalid_argument : public logic_error\n  {\n  public:\n    explicit invalid_argument(const string& __arg) _GLIBCXX_TXN_SAFE;\n#if __cplusplus >= 201103L\n    explicit invalid_argument(const char*) _GLIBCXX_TXN_SAFE;\n    invalid_argument(const invalid_argument&) = default;\n    invalid_argument& operator=(const invalid_argument&) = default;\n    invalid_argument(invalid_argument&&) = default;\n    invalid_argument& operator=(invalid_argument&&) = default;\n#endif\n    virtual ~invalid_argument() _GLIBCXX_NOTHROW;\n  };\n\n  /** Thrown when an object is constructed that would exceed its maximum\n   *  permitted size (e.g., a basic_string instance).  */\n  class length_error : public logic_error\n  {\n  public:\n    explicit length_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n#if __cplusplus >= 201103L\n    explicit length_error(const char*) _GLIBCXX_TXN_SAFE;\n    length_error(const length_error&) = default;\n    length_error& operator=(const length_error&) = default;\n    length_error(length_error&&) = default;\n    length_error& operator=(length_error&&) = default;\n#endif\n    virtual ~length_error() _GLIBCXX_NOTHROW;\n  };\n\n  /** This represents an argument whose value is not within the expected\n   *  range (e.g., boundary checks in basic_string).  */\n  class out_of_range : public logic_error\n  {\n  public:\n    explicit out_of_range(const string& __arg) _GLIBCXX_TXN_SAFE;\n#if __cplusplus >= 201103L\n    explicit out_of_range(const char*) _GLIBCXX_TXN_SAFE;\n    out_of_range(const out_of_range&) = default;\n    out_of_range& operator=(const out_of_range&) = default;\n    out_of_range(out_of_range&&) = default;\n    out_of_range& operator=(out_of_range&&) = default;\n#endif\n    virtual ~out_of_range() _GLIBCXX_NOTHROW;\n  };\n\n  /** Runtime errors represent problems outside the scope of a program;\n   *  they cannot be easily predicted and can generally only be caught as\n   *  the program executes.\n   *  @brief One of two subclasses of exception.\n   */\n  class runtime_error : public exception\n  {\n    __cow_string _M_msg;\n\n  public:\n    /** Takes a character string describing the error.  */\n    explicit\n    runtime_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n\n#if __cplusplus >= 201103L\n    explicit\n    runtime_error(const char*) _GLIBCXX_TXN_SAFE;\n\n    runtime_error(runtime_error&&) noexcept;\n    runtime_error& operator=(runtime_error&&) noexcept;\n#endif\n\n#if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS\n    runtime_error(const runtime_error&) _GLIBCXX_NOTHROW;\n    runtime_error& operator=(const runtime_error&) _GLIBCXX_NOTHROW;\n#elif __cplusplus >= 201103L\n    runtime_error(const runtime_error&) = default;\n    runtime_error& operator=(const runtime_error&) = default;\n#endif\n\n    virtual ~runtime_error() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n\n    /** Returns a C-style character string describing the general cause of\n     *  the current error (the same string passed to the ctor).  */\n    virtual const char*\n    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n\n# ifdef _GLIBCXX_TM_TS_INTERNAL\n    friend void*\n    ::_txnal_runtime_error_get_msg(void* e);\n# endif\n  };\n\n  /** Thrown to indicate range errors in internal computations.  */\n  class range_error : public runtime_error\n  {\n  public:\n    explicit range_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n#if __cplusplus >= 201103L\n    explicit range_error(const char*) _GLIBCXX_TXN_SAFE;\n    range_error(const range_error&) = default;\n    range_error& operator=(const range_error&) = default;\n    range_error(range_error&&) = default;\n    range_error& operator=(range_error&&) = default;\n#endif\n    virtual ~range_error() _GLIBCXX_NOTHROW;\n  };\n\n  /** Thrown to indicate arithmetic overflow.  */\n  class overflow_error : public runtime_error\n  {\n  public:\n    explicit overflow_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n#if __cplusplus >= 201103L\n    explicit overflow_error(const char*) _GLIBCXX_TXN_SAFE;\n    overflow_error(const overflow_error&) = default;\n    overflow_error& operator=(const overflow_error&) = default;\n    overflow_error(overflow_error&&) = default;\n    overflow_error& operator=(overflow_error&&) = default;\n#endif\n    virtual ~overflow_error() _GLIBCXX_NOTHROW;\n  };\n\n  /** Thrown to indicate arithmetic underflow.  */\n  class underflow_error : public runtime_error\n  {\n  public:\n    explicit underflow_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n#if __cplusplus >= 201103L\n    explicit underflow_error(const char*) _GLIBCXX_TXN_SAFE;\n    underflow_error(const underflow_error&) = default;\n    underflow_error& operator=(const underflow_error&) = default;\n    underflow_error(underflow_error&&) = default;\n    underflow_error& operator=(underflow_error&&) = default;\n#endif\n    virtual ~underflow_error() _GLIBCXX_NOTHROW;\n  };\n\n  /// @} group exceptions\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n\n#endif /* _GLIBCXX_STDEXCEPT */\n"}],"crc32":77030731,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]