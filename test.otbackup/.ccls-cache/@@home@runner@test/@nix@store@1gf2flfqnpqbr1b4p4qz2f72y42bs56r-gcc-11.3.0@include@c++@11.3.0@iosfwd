[{"ops":[{"insert":"// <iosfwd> Forward declarations -*- C++ -*-\n\n// Copyright (C) 1997-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file include/iosfwd\n *  This is a Standard C++ Library header.\n */\n\n//\n// ISO C++ 14882: 27.2  Forward declarations\n//\n\n#ifndef _GLIBCXX_IOSFWD\n#define _GLIBCXX_IOSFWD 1\n\n#pragma GCC system_header\n\n#include <bits/c++config.h>\n#include <bits/stringfwd.h> \t// For string forward declarations.\n#include <bits/postypes.h>\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  /**\n   *  @defgroup io I/O\n   *\n   *  Nearly all of the I/O classes are parameterized on the type of\n   *  characters they read and write.  (The major exception is ios_base at\n   *  the top of the hierarchy.)  This is a change from pre-Standard\n   *  streams, which were not templates.\n   *\n   *  For ease of use and compatibility, all of the basic_* I/O-related\n   *  classes are given typedef names for both of the builtin character\n   *  widths (wide and narrow).  The typedefs are the same as the\n   *  pre-Standard names, for example:\n   *\n   *  @code\n   *     typedef basic_ifstream<char>  ifstream;\n   *  @endcode\n   *\n   *  Because properly forward-declaring these classes can be difficult, you\n   *  should not do it yourself.  Instead, include the &lt;iosfwd&gt;\n   *  header, which contains only declarations of all the I/O classes as\n   *  well as the typedefs.  Trying to forward-declare the typedefs\n   *  themselves (e.g., <code>class ostream;</code>) is not valid ISO C++.\n   *\n   *  For more specific declarations, see\n   *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html#std.io.objects\n   *\n   *  @{\n  */\n  class ios_base;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_ios;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_streambuf;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_istream;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_ostream;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_iostream;\n\n\n_GLIBCXX_BEGIN_NAMESPACE_CXX11\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n\t    typename _Alloc = allocator<_CharT> >\n    class basic_stringbuf;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n\t   typename _Alloc = allocator<_CharT> >\n    class basic_istringstream;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n\t   typename _Alloc = allocator<_CharT> >\n    class basic_ostringstream;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n\t   typename _Alloc = allocator<_CharT> >\n    class basic_stringstream;\n\n_GLIBCXX_END_NAMESPACE_CXX11\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_filebuf;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_ifstream;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_ofstream;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class basic_fstream;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class istreambuf_iterator;\n\n  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n    class ostreambuf_iterator;\n\n\n  /// Base class for @c char streams.\n  typedef basic_ios<char> \t\tios;\n\n  /// Base class for @c char buffers.\n  typedef basic_streambuf<char> \tstreambuf;\n\n  /// Base class for @c char input streams.\n  typedef basic_istream<char> \t\tistream;\n\n  /// Base class for @c char output streams.\n  typedef basic_ostream<char> \t\tostream;\n\n  /// Base class for @c char mixed input and output streams.\n  typedef basic_iostream<char> \t\tiostream;\n\n  /// Class for @c char memory buffers.\n  typedef basic_stringbuf<char> \tstringbuf;\n\n  /// Class for @c char input memory streams.\n  typedef basic_istringstream<char> \tistringstream;\n\n  /// Class for @c char output memory streams.\n  typedef basic_ostringstream<char> \tostringstream;\n\n  /// Class for @c char mixed input and output memory streams.\n  typedef basic_stringstream<char> \tstringstream;\n\n  /// Class for @c char file buffers.\n  typedef basic_filebuf<char> \t\tfilebuf;\n\n  /// Class for @c char input file streams.\n  typedef basic_ifstream<char> \t\tifstream;\n\n  /// Class for @c char output file streams.\n  typedef basic_ofstream<char> \t\tofstream;\n\n  /// Class for @c char mixed input and output file streams.\n  typedef basic_fstream<char> \t\tfstream;\n\n#ifdef _GLIBCXX_USE_WCHAR_T\n  /// Base class for @c wchar_t streams.\n  typedef basic_ios<wchar_t> \t\twios;\n\n  /// Base class for @c wchar_t buffers.\n  typedef basic_streambuf<wchar_t> \twstreambuf;\n\n  /// Base class for @c wchar_t input streams.\n  typedef basic_istream<wchar_t> \twistream;\n\n  /// Base class for @c wchar_t output streams.\n  typedef basic_ostream<wchar_t> \twostream;\n\n  /// Base class for @c wchar_t mixed input and output streams.\n  typedef basic_iostream<wchar_t> \twiostream;\n\n  /// Class for @c wchar_t memory buffers.\n  typedef basic_stringbuf<wchar_t> \twstringbuf;\n\n  /// Class for @c wchar_t input memory streams.\n  typedef basic_istringstream<wchar_t> \twistringstream;\n\n  /// Class for @c wchar_t output memory streams.\n  typedef basic_ostringstream<wchar_t> \twostringstream;\n\n  /// Class for @c wchar_t mixed input and output memory streams.\n  typedef basic_stringstream<wchar_t> \twstringstream;\n\n  /// Class for @c wchar_t file buffers.\n  typedef basic_filebuf<wchar_t> \twfilebuf;\n\n  /// Class for @c wchar_t input file streams.\n  typedef basic_ifstream<wchar_t> \twifstream;\n\n  /// Class for @c wchar_t output file streams.\n  typedef basic_ofstream<wchar_t> \twofstream;\n\n  /// Class for @c wchar_t mixed input and output file streams.\n  typedef basic_fstream<wchar_t> \twfstream;\n#endif\n  /** @}  */\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n\n#endif /* _GLIBCXX_IOSFWD */\n"}],"crc32":346077709,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]