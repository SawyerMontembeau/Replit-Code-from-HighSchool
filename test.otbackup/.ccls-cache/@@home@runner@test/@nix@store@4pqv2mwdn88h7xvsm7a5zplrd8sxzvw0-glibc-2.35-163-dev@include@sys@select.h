[{"ops":[{"insert":"/* `fd_set' type and related macros, and `select'/`pselect' declarations.\n   Copyright (C) 1996-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n/*\tPOSIX 1003.1g: 6.2 Select from File Descriptor Sets <sys/select.h>  */\n\n#ifndef _SYS_SELECT_H\n#define _SYS_SELECT_H\t1\n\n#include <features.h>\n\n/* Get definition of needed basic types.  */\n#include <bits/types.h>\n\n/* Get __FD_* definitions.  */\n#include <bits/select.h>\n\n/* Get sigset_t.  */\n#include <bits/types/sigset_t.h>\n\n/* Get definition of timer specification structures.  */\n#include <bits/types/time_t.h>\n#include <bits/types/struct_timeval.h>\n#ifdef __USE_XOPEN2K\n# include <bits/types/struct_timespec.h>\n#endif\n\n#ifndef __suseconds_t_defined\ntypedef __suseconds_t suseconds_t;\n# define __suseconds_t_defined\n#endif\n\n\n/* The fd_set member is required to be an array of longs.  */\ntypedef long int __fd_mask;\n\n/* Some versions of <linux/posix_types.h> define this macros.  */\n#undef\t__NFDBITS\n/* It's easier to assume 8-bit bytes than to get CHAR_BIT.  */\n#define __NFDBITS\t(8 * (int) sizeof (__fd_mask))\n#define\t__FD_ELT(d)\t((d) / __NFDBITS)\n#define\t__FD_MASK(d)\t((__fd_mask) (1UL << ((d) % __NFDBITS)))\n\n/* fd_set for select and pselect.  */\ntypedef struct\n  {\n    /* XPG4.2 requires this member name.  Otherwise avoid the name\n       from the global namespace.  */\n#ifdef __USE_XOPEN\n    __fd_mask fds_bits[__FD_SETSIZE / __NFDBITS];\n# define __FDS_BITS(set) ((set)->fds_bits)\n#else\n    __fd_mask __fds_bits[__FD_SETSIZE / __NFDBITS];\n# define __FDS_BITS(set) ((set)->__fds_bits)\n#endif\n  } fd_set;\n\n/* Maximum number of file descriptors in `fd_set'.  */\n#define\tFD_SETSIZE\t\t__FD_SETSIZE\n\n#ifdef __USE_MISC\n/* Sometimes the fd_set member is assumed to have this type.  */\ntypedef __fd_mask fd_mask;\n\n/* Number of bits per word of `fd_set' (some code assumes this is 32).  */\n# define NFDBITS\t\t__NFDBITS\n#endif\n\n\n/* Access macros for `fd_set'.  */\n#define\tFD_SET(fd, fdsetp)\t__FD_SET (fd, fdsetp)\n#define\tFD_CLR(fd, fdsetp)\t__FD_CLR (fd, fdsetp)\n#define\tFD_ISSET(fd, fdsetp)\t__FD_ISSET (fd, fdsetp)\n#define\tFD_ZERO(fdsetp)\t\t__FD_ZERO (fdsetp)\n\n\n__BEGIN_DECLS\n\n/* Check the first NFDS descriptors each in READFDS (if not NULL) for read\n   readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS\n   (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out\n   after waiting the interval specified therein.  Returns the number of ready\n   descriptors, or -1 for errors.\n\n   This function is a cancellation point and therefore not marked with\n   __THROW.  */\n#ifndef __USE_TIME_BITS64\nextern int select (int __nfds, fd_set *__restrict __readfds,\n\t\t   fd_set *__restrict __writefds,\n\t\t   fd_set *__restrict __exceptfds,\n\t\t   struct timeval *__restrict __timeout);\n#else\n# ifdef __REDIRECT\nextern int __REDIRECT (select,\n                       (int __nfds, fd_set *__restrict __readfds,\n                        fd_set *__restrict __writefds,\n                        fd_set *__restrict __exceptfds,\n                        struct timeval *__restrict __timeout),\n                       __select64);\n# else\n#  define select __select64\n# endif\n#endif\n\n#ifdef __USE_XOPEN2K\n/* Same as above only that the TIMEOUT value is given with higher\n   resolution and a sigmask which is been set temporarily.  This version\n   should be used.\n\n   This function is a cancellation point and therefore not marked with\n   __THROW.  */\n# ifndef __USE_TIME_BITS64\nextern int pselect (int __nfds, fd_set *__restrict __readfds,\n\t\t    fd_set *__restrict __writefds,\n\t\t    fd_set *__restrict __exceptfds,\n\t\t    const struct timespec *__restrict __timeout,\n\t\t    const __sigset_t *__restrict __sigmask);\n# else\n#  ifdef __REDIRECT\nextern int __REDIRECT (pselect,\n                       (int __nfds, fd_set *__restrict __readfds,\n                        fd_set *__restrict __writefds,\n                        fd_set *__restrict __exceptfds,\n                        const struct timespec *__restrict __timeout,\n                        const __sigset_t *__restrict __sigmask),\n                       __pselect64);\n#  else\n#   define pselect __pselect64\n#  endif\n# endif\n#endif\n\n\n/* Define some inlines helping to catch common problems.  */\n#if __USE_FORTIFY_LEVEL > 0 && defined __GNUC__\n# include <bits/select2.h>\n#endif\n\n__END_DECLS\n\n#endif /* sys/select.h */\n"}],"crc32":4016404558,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]