[{"ops":[{"insert":"// -*- C++ -*- forwarding header.\n\n// Copyright (C) 1997-2021 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file include/cwchar\n *  This is a Standard C++ Library file.  You should @c \\#include this file\n *  in your programs, rather than any of the @a *.h implementation files.\n *\n *  This is the C++ version of the Standard C Library header @c wchar.h,\n *  and its contents are (mostly) the same as that header, but are all\n *  contained in the namespace @c std (except for names which are defined\n *  as macros in C).\n */\n\n//\n// ISO C++ 14882: 21.4\n//\n\n#pragma GCC system_header\n\n#include <bits/c++config.h>\n\n#if _GLIBCXX_HAVE_WCHAR_H\n#include <wchar.h>\n#endif\n\n#ifndef _GLIBCXX_CWCHAR\n#define _GLIBCXX_CWCHAR 1\n\n// Need to do a bit of trickery here with mbstate_t as char_traits\n// assumes it is in wchar.h, regardless of wchar_t specializations.\n#ifndef _GLIBCXX_HAVE_MBSTATE_T\nextern \"C\"\n{\n  typedef struct\n  {\n    int __fill[6];\n  } mbstate_t;\n}\n#endif\n\nnamespace std\n{\n  using ::mbstate_t;\n} // namespace std\n\n// Get rid of those macros defined in <wchar.h> in lieu of real functions.\n#undef btowc\n#undef fgetwc\n#undef fgetws\n#undef fputwc\n#undef fputws\n#undef fwide\n#undef fwprintf\n#undef fwscanf\n#undef getwc\n#undef getwchar\n#undef mbrlen\n#undef mbrtowc\n#undef mbsinit\n#undef mbsrtowcs\n#undef putwc\n#undef putwchar\n#undef swprintf\n#undef swscanf\n#undef ungetwc\n#undef vfwprintf\n#if _GLIBCXX_HAVE_VFWSCANF\n# undef vfwscanf\n#endif\n#undef vswprintf\n#if _GLIBCXX_HAVE_VSWSCANF\n# undef vswscanf\n#endif\n#undef vwprintf\n#if _GLIBCXX_HAVE_VWSCANF\n# undef vwscanf\n#endif\n#undef wcrtomb\n#undef wcscat\n#undef wcschr\n#undef wcscmp\n#undef wcscoll\n#undef wcscpy\n#undef wcscspn\n#undef wcsftime\n#undef wcslen\n#undef wcsncat\n#undef wcsncmp\n#undef wcsncpy\n#undef wcspbrk\n#undef wcsrchr\n#undef wcsrtombs\n#undef wcsspn\n#undef wcsstr\n#undef wcstod\n#if _GLIBCXX_HAVE_WCSTOF\n# undef wcstof\n#endif\n#undef wcstok\n#undef wcstol\n#undef wcstoul\n#undef wcsxfrm\n#undef wctob\n#undef wmemchr\n#undef wmemcmp\n#undef wmemcpy\n#undef wmemmove\n#undef wmemset\n#undef wprintf\n#undef wscanf\n\n#if _GLIBCXX_USE_WCHAR_T\n\nextern \"C++\"\n{\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\n  using ::wint_t;\n\n  using ::btowc;\n  using ::fgetwc;\n  using ::fgetws;\n  using ::fputwc;\n  using ::fputws;\n  using ::fwide;\n  using ::fwprintf;\n  using ::fwscanf;\n  using ::getwc;\n  using ::getwchar;\n  using ::mbrlen;\n  using ::mbrtowc;\n  using ::mbsinit;\n  using ::mbsrtowcs;\n  using ::putwc;\n  using ::putwchar;\n#ifndef _GLIBCXX_HAVE_BROKEN_VSWPRINTF\n  using ::swprintf;\n#endif\n  using ::swscanf;\n  using ::ungetwc;\n  using ::vfwprintf;\n#if _GLIBCXX_HAVE_VFWSCANF\n  using ::vfwscanf;\n#endif\n#ifndef _GLIBCXX_HAVE_BROKEN_VSWPRINTF\n  using ::vswprintf;\n#endif\n#if _GLIBCXX_HAVE_VSWSCANF\n  using ::vswscanf;\n#endif\n  using ::vwprintf;\n#if _GLIBCXX_HAVE_VWSCANF\n  using ::vwscanf;\n#endif\n  using ::wcrtomb;\n  using ::wcscat;\n  using ::wcscmp;\n  using ::wcscoll;\n  using ::wcscpy;\n  using ::wcscspn;\n  using ::wcsftime;\n  using ::wcslen;\n  using ::wcsncat;\n  using ::wcsncmp;\n  using ::wcsncpy;\n  using ::wcsrtombs;\n  using ::wcsspn;\n  using ::wcstod;\n#if _GLIBCXX_HAVE_WCSTOF\n  using ::wcstof;\n#endif\n  using ::wcstok;\n  using ::wcstol;\n  using ::wcstoul;\n  using ::wcsxfrm;\n  using ::wctob;\n  using ::wmemcmp;\n  using ::wmemcpy;\n  using ::wmemmove;\n  using ::wmemset;\n  using ::wprintf;\n  using ::wscanf;\n  using ::wcschr;\n  using ::wcspbrk;\n  using ::wcsrchr;\n  using ::wcsstr;\n  using ::wmemchr;\n\n#ifndef __CORRECT_ISO_CPP_WCHAR_H_PROTO\n  inline wchar_t*\n  wcschr(wchar_t* __p, wchar_t __c)\n  { return wcschr(const_cast<const wchar_t*>(__p), __c); }\n\n  inline wchar_t*\n  wcspbrk(wchar_t* __s1, const wchar_t* __s2)\n  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }\n\n  inline wchar_t*\n  wcsrchr(wchar_t* __p, wchar_t __c)\n  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }\n\n  inline wchar_t*\n  wcsstr(wchar_t* __s1, const wchar_t* __s2)\n  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }\n\n  inline wchar_t*\n  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)\n  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }\n#endif\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n} // extern \"C++\"\n\n#if _GLIBCXX_USE_C99_WCHAR\n\n#undef wcstold\n#undef wcstoll\n#undef wcstoull\n\nnamespace __gnu_cxx\n{\n#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n  extern \"C\" long double\n    (wcstold)(const wchar_t * __restrict, wchar_t ** __restrict) throw ();\n#endif\n#if !_GLIBCXX_USE_C99_DYNAMIC\n  using ::wcstold;\n#endif\n#if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n  extern \"C\" long long int\n    (wcstoll)(const wchar_t * __restrict, wchar_t ** __restrict, int) throw ();\n  extern \"C\" unsigned long long int\n    (wcstoull)(const wchar_t * __restrict, wchar_t ** __restrict, int) throw ();\n#endif\n#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n  using ::wcstoll;\n  using ::wcstoull;\n#endif\n} // namespace __gnu_cxx\n\nnamespace std\n{\n  using ::__gnu_cxx::wcstold;\n  using ::__gnu_cxx::wcstoll;\n  using ::__gnu_cxx::wcstoull;\n} // namespace\n\n#endif\n\n#endif //_GLIBCXX_USE_WCHAR_T\n\n#if __cplusplus >= 201103L\n\n#ifdef _GLIBCXX_USE_WCHAR_T\n\nnamespace std\n{\n#if _GLIBCXX_HAVE_WCSTOF\n  using std::wcstof;\n#endif\n#if _GLIBCXX_HAVE_VFWSCANF\n  using std::vfwscanf;\n#endif\n#if _GLIBCXX_HAVE_VSWSCANF\n  using std::vswscanf;\n#endif\n#if _GLIBCXX_HAVE_VWSCANF\n  using std::vwscanf;\n#endif\n\n#if _GLIBCXX_USE_C99_WCHAR\n  using std::wcstold;\n  using std::wcstoll;\n  using std::wcstoull;\n#endif\n} // namespace\n\n#endif // _GLIBCXX_USE_WCHAR_T\n\n#endif // C++11\n\n#endif\n"}],"crc32":2200132724,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]