[{"ops":[{"insert":"/* Declaration of common pthread types for all architectures.\n   Copyright (C) 2017-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n#ifndef _BITS_PTHREADTYPES_COMMON_H\n# define _BITS_PTHREADTYPES_COMMON_H\t1\n\n/* For internal mutex and condition variable definitions.  */\n#include <bits/thread-shared-types.h>\n\n/* Thread identifiers.  The structure of the attribute type is not\n   exposed on purpose.  */\ntypedef unsigned long int pthread_t;\n\n\n/* Data structures for mutex handling.  The structure of the attribute\n   type is not exposed on purpose.  */\ntypedef union\n{\n  char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];\n  int __align;\n} pthread_mutexattr_t;\n\n\n/* Data structure for condition variable handling.  The structure of\n   the attribute type is not exposed on purpose.  */\ntypedef union\n{\n  char __size[__SIZEOF_PTHREAD_CONDATTR_T];\n  int __align;\n} pthread_condattr_t;\n\n\n/* Keys for thread-specific data */\ntypedef unsigned int pthread_key_t;\n\n\n/* Once-only execution */\ntypedef int __ONCE_ALIGNMENT pthread_once_t;\n\n\nunion pthread_attr_t\n{\n  char __size[__SIZEOF_PTHREAD_ATTR_T];\n  long int __align;\n};\n#ifndef __have_pthread_attr_t\ntypedef union pthread_attr_t pthread_attr_t;\n# define __have_pthread_attr_t 1\n#endif\n\n\ntypedef union\n{\n  struct __pthread_mutex_s __data;\n  char __size[__SIZEOF_PTHREAD_MUTEX_T];\n  long int __align;\n} pthread_mutex_t;\n\n\ntypedef union\n{\n  struct __pthread_cond_s __data;\n  char __size[__SIZEOF_PTHREAD_COND_T];\n  __extension__ long long int __align;\n} pthread_cond_t;\n\n\n#if defined __USE_UNIX98 || defined __USE_XOPEN2K\n/* Data structure for reader-writer lock variable handling.  The\n   structure of the attribute type is deliberately not exposed.  */\ntypedef union\n{\n  struct __pthread_rwlock_arch_t __data;\n  char __size[__SIZEOF_PTHREAD_RWLOCK_T];\n  long int __align;\n} pthread_rwlock_t;\n\ntypedef union\n{\n  char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];\n  long int __align;\n} pthread_rwlockattr_t;\n#endif\n\n\n#ifdef __USE_XOPEN2K\n/* POSIX spinlock data type.  */\ntypedef volatile int pthread_spinlock_t;\n\n\n/* POSIX barriers data type.  The structure of the type is\n   deliberately not exposed.  */\ntypedef union\n{\n  char __size[__SIZEOF_PTHREAD_BARRIER_T];\n  long int __align;\n} pthread_barrier_t;\n\ntypedef union\n{\n  char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];\n  int __align;\n} pthread_barrierattr_t;\n#endif\n\n#endif\n"}],"crc32":1842092300,"timestamp":1704214356,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]