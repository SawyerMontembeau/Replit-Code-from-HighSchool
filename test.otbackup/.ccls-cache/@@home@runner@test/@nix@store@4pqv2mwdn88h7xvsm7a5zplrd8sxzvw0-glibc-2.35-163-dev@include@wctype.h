[{"ops":[{"insert":"/* Copyright (C) 1996-2022 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.  */\n\n/*\n *\tISO C99 Standard: 7.25\n *\tWide character classification and mapping utilities  <wctype.h>\n */\n\n#ifndef _WCTYPE_H\n#define _WCTYPE_H 1\n\n#include <features.h>\n#include <bits/types.h>\n#include <bits/types/wint_t.h>\n\n/* Constant expression of type `wint_t' whose value does not correspond\n   to any member of the extended character set.  */\n#ifndef WEOF\n# define WEOF (0xffffffffu)\n#endif\n\n/* Some definitions from this header also appear in <wchar.h> in\n   Unix98 mode.  */\n#include <bits/wctype-wchar.h>\n\n/*\n * Extensible wide-character mapping functions: 7.15.3.2.\n */\n\n__BEGIN_DECLS\n\n/* Scalar type that can hold values which represent locale-specific\n   character mappings.  */\ntypedef const __int32_t *wctrans_t;\n\n/* Construct value that describes a mapping between wide characters\n   identified by the string argument PROPERTY.  */\nextern wctrans_t wctrans (const char *__property) __THROW;\n\n/* Map the wide character WC using the mapping described by DESC.  */\nextern wint_t towctrans (wint_t __wc, wctrans_t __desc) __THROW;\n\n# ifdef __USE_XOPEN2K8\n/* POSIX.1-2008 extended locale interface (see locale.h).  */\n#  include <bits/types/locale_t.h>\n\n/* Test for any wide character for which `iswalpha' or `iswdigit' is\n   true.  */\nextern int iswalnum_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any wide character for which `iswupper' or 'iswlower' is\n   true, or any wide character that is one of a locale-specific set of\n   wide-characters for which none of `iswcntrl', `iswdigit',\n   `iswpunct', or `iswspace' is true.  */\nextern int iswalpha_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any control wide character.  */\nextern int iswcntrl_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any wide character that corresponds to a decimal-digit\n   character.  */\nextern int iswdigit_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any wide character for which `iswprint' is true and\n   `iswspace' is false.  */\nextern int iswgraph_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any wide character that corresponds to a lowercase letter\n   or is one of a locale-specific set of wide characters for which\n   none of `iswcntrl', `iswdigit', `iswpunct', or `iswspace' is true.  */\nextern int iswlower_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any printing wide character.  */\nextern int iswprint_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any printing wide character that is one of a\n   locale-specific et of wide characters for which neither `iswspace'\n   nor `iswalnum' is true.  */\nextern int iswpunct_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any wide character that corresponds to a locale-specific\n   set of wide characters for which none of `iswalnum', `iswgraph', or\n   `iswpunct' is true.  */\nextern int iswspace_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any wide character that corresponds to an uppercase letter\n   or is one of a locale-specific set of wide character for which none\n   of `iswcntrl', `iswdigit', `iswpunct', or `iswspace' is true.  */\nextern int iswupper_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any wide character that corresponds to a hexadecimal-digit\n   character equivalent to that performed be the functions described\n   in the previous subclause.  */\nextern int iswxdigit_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Test for any wide character that corresponds to a standard blank\n   wide character or a locale-specific set of wide characters for\n   which `iswalnum' is false.  */\nextern int iswblank_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Construct value that describes a class of wide characters identified\n   by the string argument PROPERTY.  */\nextern wctype_t wctype_l (const char *__property, locale_t __locale)\n     __THROW;\n\n/* Determine whether the wide-character WC has the property described by\n   DESC.  */\nextern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)\n     __THROW;\n\n/*\n * Wide-character case-mapping functions.\n */\n\n/* Converts an uppercase letter to the corresponding lowercase letter.  */\nextern wint_t towlower_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Converts an lowercase letter to the corresponding uppercase letter.  */\nextern wint_t towupper_l (wint_t __wc, locale_t __locale) __THROW;\n\n/* Construct value that describes a mapping between wide characters\n   identified by the string argument PROPERTY.  */\nextern wctrans_t wctrans_l (const char *__property, locale_t __locale)\n     __THROW;\n\n/* Map the wide character WC using the mapping described by DESC.  */\nextern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,\n\t\t\t   locale_t __locale) __THROW;\n\n# endif /* Use POSIX 2008.  */\n\n__END_DECLS\n\n#endif /* wctype.h  */\n"}],"crc32":1919914568,"timestamp":1704214355,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]