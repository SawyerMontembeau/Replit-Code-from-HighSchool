[{"ops":[{"insert":"// Exception Handling support header (exception_ptr class) for -*- C++ -*-\n\n// Copyright (C) 2008-2021 Free Software Foundation, Inc.\n//\n// This file is part of GCC.\n//\n// GCC is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 3, or (at your option)\n// any later version.\n// \n// GCC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file bits/exception_ptr.h\n *  This is an internal header file, included by other library headers.\n *  Do not attempt to use it directly. @headername{exception}\n */\n\n#ifndef _EXCEPTION_PTR_H\n#define _EXCEPTION_PTR_H\n\n#pragma GCC visibility push(default)\n\n#include <bits/c++config.h>\n#include <bits/exception_defines.h>\n#include <bits/cxxabi_init_exception.h>\n#include <typeinfo>\n#include <new>\n\n#if __cplusplus >= 201103L\n# include <bits/move.h>\n#endif\n\n#ifdef _GLIBCXX_EH_PTR_RELOPS_COMPAT\n# define _GLIBCXX_EH_PTR_USED __attribute__((__used__))\n#else\n# define _GLIBCXX_EH_PTR_USED\n#endif\n\nextern \"C++\" {\n\nnamespace std \n{\n  class type_info;\n\n  /**\n   * @addtogroup exceptions\n   * @{\n   */\n\n  namespace __exception_ptr\n  {\n    class exception_ptr;\n  }\n\n  using __exception_ptr::exception_ptr;\n\n  /** Obtain an exception_ptr to the currently handled exception. If there\n   *  is none, or the currently handled exception is foreign, return the null\n   *  value.\n   */\n  exception_ptr current_exception() _GLIBCXX_USE_NOEXCEPT;\n\n  template<typename _Ex>\n  exception_ptr make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT;\n\n  /// Throw the object pointed to by the exception_ptr.\n  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));\n\n  namespace __exception_ptr\n  {\n    using std::rethrow_exception;\n\n    /**\n     *  @brief An opaque pointer to an arbitrary exception.\n     *  @ingroup exceptions\n     */\n    class exception_ptr\n    {\n      void* _M_exception_object;\n\n      explicit exception_ptr(void* __e) _GLIBCXX_USE_NOEXCEPT;\n\n      void _M_addref() _GLIBCXX_USE_NOEXCEPT;\n      void _M_release() _GLIBCXX_USE_NOEXCEPT;\n\n      void *_M_get() const _GLIBCXX_NOEXCEPT __attribute__ ((__pure__));\n\n      friend exception_ptr std::current_exception() _GLIBCXX_USE_NOEXCEPT;\n      friend void std::rethrow_exception(exception_ptr);\n      template<typename _Ex>\n      friend exception_ptr std::make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT;\n\n    public:\n      exception_ptr() _GLIBCXX_USE_NOEXCEPT;\n\n      exception_ptr(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;\n\n#if __cplusplus >= 201103L\n      exception_ptr(nullptr_t) noexcept\n      : _M_exception_object(nullptr)\n      { }\n\n      exception_ptr(exception_ptr&& __o) noexcept\n      : _M_exception_object(__o._M_exception_object)\n      { __o._M_exception_object = nullptr; }\n#endif\n\n#if (__cplusplus < 201103L) || defined (_GLIBCXX_EH_PTR_COMPAT)\n      typedef void (exception_ptr::*__safe_bool)();\n\n      // For construction from nullptr or 0.\n      exception_ptr(__safe_bool) _GLIBCXX_USE_NOEXCEPT;\n#endif\n\n      exception_ptr& \n      operator=(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;\n\n#if __cplusplus >= 201103L\n      exception_ptr& \n      operator=(exception_ptr&& __o) noexcept\n      {\n        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);\n        return *this;\n      }\n#endif\n\n      ~exception_ptr() _GLIBCXX_USE_NOEXCEPT;\n\n      void \n      swap(exception_ptr&) _GLIBCXX_USE_NOEXCEPT;\n\n#ifdef _GLIBCXX_EH_PTR_COMPAT\n      // Retained for compatibility with CXXABI_1.3.\n      void _M_safe_bool_dummy() _GLIBCXX_USE_NOEXCEPT\n\t__attribute__ ((__const__));\n      bool operator!() const _GLIBCXX_USE_NOEXCEPT\n\t__attribute__ ((__pure__));\n      operator __safe_bool() const _GLIBCXX_USE_NOEXCEPT;\n#endif\n\n#if __cplusplus >= 201103L\n      explicit operator bool() const noexcept\n      { return _M_exception_object; }\n#endif\n\n#if __cpp_impl_three_way_comparison >= 201907L \\\n      && ! defined _GLIBCXX_EH_PTR_RELOPS_COMPAT\n      friend bool\n      operator==(const exception_ptr&, const exception_ptr&) noexcept = default;\n#else\n      friend _GLIBCXX_EH_PTR_USED bool\n      operator==(const exception_ptr& __x, const exception_ptr& __y)\n      _GLIBCXX_USE_NOEXCEPT\n      { return __x._M_exception_object == __y._M_exception_object; }\n\n      friend _GLIBCXX_EH_PTR_USED bool\n      operator!=(const exception_ptr& __x, const exception_ptr& __y)\n      _GLIBCXX_USE_NOEXCEPT\n      { return __x._M_exception_object != __y._M_exception_object; }\n#endif\n\n      const class std::type_info*\n      __cxa_exception_type() const _GLIBCXX_USE_NOEXCEPT\n\t__attribute__ ((__pure__));\n    };\n\n    _GLIBCXX_EH_PTR_USED\n    inline\n    exception_ptr::exception_ptr() _GLIBCXX_USE_NOEXCEPT\n    : _M_exception_object(0)\n    { }\n\n    _GLIBCXX_EH_PTR_USED\n    inline\n    exception_ptr::exception_ptr(const exception_ptr& __other)\n    _GLIBCXX_USE_NOEXCEPT\n    : _M_exception_object(__other._M_exception_object)\n    {\n      if (_M_exception_object)\n\t_M_addref();\n    }\n\n    _GLIBCXX_EH_PTR_USED\n    inline\n    exception_ptr::~exception_ptr() _GLIBCXX_USE_NOEXCEPT\n    {\n      if (_M_exception_object)\n\t_M_release();\n    }\n\n    _GLIBCXX_EH_PTR_USED\n    inline exception_ptr&\n    exception_ptr::operator=(const exception_ptr& __other) _GLIBCXX_USE_NOEXCEPT\n    {\n      exception_ptr(__other).swap(*this);\n      return *this;\n    }\n\n    _GLIBCXX_EH_PTR_USED\n    inline void\n    exception_ptr::swap(exception_ptr &__other) _GLIBCXX_USE_NOEXCEPT\n    {\n      void *__tmp = _M_exception_object;\n      _M_exception_object = __other._M_exception_object;\n      __other._M_exception_object = __tmp;\n    }\n\n    /// @relates exception_ptr\n    inline void\n    swap(exception_ptr& __lhs, exception_ptr& __rhs)\n    { __lhs.swap(__rhs); }\n\n    /// @cond undocumented\n    template<typename _Ex>\n      inline void\n      __dest_thunk(void* __x)\n      { static_cast<_Ex*>(__x)->~_Ex(); }\n    /// @endcond\n\n  } // namespace __exception_ptr\n\n  /// Obtain an exception_ptr pointing to a copy of the supplied object.\n  template<typename _Ex>\n    exception_ptr \n    make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT\n    {\n#if __cpp_exceptions && __cpp_rtti && !_GLIBCXX_HAVE_CDTOR_CALLABI \\\n      && __cplusplus >= 201103L\n      using _Ex2 = typename remove_reference<_Ex>::type;\n      void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));\n      (void) __cxxabiv1::__cxa_init_primary_exception(\n\t  __e, const_cast<std::type_info*>(&typeid(_Ex)),\n\t  __exception_ptr::__dest_thunk<_Ex2>);\n      try\n\t{\n\t  ::new (__e) _Ex2(std::forward<_Ex>(__ex));\n          return exception_ptr(__e);\n\t}\n      catch(...)\n\t{\n\t  __cxxabiv1::__cxa_free_exception(__e);\n\t  return current_exception();\n\t}\n#elif __cpp_exceptions\n      try\n\t{\n          throw __ex;\n\t}\n      catch(...)\n\t{\n\t  return current_exception();\n\t}\n#else // no RTTI and no exceptions\n      return exception_ptr();\n#endif\n    }\n\n#undef _GLIBCXX_EH_PTR_USED\n\n  /// @} group exceptions\n} // namespace std\n\n} // extern \"C++\"\n\n#pragma GCC visibility pop\n\n#endif\n"}],"crc32":1994314391,"timestamp":1702397466,"tsString":"2024-01-02 16:52:28.0 +00:00:00","version":1}]